(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["claim-claim-module"],{

/***/ "./src/app/claim/adjustemententryform/adjustemententryform.component.css":
/*!*******************************************************************************!*\
  !*** ./src/app/claim/adjustemententryform/adjustemententryform.component.css ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/adjustemententryform/adjustemententryform.component.html":
/*!********************************************************************************!*\
  !*** ./src/app/claim/adjustemententryform/adjustemententryform.component.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-sm-12 col-md-12 col-lg-12 nocollapse\">\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n                <header>\r\n                    <h2>Adjustement Entry Form</h2>\r\n                </header>\r\n\r\n                <!-- widget div-->\r\n                <div>\r\n                    <!-- widget edit box -->\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <form class=\"smart-form \">\r\n                            <!--smart-form-main-->\r\n                            <fieldset>\r\n                                <section>\r\n                                    <!--<div class=\"row\">\r\n                                        <section class=\"col col-6\">\r\n                                            <label class=\"label\">LWFC Code: {{user.user.userid}}</label>\r\n                                        </section>\r\n                                        <section class=\"col col-6\">\r\n                                            <label class=\"label\">Agent Code: {{user.user.userid}}</label>\r\n                                        </section>\r\n                                    </div>-->\r\n                                    <div class=\"row\" *ngIf=\"isBenVisible\">\r\n                                        <section>\r\n                                            <div class=\"col col-6\">\r\n                                                <label class=\"label\">Beneficiary Name: {{beneficiary?.benFullName}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label class=\"label\">SSIN/PF Number: {{beneficiary?.benSSINOrPFAccountNo}}</label>\r\n                                            </div>\r\n                                        </section>\r\n                                    </div>\r\n                                        <div class=\"row\">\r\n                                            <section class=\"col col-6\">\r\n                                                <label class=\"label\">SSIN/PF Number: <span [style.color]=\"!ssinValid?'red':''\"><b>*</b></span></label>\r\n                                                <label class=\"input\">\r\n                                                    <input type=\"text\" id=\"number\" name=\"ssin\" [(ngModel)]=\"adjustment.ssinORPFNumber\" placeholder=\"SSIN/PF Number\"\r\n                                                           (change)=\"searchSSINNo($event.target.value)\" (keydown.enter)=\"searchSSINNo($event.target.value)\" maxlength=\"50\"\r\n                                                           [ngClass]=\"{'invalid-data':!ssinValid, 'valid-data': ssinValid}\"\r\n                                                           required>\r\n                                                </label>\r\n                                                <div *ngIf=\"!ssinValid\">\r\n                                                    <span style=\"color: red;\">SSIN/PF Number is required </span>\r\n                                                </div>\r\n                                            </section>\r\n                                            <section class=\"col col-6\">\r\n                                                <label class=\"label\">Adjustment Date: <span [style.color]=\"!adjustmentDateReq?'red':''\"><b>*</b></span></label>\r\n                                                <label class=\"input\">\r\n                                                    <input type=\"text\" name=\"adjustmentDate\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                           [maxDate]=\"toDayDate\" #adjustmentDate=\"ngModel\"\r\n                                                           placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"adjustment.adjustmentDate\"\r\n                                                           value=\"{{adjustment.adjustmentDate | date: 'dd/MM/yyyy' }}\" \r\n                                                           [ngClass]=\"{'invalid-data': (!adjustmentDateReq), 'valid-data': adjustmentDateReq}\"\r\n                                                           required>\r\n                                                </label>\r\n                                                <div *ngIf=\"!adjustmentDateReq\">\r\n                                                    <span style=\"color: red;\">Adjustment Date is required </span>\r\n                                                </div>\r\n                                            </section>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <section class=\"col col-6\">\r\n                                                <label class=\"label\">Ben Contribution Adjustment Amount: <span [style.color]=\"!benAdjustmentAmountReq?'red':''\"><b>*</b></span></label>\r\n                                                <label class=\"input\">\r\n                                                    <input type=\"text\" name=\"benadjustmentAmount\" placeholder=\"Adjustment Amount\" [(ngModel)]=\"adjustment.benAdjustmentAmount\" NumbersOnly\r\n                                                           required />\r\n                                                </label>\r\n                                                <div *ngIf=\"!benAdjustmentAmountReq\">\r\n                                                    <span style=\"color: red;\">Ben Contribution Adjustment Amount is required </span>\r\n                                                </div>\r\n                                            </section>\r\n                                            <section class=\"col col-6\">\r\n                                                <label class=\"label\">Govt Contribution Adjustment Amount: <span [style.color]=\"!govtAdjustmentAmountReq?'red':''\"><b>*</b></span></label>\r\n                                                <label class=\"input\">\r\n                                                    <input type=\"text\" name=\"govtAdjustmentAmount\" placeholder=\"Adjustment Amount\" [(ngModel)]=\"adjustment.govtAdjustmentAmount\" NumbersOnly\r\n                                                           required />\r\n                                                </label>\r\n                                                <div *ngIf=\"!govtAdjustmentAmountReq\">\r\n                                                    <span style=\"color: red;\">Govt Contribution Adjustment Amount is required </span>\r\n                                                </div>\r\n                                            </section>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <section class=\"col col-6\">\r\n                                                <label class=\"label\">Adjustment Type: <span [style.color]=\"!typeIsValid?'red':''\"><b>*</b></span></label>\r\n                                                <label class=\"input\">\r\n                                                    <!--<select class=\"form-control select\" name=\"adjustmentType\" [(ngModel)]=\"adjustment.adjustmentTypeId\"\r\n                                                            [ngClass]=\"{'invalid-data': !typeIsValid, 'valid-data': typeIsValid }\"\r\n                                                            required (change)=\"adjustmentTypeChange($event)\">\r\n                                                        <option value=\"0\" selected disabled>Choose an option</option>\r\n                                                        <option value=\"1\">Adjustment Credit</option>\r\n                                                        <option value=\"2\">Adjustment Debit</option>\r\n                                                        <option value=\"3\">Opening Balance(Cr)</option>\r\n                                                        <option value=\"4\">Other(Cr)</option>\r\n                                                        <option value=\"5\">Other(Dr)</option>\r\n                                                    </select>-->\r\n\r\n                                                    <select class=\"form-control select\" name=\"adjustmentType\" (change)=\"adjustmentTypeChange($event)\"\r\n                                                            [ngClass]=\"{'invalid-data': !typeIsValid, 'valid-data': typeIsValid }\"\r\n                                                            [(ngModel)]=\"adjustment.adjustmentTypeId\" required>\r\n                                                        <option value=\"0\" selected disabled>Choose an Option</option>\r\n                                                        <option value=\"{{type.lovDtlId}}\" *ngFor=\"let type of adjustmentTypeLov\">{{type.optionName}}</option>\r\n                                                    </select><i></i>\r\n                                                </label>\r\n                                                <div *ngIf=\"!typeIsValid\">\r\n                                                    <span style=\"color: red;\">Adjustment Type is required </span>\r\n                                                </div>\r\n                                            </section>\r\n                                            <section class=\"col col-6\">\r\n                                                <label class=\"label\">Reference Number: </label>\r\n                                                <label class=\"input\">\r\n                                                    <input type=\"text\" name=\"referenceNumber\" placeholder=\"Reference Number\" [(ngModel)]=\"adjustment.reference\" />\r\n                                                </label>\r\n                                                <!--<div *ngIf=\"!referencenumberReq\">\r\n                                                        <span style=\"color: red;\">Reference Number is required </span>\r\n                                                    </div>-->\r\n                                            </section>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <section class=\"col col-6\">\r\n                                                <label class=\"label\">Remarks: </label>\r\n                                                <label class=\"input\">\r\n                                                    <input type=\"text\" name=\"remarks\" placeholder=\"Remarks\" [(ngModel)]=\"adjustment.remarks\" />\r\n                                                </label>\r\n                                                <!--<div *ngIf=\"!remarksReq\">\r\n                                                    <span style=\"color: red;\">Remarks is required </span>\r\n                                                </div>-->\r\n                                            </section>\r\n                                        </div>\r\n                                </section>\r\n                            </fieldset>\r\n\r\n                            <footer>\r\n                                <button type=\"button\" name=\"submit\" class=\"btn btn-success\" (click)=\"saveAdjustment()\">\r\n                                    Submit\r\n                                </button>\r\n                                <a class=\"btn btn-danger\" (click)=\"cancleClick()\">Cancel</a>\r\n                            </footer>\r\n                        </form>\r\n                    </div>\r\n                    <!-- end widget content -->\r\n\r\n                </div>\r\n                <!-- end widget div -->\r\n\r\n            </div>\r\n            <!-- end widget -->\r\n        </article>\r\n        <!-- WIDGET END -->\r\n    </div>\r\n</section>\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">Success Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\" style=\"overflow-y:scroll\">\r\n                <div [innerHTML]=\"successMessage\"></div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/adjustemententryform/adjustemententryform.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/claim/adjustemententryform/adjustemententryform.component.ts ***!
  \******************************************************************************/
/*! exports provided: AdjustemententryformComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdjustemententryformComponent", function() { return AdjustemententryformComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var AdjustemententryformComponent = /** @class */ (function () {
    function AdjustemententryformComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.beneficiary = {};
        this.adjustment = {};
        this.isBenVisible = false;
        this.ssinValid = true;
        this.adjustmentDateReq = true;
        //adjustmentAmountReq: boolean = true;
        this.benAdjustmentAmountReq = true;
        this.govtAdjustmentAmountReq = true;
        this.typeIsValid = true;
        this.referencenumberReq = true;
        this.remarksReq = true;
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        this.toDayDate = new Date();
    }
    AdjustemententryformComponent.prototype.ngOnInit = function () {
        this.getAdjustmentType();
    };
    AdjustemententryformComponent.prototype.validateAdjustment = function () {
        var isValid = true;
        if (this.adjustment.ssinORPFNumber == undefined || this.adjustment.ssinORPFNumber == "") {
            this.ssinValid = isValid = false;
        }
        if (this.adjustment.adjustmentDate == undefined || this.adjustment.adjustmentDate == null) {
            this.adjustmentDateReq = isValid = false;
        }
        if (this.adjustment.benAdjustmentAmount == undefined || this.adjustment.benAdjustmentAmount == null || this.adjustment.benAdjustmentAmount.toString() == "") {
            this.benAdjustmentAmountReq = isValid = false;
        }
        if (this.adjustment.govtAdjustmentAmount == undefined || this.adjustment.govtAdjustmentAmount == null || this.adjustment.govtAdjustmentAmount.toString() == "") {
            this.govtAdjustmentAmountReq = isValid = false;
        }
        if (this.adjustment.adjustmentType == undefined || this.adjustment.adjustmentType == null) {
            this.typeIsValid = isValid = false;
        }
        //if (this.adjustment.reference == undefined || this.adjustment.reference == null || this.adjustment.reference.trim() == "") { this.referencenumberReq = isValid = false; }
        //if (this.adjustment.remarks == undefined || this.adjustment.remarks == null || this.adjustment.remarks.trim() == "") { this.remarksReq = isValid = false; }
        return isValid;
    };
    AdjustemententryformComponent.prototype.searchSSINNo = function (ssnNo) {
        var _this = this;
        this.isBenVisible = false;
        if (ssnNo != undefined && ssnNo.trim() != "") {
            this.clearValues();
            this.dataService
                .getAdjustmentBeneficiaryBasicDetailsByID(ssnNo.trim())
                .subscribe(function (data) {
                debugger;
                _this.beneficiary = data;
                _this.isBenVisible = true;
            });
        }
        else {
            this.beneficiary = {};
        }
    };
    AdjustemententryformComponent.prototype.saveAdjustment = function () {
        var _this = this;
        this.adjustment.benSno = this.beneficiary.benSno;
        if (this.validateAdjustment()) {
            if (confirm("Are you sure to proceed ")) {
                this.dataService
                    .saveAdjustment(this.adjustment)
                    .then(function (data) {
                    //if (data) {
                    _this.successMessage = "Adjustment is saved successfully";
                    _this.successModal.show();
                    //}
                    //else {
                    //    this.successMessage = "Invalid transaction";
                    //    this.successModal.show();
                    //}
                });
            }
        }
    };
    AdjustemententryformComponent.prototype.clearValues = function () {
        this.adjustment.adjustmentDate = null;
        this.adjustment.benAdjustmentAmount = null;
        this.adjustment.govtAdjustmentAmount = null;
        this.adjustment.adjustmentTypeId = 0;
        this.adjustment.reference = "";
        this.adjustment.remarks = "";
    };
    AdjustemententryformComponent.prototype.okClick = function () {
        this.clearValues();
        this.successModal.hide();
    };
    AdjustemententryformComponent.prototype.adjustmentTypeChange = function (args) {
        debugger;
        this.adjustment.adjustmentType = args.target.options[args.target.selectedIndex].text;
    };
    AdjustemententryformComponent.prototype.getAdjustmentType = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__["LovConstants"].AdjustmentType)
            .subscribe(function (data) {
            _this.adjustmentTypeLov = data;
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_4__["ModalDirective"])
    ], AdjustemententryformComponent.prototype, "successModal", void 0);
    AdjustemententryformComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-adjustemententryform',
            template: __webpack_require__(/*! ./adjustemententryform.component.html */ "./src/app/claim/adjustemententryform/adjustemententryform.component.html"),
            styles: [__webpack_require__(/*! ./adjustemententryform.component.css */ "./src/app/claim/adjustemententryform/adjustemententryform.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], AdjustemententryformComponent);
    return AdjustemententryformComponent;
}());



/***/ }),

/***/ "./src/app/claim/agent-claim-entry/agent-claim-entry.component.css":
/*!*************************************************************************!*\
  !*** ./src/app/claim/agent-claim-entry/agent-claim-entry.component.css ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".invalid-data {\r\n    border: 1px solid red;\r\n}\r\n\r\n.valid-data {\r\n    border: 1px solid rgb(19, 92, 4);\r\n}\r\n"

/***/ }),

/***/ "./src/app/claim/agent-claim-entry/agent-claim-entry.component.html":
/*!**************************************************************************!*\
  !*** ./src/app/claim/agent-claim-entry/agent-claim-entry.component.html ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<section id=\"widget-grid\" class=\"\">\r\n    <!-- row -->\r\n    <div class=\"row\">\r\n        <article class=\"col-sm-12 col-md-12 col-lg-12 nocollapse\">\r\n            <!-- Widget ID (each widget will need unique ID)-->\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n                <header>\r\n                    <h2>Claim Entry</h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n                    <!-- widget edit box -->\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n                    </div>\r\n                    <!-- end widget edit box -->\r\n                    <!-- widget content -->\r\n                    <div class=\"widget-body no-padding\">\r\n                        <!-- Success states for elements -->\r\n                        <form class=\"smart-form\">\r\n                            <header>Beneficiary Details</header>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\" *ngIf=\"beneficiary==null\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Please enter valid SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"benficiaryInactive\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Your registration application is in Inactive/Sent Back/Pending status and you are not eligible to this feature.</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"validateDependent\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Please add atleast one claim to proceed</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"noDependents\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>No dependents available for the given SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"maxLimitExceeded\">\r\n                                        <div class=\"col col-12\" style=\"color:red\">\r\n                                            <label>Maximum claims limit has been reached for this year</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"maxHelathClaimLimitExceeded\">\r\n                                        <div class=\"col col-12\" style=\"color:red\">\r\n                                            <label>Maximum claims limit for health has been reached for this year</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"pfExsits\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>No pf available for the given SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isPFSubmitted\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>PF claim already submitted for the given SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"!isNomineesExist\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Beneficiary doesn't have nominees</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isBenNomineeSubmittedClaim\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Claims are entered through the nominee/agent with the reason of death, till it is resolved you are not allowed to submit the claim</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isBenNomineeSubmittedPFClaim\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>PF claim already submitted with the nominee for the given SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isHFSubmitted\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Your not eligible for Health & Family claim for the given SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isEduSubmitted\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Your not eligible for Education claim for the given SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isBenDeath\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>The given SSIN number is in death status</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isCAFUpdated\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Please update details</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isClaimEffectiveDate\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Can not raise/submit claims before {{claimEffectiveDate | date: 'dd/MM/yyyy'}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">Reason for Apply <span [style.color]=\"!reasonForApplyValid?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"select\">\r\n                                                <select name=\"reasonForApply\" id=\"selclaim\" [(ngModel)]=\"claim.reasonForApply\" (change)=\"reasonForApplyChange($event.target.value)\">\r\n                                                    <option value=\"0\">Choose mode</option>\r\n                                                    <option value=\"{{rfa.lovDtlId}}\" *ngFor=\"let rfa of reasonForApply\">{{rfa.optionName}}</option>\r\n                                                </select> <i></i>\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"viewDeathFieldsAndNominee\">\r\n                                        <div class=\"col col-3\">\r\n                                            <label class=\"radio\">\r\n                                                <input type=\"radio\" name=\"radio-inline\" checked=\"checked\" (change)=\"radioChange(1)\" />\r\n                                                <i></i>SSIN\r\n                                            </label>\r\n                                        </div>\r\n                                        <div class=\"col col-3\">\r\n                                            <label class=\"radio\">\r\n                                                <input type=\"radio\" name=\"radio-inline\" (change)=\"radioChange(2)\" />\r\n                                                <!--[(ngModel)]=\"fundRequestType\" value=\"expenses\">-->\r\n                                                <i></i>Old Registration No.\r\n                                            </label>\r\n                                        </div>\r\n                                        <div class=\"col col-3\">\r\n                                        </div>\r\n                                        <div class=\"col col-3\">\r\n                                            <button type=\"button\" class=\"btn btn-primary\" (click)=\"updateCAFDetails()\" *ngIf=\"isCAFUpdated\">\r\n                                                Please update details\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"!viewDeathFieldsAndNominee\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">SSIN <span [style.color]=\"!ssinReq?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <i class=\"icon-append fa fa-search\" (click)=\"searchSSINNo(claim.ssin)\"></i>\r\n                                                <input type=\"text\" name=\"benSno\" class=\"form-control\" [(ngModel)]=\"ssin\" placeholder=\"Enter SSIN\" (change)=\"searchSSINNo($event.target.value)\" (keydown.enter)=\"valuechange($event.target.value)\" NumbersOnly maxlength=\"50\">\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"viewDeathFieldsAndNominee\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">SSIN/Old Registration No. <span [style.color]=\"!ssinReq?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <i class=\"icon-append fa fa-search\" (click)=\"searchSSINNo(claim.ssin)\"></i>\r\n                                                <input type=\"text\" name=\"benSno\" class=\"form-control\" [(ngModel)]=\"ssin\" placeholder=\"Enter SSIN/Old Registration No.\" (change)=\"searchSSINNo($event.target.value)\" (keydown.enter)=\"valuechange($event.target.value)\" maxlength=\"50\">\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                                <section>\r\n                                    <div class=\"row\" *ngIf=\"viewDeathFieldsAndNominee\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">Nominee <span [style.color]=\"!nomineeRequired?'red':''\"><b>*</b></span></label>\r\n                                            <!--<label class=\"select\">-->\r\n                                            <select class=\"form-control select\" name=\"nomineeId\" [(ngModel)]=\"claim.nomineeId\" (change)=\"nomineeChange($event.target.value)\">\r\n                                                <option value=\"0\" selected>Choose Nominee</option>\r\n                                                <option value=\"{{ben.benNomineeSno}}\" *ngFor=\"let ben of benficiaryNominee\">{{ben.benNomineeName}} - {{ben.benNomineeRelation}}</option>\r\n                                            </select><i></i>\r\n                                            <!--</label>-->\r\n                                            <div *ngIf=\"!nomineeRequired\">\r\n                                                <span style=\"color: red;\">Select a Nominee </span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">Nominee Address</label>\r\n                                            <label class=\"input\">\r\n                                                <textarea name=\"nomineeAddress\" class=\"form-control\" rows=\"4\" cols=\"40\" placeholder=\"Nominee Address\" [(ngModel)]=\"claim.nomineeAddress\" maxlength=\"500\"></textarea>\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\"><strong>Beneficiary Name: </strong>{{beneficiary?.benFirstName}} {{beneficiary?.benMiddleName}} {{beneficiary?.benLastName}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\"><strong>SSIN: </strong>{{beneficiary?.ssI_Number}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <div class=\"row\" id=\"CheckBoxList\">\r\n                                    <div class=\"col col-3\">\r\n                                        <label class=\"checkbox state-success\"><input name=\"pf\" [disabled]=\"beneficiary.benFirstName == undefined || !beneficiary.isActive || disablePFCheckbox\" type=\"checkbox\" [checked]=\"viewPf\" (change)=\"pfChange($event)\"><i></i>PF(Provident Fund)</label>\r\n                                        <!--<label class=\"checkbox state-success\"><input disabled=\"disabled\" type=\"checkbox\" name=\"checkbox\" [checked]=\"viewPf\" (change)=\"pfChange($event)\"><i></i>PF(Provident Fund)</label>-->\r\n                                    </div>\r\n                                    <div class=\"col col-3\">\r\n                                        <label class=\"checkbox state-success\"><input [disabled]=\"beneficiary.benFirstName == undefined || !beneficiary.isActive || disableHealthCheckbox\" type=\"checkbox\" name=\"checkbox4\" [checked]=\"viewHealth\" (change)=\"healthChange($event)\"><i></i>Health & Family</label>\r\n                                    </div>\r\n                                    <div class=\"col col-2\">\r\n                                        <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"checkbox3\" [disabled]=\"beneficiary.benFirstName == undefined || !beneficiary.isActive || disableDisabilityCheckbox \" [(checked)]=\"viewDisability\" (change)=\"disabilityChangeEvent($event)\"><i></i>Disablity</label>\r\n                                        <!--<label class=\"checkbox state-success\"><input disabled=\"disabled\" type=\"checkbox\" name=\"viewDeath1\" [checked]=\"viewDeath\" (change)=\"deathChange($event)\"><i></i>Death</label>-->\r\n                                    </div>\r\n                                    <div class=\"col col-2\">\r\n                                        <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"checkbox2\" [disabled]=\"beneficiary.benFirstName == undefined || !beneficiary.isActive || disableDeathCheckbox\" [(checked)]=\"viewDeath\" (change)=\"deathChange($event)\"><i></i>Death</label>\r\n                                        <!--<label class=\"checkbox state-success\"><input disabled=\"disabled\" type=\"checkbox\" name=\"viewDeath1\" [checked]=\"viewDeath\" (change)=\"deathChange($event)\"><i></i>Disability</label>-->\r\n                                    </div>\r\n                                    <div class=\"col col-2\">\r\n                                        <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"checkbox1\" [disabled]=\"beneficiary.benFirstName == undefined || !beneficiary.isActive || disableEducationCheckbox\" [(checked)]=\"viewEducation\" (change)=\"educationChange($event)\"><i></i>Education</label>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                            <fieldset id=\"form-pf\" *ngIf=\"viewPf\">\r\n                                <header>Provident Fund</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    PF No. {{beneficiary.regNumber}}\r\n                                                </label>\r\n                                                <!--removed as per 17th discussions, in future this has to be open-->\r\n                                                <!--<input type=\"text\" class=\"form-control\" name=\"pFNO\" placeholder=\" PF Number\" [(ngModel)]=\"claim.providentFundDetails.pFNO\">-->\r\n                                            </div>\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    Claim Amount {{pfClaimAmount}} /-\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    Date of Maturity {{benMaturityDate  | date: 'dd/MM/yyyy'}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    Locking Period Up-to {{pfLockingPeriod  | date: 'dd/MM/yyyy'}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    Type of Claim <span [style.color]=\"!pfTypeOfClaimValid?'red':''\"><b>*</b></span>\r\n                                                </label>\r\n                                                <select class=\"form-control select\" name=\"pfTypeOfClaim\" id=\"selclaim\"\r\n                                                        (change)=\"pfTypeOfClaimChange($event.target.value)\"\r\n                                                        [(ngModel)]=\"claim.providentFundDetails.typeOfClaim\"\r\n                                                        #pfTypeOfClaim=\"ngModel\"\r\n                                                        [ngClass]=\"{'invalid-data': pfTypeOfClaim.invalid && ( !pfTypeOfClaimValid || pfTypeOfClaim.touched ),\r\n                                                        'valid-data': pfTypeOfClaimValid && pfTypeOfClaim.valid  }\"\r\n                                                        required [disabled]=\"disablePFTypeOfClaim\">\r\n                                                    <option value=\"0\" disabled>Choose a Type of Claim</option>\r\n                                                    <option value=\"{{pf.claimConfigId}}\" *ngFor=\"let pf of pfConfig\">\r\n                                                        {{pf.claimConfigOptionName}}\r\n                                                    </option>\r\n                                                </select><i></i>\r\n                                                <div *ngIf=\"pfTypeOfClaim.invalid && (!pfTypeOfClaimValid || pfTypeOfClaim.touched)\">\r\n                                                    <span style=\"color: red;\">Select a Type of Claim </span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col col-6 \" *ngIf=\"isPrematureClaim\">\r\n                                                <label class=\"label\">\r\n                                                    Reason for Preclosure<span [style.color]=\"!reasonForPreclosureValid?'red':''\"><b>*</b></span>\r\n                                                </label>\r\n                                                <label class=\"textarea textarea-resizable\">\r\n                                                    <textarea rows=\"3\" class=\"custom-scroll\" name=\"reasonForPreclosure\" placeholder=\"Reason for Preclosure\"\r\n                                                              [(ngModel)]=\"claim.providentFundDetails.reasonForPreClosure\" #reasonForPreclosure=\"ngModel\"\r\n                                                              [ngClass]=\"{'invalid-data': reasonForPreclosure.invalid && ( !reasonForPreclosureValid || reasonForPreclosure.touched ),\r\n                                                'valid-data': reasonForPreclosureValid && reasonForPreclosure.valid }\"\r\n                                                              required></textarea>\r\n                                                </label>\r\n                                                <div *ngIf=\"reasonForPreclosure.invalid && (!reasonForPreclosureValid || reasonForPreclosure.touched)\">\r\n                                                    <span style=\"color: red;\">Reason For Preclosure is required </span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"row\" *ngIf=\"viewNomineeShare\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    Nominee Share Amount {{benNomineeShareAmount}} /-\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </fieldset>\r\n                            <fieldset id=\"health-family\" *ngIf=\"viewHealth\">\r\n                                <header>Health & Family</header>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Type of Claim<span [style.color]=\"!typeOfClaimValid?'red':''\"><b>*</b></span></label>\r\n\r\n                                        <select class=\"form-control select\" name=\"typeOfClaim\" id=\"selclaim\"\r\n                                                (change)=\"typeOfClaimChange($event.target.value)\" [(ngModel)]=\"claim.healthFamilyDetails.typeOfClaim\"\r\n                                                #typeOfClaim=\"ngModel\"\r\n                                                [ngClass]=\"{'invalid-data': typeOfClaim.invalid && ( !typeOfClaimValid || typeOfClaim.touched ),\r\n                                        'valid-data': typeOfClaimValid && typeOfClaim.valid  }\"\r\n                                                required>\r\n                                            <option value=\"0\" disabled>Choose a Type of Claim</option>\r\n                                            <option value=\"{{health.claimConfigId}}\" *ngFor=\"let health of healthConfig\">{{health.claimConfigOptionName}}</option>\r\n                                        </select> <i></i>\r\n                                        <div *ngIf=\"typeOfClaim.invalid && (!typeOfClaimValid || typeOfClaim.touched)\">\r\n                                            <span style=\"color: red;\">Select a Type of Claim </span>\r\n                                        </div>\r\n\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Hospital <span [style.color]=\"!hospital?'red':''\"><b>*</b></span></label>\r\n\r\n                                        <select class=\"form-control select\" name=\"hospitalId\" id=\"ddlhospital\" [(ngModel)]=\"claim.healthFamilyDetails.hospitalId\"\r\n                                                #hospitalId=\"ngModel\" (change)=\"hospitalChange($event.target.value)\"\r\n                                                [ngClass]=\"{'invalid-data': hospitalId.invalid && ( !hospital || hospitalId.touched ),\r\n                                        'valid-data': hospital && hospitalId.valid  }\"\r\n                                                required>\r\n                                            <option value=\"0\" disabled>Choose a Hospital</option>\r\n                                            <option value=\"{{hospital.hospitalId}}\" *ngFor=\"let hospital of hospotalList\">{{hospital.hospitalName}}</option>\r\n                                        </select> <i></i>\r\n\r\n                                        <div *ngIf=\"hospitalId.invalid && (!hospital || hospitalId.touched)\">\r\n                                            <span style=\"color: red;\">Select a Hospital </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"isOtherHospital\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Govt./Municipal Hospital <span [style.color]=\"!otherHospitalValid?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"otherHospital\" placeholder=\"Govt./Municipal Hospital\" [(ngModel)]=\"claim.healthFamilyDetails.otherHospital\"\r\n                                                   maxlength=\"150\" #otherHospital=\"ngModel\" [ngClass]=\"{'invalid-data': otherHospital.invalid && ( !otherHospitalValid || otherHospital.touched ),\r\n                                                        'valid-data': otherHospitalValid && otherHospital.valid  }\" required>\r\n                                        </label>\r\n                                        <div *ngIf=\"otherHospital.invalid && (!otherHospitalValid || otherHospital.touched)\">\r\n                                            <span style=\"color: red;\">Govt./Municipal Hospital is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\" id=\"inoutward\">\r\n                                        <label class=\"label\">Hospitalization/OPD <span [style.color]=\"!hospitalization?'red':''\"><b>*</b></span></label>\r\n\r\n                                        <select class=\"form-control select\" name=\"typeOfHospitalization\" id=\"ddinward\" (change)=\"hospitalizationChange($event.target.value)\"\r\n                                                [(ngModel)]=\"claim.healthFamilyDetails.typeOfHospitalization\"\r\n                                                #typeOfHospitalization=\"ngModel\"\r\n                                                [ngClass]=\"{'invalid-data': typeOfHospitalization.invalid && (!hospitalization || typeOfHospitalization.touched ),\r\n                                        'valid-data': hospitalization && typeOfHospitalization.valid  }\"\r\n                                                required>\r\n                                            <option value=\"0\" disabled>Choose an Option</option>\r\n                                            <option value=\"{{hosp.lovDtlId}}\" *ngFor=\"let hosp of hospitalizationLov\">{{hosp.optionName}}</option>\r\n                                        </select><i></i>\r\n\r\n                                        <div *ngIf=\"typeOfHospitalization.invalid && (!hospitalization || typeOfHospitalization.touched)\">\r\n                                            <span style=\"color: red;\">Select Hospitalization/OPD </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Patient Id </label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"patientId\" placeholder=\"Patient Id\" [(ngModel)]=\"claim.healthFamilyDetails.patientId\" maxlength=\"50\">\r\n                                        </label>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"viewDateOfFirstAppointment\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Name of Disease </label>\r\n\r\n                                        <select class=\"form-control select\" name=\"nameOfDisease\" id=\"ddinward\" (change)=\"nameOfDiseaseChange($event.target.value)\"\r\n                                                [(ngModel)]=\"claim.healthFamilyDetails.nameOfTheDisease\">\r\n                                            <option value=\"0\" disabled>Choose an Option</option>\r\n                                            <option value=\"{{dise.lovDtlId}}\" *ngFor=\"let dise of diseasesLov\">{{dise.optionName}}</option>\r\n                                        </select><i></i>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" *ngIf=\"viewNameOfClinicalTest\">\r\n                                        <label class=\"label\">Name of clinical test </label>\r\n                                        <ng-multiselect-dropdown name=\"nameOfClinicalTest\" [placeholder]=\"'All'\"\r\n                                                                 [data]=\"clinicalTestLov\"\r\n                                                                 [(ngModel)]=\"nameOfClinicalTestIds\"\r\n                                                                 [settings]=\"clinicalTestSettings\"\r\n                                                                 (onSelect)=\"onItemSelect($event)\"\r\n                                                                 (onSelectAll)=\"onSelectAll($event)\">\r\n                                        </ng-multiselect-dropdown>\r\n                                        <!--<select class=\"form-control select\" name=\"nameOfClinicalTest\" id=\"ddinward\"\r\n                                                [(ngModel)]=\"claim.healthFamilyDetails.nameOfClinicalTest\">\r\n                                            <option value=\"0\" disabled>Choose an Option</option>\r\n                                            <option value=\"{{clin.lovDtlId}}\" *ngFor=\"let clin of clinicalTestLov\">{{clin.optionName}}</option>\r\n                                        </select><i></i>-->\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section id=\"chkAccident\" class=\"col col-6\" *ngIf=\"viewMetWithAnAccident\">\r\n                                        <label class=\"label\">Met with an Accident?</label>\r\n                                        <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"isAccident\" id=\"chkAcc\" (change)=\"chkAccidentChange($event,claim.healthFamilyDetails.isAccident)\" [(ngModel)]=\"claim.healthFamilyDetails.isAccident\"><i></i>Yes</label>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" id=\"secFirstApp\" *ngIf=\"viewDateOfFirstAppointment\">\r\n                                        <label class=\"label\">Date of First Appointment <span [style.color]=\"!dateofAppointment?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <input type=\"text\" name=\"firstAppointmentDate\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                   [maxDate]=\"maxAdmitDate\" placeholder=\"DD/MM/YYYY\" value=\"{{ claim.healthFamilyDetails.firstAppointmentDate | date: 'dd/MM/yyyy' }}\"\r\n                                                   [(ngModel)]=\"claim.healthFamilyDetails.firstAppointmentDate\" readonly\r\n                                                   #firstAppointmentDate=\"ngModel\"\r\n                                                   [ngClass]=\"{'invalid-data':firstAppointmentDate.invalid && (!dateofAppointment), 'valid-data': firstAppointmentDate.valid && dateofAppointment}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"firstAppointmentDate.invalid && (!dateofAppointment)\">\r\n                                            <span style=\"color: red;\">Date of First Appointment is required </span>\r\n                                        </div>\r\n\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"viewDateOfAdmit\">\r\n                                    <section class=\"col col-6\" id=\"secAdmit\">\r\n                                        <label class=\"label\">Date of Admission to Hospital <span [style.color]=\"!dateofAdmin?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <!--<input type=\"text\" name=\"dateofAdmit\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\" placeholder=\"DD/MM/YYYY\" value=\"{{ claim.healthFamilyDetails.admittedDate | date: 'dd/MM/yyyy' }}\" [(ngModel)]=\"claim.healthFamilyDetails.admittedDate\" (bsValueChange)=\"dateofadminchange($event)\" readonly>-->\r\n\r\n                                            <input type=\"text\" name=\"admittedDate\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                   [maxDate]=\"maxAdmitDate\"\r\n                                                   #admittedDate=\"ngModel\"\r\n                                                   placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"claim.healthFamilyDetails.admittedDate\"\r\n                                                   value=\"{{ claim.healthFamilyDetails.admittedDate | date: 'dd/MM/yyyy' }}\"\r\n                                                   (bsValueChange)=\"dateofadminchange($event)\" readonly\r\n                                                   [ngClass]=\"{'invalid-data':admittedDate.invalid && (!dateofAdmin), 'valid-data':admittedDate.valid && dateofAdmin}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"admittedDate.invalid && (!dateofAdmin)\">\r\n                                            <span style=\"color: red;\">Date of Admission to Hospital is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" id=\"secDischarge\">\r\n                                        <label class=\"label\">Date of Discharge <span [style.color]=\"!dateofDischargeValid?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <!--<input type=\"text\" name=\"dateofDischarge\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\" [minDate]=\"dischargeMinDt\" [disabled]=\"disableDischarge\" placeholder=\"DD/MM/YYYY\" value=\"claim.healthFamilyDetails.dischargeDate | date: 'dd/MM/yyyy'\" [(ngModel)]=\"claim.healthFamilyDetails.dischargeDate\" (bsValueChange)=\"dateofdischargechange($event)\" readonly>-->\r\n                                            <input type=\"text\" name=\"dischargeDate\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                   [maxDate]=\"maxAdmitDate\"\r\n                                                   [minDate]=\"dischargeMinDt\" [disabled]=\"disableDischarge\" placeholder=\"DD/MM/YYYY\"\r\n                                                   #dischargeDate=\"ngModel\"\r\n                                                   [(ngModel)]=\"claim.healthFamilyDetails.dischargeDate\"\r\n                                                   value=\"{{claim.healthFamilyDetails.dischargeDate | date: 'dd/MM/yyyy'}}\"\r\n                                                   (bsValueChange)=\"dateofdischargechange($event)\" readonly\r\n                                                   [ngClass]=\"{'invalid-data':dischargeDate.invalid && (!dateofDischargeValid), 'valid-data':dischargeDate.valid && dateofDischargeValid}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"dischargeDate.invalid && (!dateofDischargeValid)\">\r\n                                            <span style=\"color: red;\">Date of discharge is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Cost of Clinical Test </label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"costOfClinicalTest\" placeholder=\"Cost of Clinical Test\" NumbersOnly [(ngModel)]=\"claim.healthFamilyDetails.costOfClinicalTest\" [disabled]=\"disableCost\">\r\n                                        </label>\r\n                                    </section>\r\n\r\n                                    <section class=\"col col-6\">\r\n\r\n                                        <label class=\"label\">Cost of Medicine </label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"costOfMedicine\" placeholder=\"Cost of Medicine\" NumbersOnly [(ngModel)]=\"claim.healthFamilyDetails.costOfMedicine\" [disabled]=\"disableCost\">\r\n                                        </label>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Claim for <span [style.color]=\"!claimForValid?'red':''\"><b>*</b></span></label>\r\n\r\n                                        <select class=\"form-control select\" name=\"claimFor\" id=\"claimFor\" (change)=\"claimForChange($event)\"\r\n                                                [(ngModel)]=\"claim.healthFamilyDetails.claimFor\"\r\n                                                #claimFor=\"ngModel\"\r\n                                                [ngClass]=\"{'invalid-data':claimFor.invalid && (!claimForValid ||  claimFor.touched ), 'valid-data': claimFor.valid && claimForValid}\"\r\n                                                required>\r\n                                            <option value=\"0\" disabled>Choose an Option</option>\r\n                                            <option value=\"{{htype.lovDtlId}}\" *ngFor=\"let htype of healthtypeofClaim\">{{htype.optionName}}</option>\r\n                                        </select> <i></i>\r\n\r\n\r\n                                        <div *ngIf=\"claimFor.invalid && (!claimForValid ||  claimFor.touched)\">\r\n                                            <span style=\"color: red;\">Claim for is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" *ngIf=\"viewDateOfAdmit\">\r\n                                        <label class=\"label\">Cost of Hospitalization </label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"costOfHospitalization\" NumbersOnly placeholder=\"Cost of Hospitalization\" [(ngModel)]=\"claim.healthFamilyDetails.costOfHospitalization\">\r\n                                        </label>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" id=\"family\" *ngIf=\"viewFamily\">\r\n                                        <label class=\"label\">Family Member <span [style.color]=\"!familyMember?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"select\">\r\n                                            <select class=\"form-control select\" name=\"familyMemberId\" [(ngModel)]=\"claim.healthFamilyDetails.familyMemberId\"\r\n                                                    #familyMemberId=\"ngModel\"\r\n                                                    [ngClass]=\"{'invalid-data':familyMemberId.invalid && (!familyMember ||  familyMemberId.touched), 'valid-data': familyMemberId.valid && familyMember}\"\r\n                                                    required>\r\n                                                <option value=\"0\" disabled>Choose an Option</option>\r\n                                                <option value=\"{{benf.benFamilyMemSno}}\" *ngFor=\"let benf of benficiaryFamilybyHealth\">{{benf.benDependentName}} - {{benf.benDependentRelation}}</option>\r\n                                            </select> <i></i>\r\n                                        </label>\r\n                                        <div *ngIf=\"familyMemberId.invalid && (!familyMember ||  familyMemberId.touched)\">\r\n                                            <span style=\"color: red;\">Family Member is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\" *ngIf=\"enableReasonForDelaySubmissionInHealth\">\r\n                                        <label class=\"label\"> Reason for Delay Submission <span [style.color]=\"!reasonForHealthDelayValid?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <textarea name=\"reasonForHealthDelay\" rows=\"4\" cols=\"72\" [(ngModel)]=\"claim.healthFamilyDetails.reasonForDelaySubmission\" placeholder=\"Reason for Delay Submission\"></textarea>\r\n                                        </label>\r\n                                        <div *ngIf=\"!reasonForHealthDelayValid\">\r\n                                            <span style=\"color: red;\">Reason for Delay Submission is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row top-10\" id=\"lossOfEmployment\" *ngIf=\"viewSelf\">\r\n                                    <section class=\"col col-12\" style=\"margin-bottom: 0;\">\r\n                                        <label class=\"label\"><strong>Loss of Employment</strong></label>\r\n                                        <hr />\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row top-10\" id=\"daterangeloe\" *ngIf=\"viewSelf\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">From Date<span [style.color]=\"!loeFromDate?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <input type=\"text\" name=\"lossOfEmploymentFromDate\" autocomplete=\"off\" class=\"form-control\"\r\n                                                   [disabled]=\"true\" placeholder=\"DD/MM/YYYY\"\r\n                                                   [ngModel]=\"claim.healthFamilyDetails.loeFromDate | date: 'dd/MM/yyyy'\" readonly\r\n                                                   #lossOfEmploymentFromDate=\"ngModel\"\r\n                                                   [ngClass]=\"{'invalid-data':lossOfEmploymentFromDate.invalid && (!loeFromDate ||  lossOfEmploymentFromDate.touched), 'valid-data': lossOfEmploymentFromDate.valid && loeFromDate}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"lossOfEmploymentFromDate.invalid && (!loeFromDate ||  lossOfEmploymentFromDate.touched)\">\r\n                                            <span style=\"color: red;\">Form Date is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">To Date<span [style.color]=\"!loeToDate?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <input type=\"text\" name=\"lossOfEmploymentToDate\" autocomplete=\"off\" class=\"form-control\"\r\n                                                   [disabled]=\"true\" placeholder=\"DD/MM/YYYY\"\r\n                                                   [ngModel]=\"claim.healthFamilyDetails.loeToDate | date: 'dd/MM/yyyy'\" readonly\r\n                                                   #lossOfEmploymentToDate=\"ngModel\"\r\n                                                   [ngClass]=\"{'invalid-data':lossOfEmploymentToDate.invalid && (!loeToDate ||  lossOfEmploymentToDate.touched), 'valid-data': lossOfEmploymentToDate.valid && loeToDate}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"lossOfEmploymentToDate.invalid && (!loeToDate ||  lossOfEmploymentToDate.touched)\">\r\n                                            <span style=\"color: red;\">To Date is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" *ngIf=\"viewLOEAmount\">\r\n                                        <label class=\"label\" style=\"margin-top:30px;\">Loss of Employment Benefit: {{lossOfEmploymentAmount}}/- </label>\r\n                                    </section>\r\n                                </div>\r\n\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"><strong>Packages</strong> </label><br>\r\n                                        <hr />\r\n                                    </section>\r\n\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <a (click)=\"viewPackages()\" class=\"smart-form-link\">View All Packages</a>\r\n                                    </section>\r\n\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"selectedPackages.length>0\">\r\n                                    <table class=\"table table-striped\" [mfData]=\"selectedPackages\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th><mfDefaultSorter by=\"packageName\">Package Name</mfDefaultSorter></th>\r\n                                                <th><mfDefaultSorter by=\"packageCode\">Package Code</mfDefaultSorter></th>\r\n                                                <th><mfDefaultSorter by=\"ailmentName\">Ailment Name</mfDefaultSorter></th>\r\n                                                <th><mfDefaultSorter by=\"amount\">Amount</mfDefaultSorter></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr *ngFor=\"let pak of mf.data;\">\r\n                                                <td>{{pak.packageName}}</td>\r\n                                                <td>{{pak.packageCode}}</td>\r\n                                                <td>{{pak.ailmentName}}</td>\r\n                                                <td>{{pak.amount}}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                        <tfoot><tr><td colspan=\"4\"><mfBootstrapPaginator></mfBootstrapPaginator></td></tr></tfoot>\r\n                                    </table>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"><strong>Upload Documents</strong> </label><br>\r\n                                        <hr />\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"showDisCertUpload\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">\r\n                                            Discharge Certificate from Govt./Empanelled Hospital\r\n                                            <span [style.color]=\"!dischargeCertificate?'red':''\"><b>*</b></span>\r\n                                        </label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'dischargeCertificate')\">Browse</span>\r\n                                            <input type=\"text\" readonly>\r\n                                        </div>\r\n\r\n                                        <div *ngIf=\"(!dischargeCertificate) && (healthDischargeCertificate.fileName =='' || healthDischargeCertificate.fileName ==undefined )\">\r\n                                            <span style=\"color: red;\">Discharge certificate is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthDischargeCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Original Vouchers </label>  <!--<span [style.color]=\"!originalVoucher?'red':''\"><b>*</b></span>-->\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" accept=\"image/*,.pdf\" (change)=\"changeCertificate($event,'originalVoucher')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <!--<div *ngIf=\"(!originalVoucher) && (healthOriginalVoucher.fileName =='' || healthOriginalVoucher.fileName ==undefined)\">\r\n                <span style=\"color: red;\">Original vouchers is required </span>\r\n            </div>-->\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthOriginalVoucher.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Self attested copy of doctor's last prescription <span [style.color]=\"!hospitalselfAttested?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'healthselfAttest')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div *ngIf=\"(!hospitalselfAttested) && (healthSelfAttached.fileName =='' || healthSelfAttached.fileName ==undefined )\">\r\n                                            <span style=\"color: red;\">Self attested is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthSelfAttached.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Expenses Sheet </label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'healthExpensesSheet')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthExpensesSheet.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"enableReasonForDelaySubmissionInHealth\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Condonation certificate  <span [style.color]=\"!healthCondolationCertificateUploaded?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"healthCondolationCertificate\" (change)=\"changeCertificate($event,'healthCondolationCertificate')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div *ngIf=\"(!healthCondolationCertificateUploaded) && (healthCondolationCertificate.fileName =='' || healthCondolationCertificate.fileName == undefined )\">\r\n                                            <span style=\"color: red;\">Condonation certificate is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthCondolationCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n\r\n                                                <input type=\"checkbox\" name=\"isCertifynotESI\" [(ngModel)]=\"claim.healthFamilyDetails.isCertifynotESI\"\r\n                                                       #isCertifynotESI=\"ngModel\"\r\n                                                       [ngClass]=\"{'invalid-data':isCertifynotESI.invalid && (!rigisterESI ||  isCertifynotESI.touched), 'valid-data': isCertifynotESI.valid && rigisterESI}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that\r\n                                                I am not registered under ESI Act, 1948 or RSBY or Swasthya Sathi or WBTWSSS\r\n                                                <span [style.color]=\"!rigisterESI?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isCertifynotESI.invalid && (!rigisterESI ||  isCertifynotESI.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of ESI Act is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                            </fieldset>\r\n                            <fieldset id=\"diasability\" *ngIf=\"viewDisability\">\r\n                                <header>Disability</header>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Date of release from hospital/Accident <span [style.color]=\"!dateofrelease1?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <!--<input type=\"text\" name=\"request\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\" placeholder=\"DD/MM/YYYY\" [(bsValue)]=\"claim.disabilityDetails.dateofrelease\" readonly>-->\r\n                                            <input type=\"text\" name=\"request2\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\"\r\n                                                   placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"claim.disabilityDetails.dateofRelease\" (bsValueChange)=\"disabilityDateofReleaseChange($event)\"\r\n                                                   value=\"{{ claim.disabilityDetails.dateofRelease | date: 'dd/MM/yyyy' }}\"\r\n                                                   #request2=\"ngModel\" readonly\r\n                                                   [ngClass]=\"{'invalid-data':request2.invalid && (!dateofrelease1), 'valid-data':request2.valid && dateofrelease1}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"request2.invalid && (!dateofrelease1)\">\r\n                                            <span style=\"color: red;\">Date of release from hospital/Accident is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Nature of Disability <span [style.color]=\"!natureOfDisability?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"select\">\r\n                                            <select name=\"gender\" id=\"natureOfDisabilityDropdown\" (change)=\"disabilityChange($event.target.value)\" [(ngModel)]=\"claim.disabilityDetails.natureOfDisability\"\r\n                                                    #natureOfDisabilityDropdown=\"ngModel\" [ngClass]=\"{'invalid-data': natureOfDisabilityDropdown.invalid && ( !natureOfDisability || natureOfDisabilityDropdown.touched ),\r\n                                                    'valid-data': natureOfDisability && natureOfDisabilityDropdown.valid  }\" required>\r\n                                                <option value=\"0\" disabled>Choose an Option</option>\r\n                                                <option value=\"{{dis.claimConfigId}}\" *ngFor=\"let dis of disabilityConfig\">{{dis.claimConfigOptionName}}</option>\r\n                                            </select> <i></i>\r\n                                        </label>\r\n                                        <div *ngIf=\"!checkNatureOfDisability\">\r\n                                            <span style=\"color: red;\">Claim has been already submitted with this nature of disability </span>\r\n                                        </div>\r\n                                        <div *ngIf=\"natureOfDisabilityDropdown.invalid && (!natureOfDisability || natureOfDisabilityDropdown.touched)\">\r\n                                            <span style=\"color: red;\">Select Nature of Disability </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"> Details of Disability</label>\r\n                                        <label class=\"input\">\r\n                                            <textarea name=\"request\" rows=\"4\" cols=\"72\" [(ngModel)]=\"claim.disabilityDetails.detailsOfDisability\" placeholder=\"Details of disability\"></textarea>\r\n                                        </label>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" *ngIf=\"enableReasonForDelaySubmission\">\r\n                                        <label class=\"label\"> Reason for Delay Submission <span [style.color]=\"!reasonForDelayValid?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <textarea name=\"reasonForDelay\" rows=\"4\" cols=\"72\" [(ngModel)]=\"claim.disabilityDetails.reasonForDelaySubmission\" placeholder=\"Reason for Delay Submission\"></textarea>\r\n                                        </label>\r\n                                        <div *ngIf=\"!reasonForDelayValid\">\r\n                                            <span style=\"color: red;\">Reason for Delay Submission is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\" *ngIf=\"enableDeathEligibility\">\r\n                                        <label class=\"label\">Eligible Amount: {{disableEligibility}} </label>\r\n                                        <!--<div class=\"col col-6\">\r\n                <label class=\"label\"><strong>Eligible Amount:</strong> </label>\r\n            </div>\r\n            <div class=\"col col-6\">\r\n                <label id=\"amtbasedonDisability\">{{disableEligibility}}</label>\r\n            </div>-->\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"><strong>Upload Documents</strong> </label><br>\r\n                                        <hr />\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Certificate of disability from the competent authority <span [style.color]=\"!disabilityCertificateUploaded?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'disablityCertificate')\">Browse</span><input type=\"text\" readonly>\r\n                                            <!--<span class=\"button\"><input type=\"file\" id=\"file\" onchange=\"this.parentNode.nextSibling.value = this.value\">Browse</span><input type=\"text\" readonly>-->\r\n                                        </div>\r\n                                        <div *ngIf=\"(!disabilityCertificateUploaded) && (disabilityCertificate.fileName =='' || disabilityCertificate.fileName ==undefined )\">\r\n                                            <span style=\"color: red;\">Discharge certificate is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{disabilityCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"enableReasonForDelaySubmission\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Condolation certificate  <span [style.color]=\"!condolationCertificateUploaded?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'condolationCertificate')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div *ngIf=\"(!condolationCertificateUploaded) && (condolationCertificate.fileName =='' || condolationCertificate.fileName == undefined )\">\r\n                                            <span style=\"color: red;\">Condolation certificate is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{condolationCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n\r\n                                                <input type=\"checkbox\" name=\"isDeathorpermanentdisabilitynotcausedbyintentional\" [(ngModel)]=\"claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyintentional\"\r\n                                                       #isDeathorpermanentdisabilitynotcausedbyintentional=\"ngModel\" [ngClass]=\"{'invalid-data':isDeathorpermanentdisabilitynotcausedbyintentional.invalid && (!isDeathorpermanent1 ||  isDeathorpermanentdisabilitynotcausedbyintentional.touched), 'valid-data': isDeathorpermanentdisabilitynotcausedbyintentional.valid && isDeathorpermanent1}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that\r\n                                                permanent disability not caused by intentional self injury, suicide or attempted suicide, insanity or immorality or under influence of intoxicating liquor, drug or narcotic\r\n                                                <span [style.color]=\"!isDeathorpermanent1?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isDeathorpermanentdisabilitynotcausedbyintentional.invalid && (!isDeathorpermanent1 ||  isDeathorpermanentdisabilitynotcausedbyintentional.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of permanent disability not caused by intentional self injury is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n\r\n                                                <input type=\"checkbox\" name=\"isDeathorpermanentdisabilitynotcausedbyinjuries\" [(ngModel)]=\"claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyinjuries\"\r\n                                                       #isDeathorpermanentdisabilitynotcausedbyinjuries=\"ngModel\" [ngClass]=\"{'invalid-data':isDeathorpermanentdisabilitynotcausedbyinjuries.invalid && (!isDeathorpermanent2 ||  isDeathorpermanentdisabilitynotcausedbyinjuries.touched), 'valid-data': isDeathorpermanentdisabilitynotcausedbyinjuries.valid && isDeathorpermanent2}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that permanent disability not caused by injuries resulting from riots, civil commotions, or racing of any kind\r\n                                                <span [style.color]=\"!isDeathorpermanent2?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isDeathorpermanentdisabilitynotcausedbyinjuries.invalid && (!isDeathorpermanent2 ||  isDeathorpermanentdisabilitynotcausedbyinjuries.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of permanent disability not caused by injuries is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n\r\n                                                <input type=\"checkbox\" name=\"isOtherFinancialAssistance\" [(ngModel)]=\"claim.disabilityDetails.isOtherFinancialAssistance\"\r\n                                                       #isOtherFinancialAssistance=\"ngModel\" [ngClass]=\"{'invalid-data':isOtherFinancialAssistance.invalid && (!isDeathorpermanent3 ||  isOtherFinancialAssistance.touched), 'valid-data': isOtherFinancialAssistance.valid && isDeathorpermanent3}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that I am not in receipt of any financial assistance of similar nature from the government\r\n                                                <span [style.color]=\"!isDeathorpermanent3?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isOtherFinancialAssistance.invalid && (!isDeathorpermanent3 ||  isOtherFinancialAssistance.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of not in receipt of any financial assistance is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                            </fieldset>\r\n                            <fieldset id=\"death\" *ngIf=\"viewDeath\">\r\n                                <header>Death</header>\r\n                                <div class=\"row\" id=\"divdeath1\">\r\n                                    <section class=\"col col-6\">\r\n                                        <!--<label class=\"label\">Nature of Death</label>\r\n            <label class=\"select\">\r\n                <select name=\"natureofDeath\" id=\"selnature\" (change)=\"natureOfDeathChange($event.target.value)\" [(ngModel)]=\"claim.deathDetails.natureofDeath\">\r\n                    <option value=\"0\">Choose an Option</option>\r\n                    <option value=\"{{death.claimConfigId}}\" *ngFor=\"let death of deathConfig\">{{death.claimConfigOptionName}}</option>\r\n\r\n                </select> <i></i>\r\n            </label>-->\r\n                                        <label class=\"label\">Nature of Death <span [style.color]=\"!natureOfDeath?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"select\">\r\n                                            <select name=\"gender\" id=\"natureofDeathDropdown\" (change)=\"natureOfDeathChange($event.target.value)\" [(ngModel)]=\"claim.deathDetails.natureofDeath\"\r\n                                                    #natureofDeathDropdown=\"ngModel\" [ngClass]=\"{'invalid-data': natureofDeathDropdown.invalid && ( !natureOfDeath || natureofDeathDropdown.touched ),\r\n                                                    'valid-data': natureOfDeath && natureofDeathDropdown.valid  }\" required>\r\n                                                <option value=\"0\" disabled>Choose an Option</option>\r\n                                                <option value=\"{{death.claimConfigId}}\" *ngFor=\"let death of deathConfig\">{{death.claimConfigOptionName}}</option>\r\n                                            </select> <i></i>\r\n                                        </label>\r\n                                        <div *ngIf=\"natureofDeathDropdown.invalid && (!natureOfDeath || natureofDeathDropdown.touched)\">\r\n                                            <span style=\"color: red;\">Select Nature of Death </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Date of Death <span [style.color]=\"!dateofDeath?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <!--<input type=\"text\" name=\"deathDatePicker\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\" placeholder=\"DD/MM/YYYY\"\r\n                [(bsValue)]=\"claim.deathDetails.dateofDeath\" readonly>-->\r\n                                            <input type=\"text\" name=\"dateofDeathDatePicker\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\"\r\n                                                   placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"claim.deathDetails.dateofDeath\"\r\n                                                   value=\"{{ claim.deathDetails.dateofDeath | date: 'dd/MM/yyyy' }}\"\r\n                                                   #dateofDeathDatePicker=\"ngModel\" readonly\r\n                                                   [ngClass]=\"{'invalid-data':dateofDeathDatePicker.invalid && (!dateofDeath), 'valid-data':dateofDeathDatePicker.valid && dateofDeath}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"dateofDeathDatePicker.invalid && (!dateofDeath)\">\r\n                                            <span style=\"color: red;\">Date of Death is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" id=\"divdeath2\">\r\n                                    <section class=\"col col-6\" id=\"PlaceOfDeath\" *ngIf=\"viewAccidental\">\r\n                                        <!--<label class=\"label\">Place of Death </label>\r\n            <input type=\"text\" class=\"form-control\" name=\"placeofDeath\" placeholder=\" Place of Death\"\r\n                   [(ngModel)]=\"claim.deathDetails.placeofDeath\">-->\r\n                                        <label class=\"label\">Place of Death<span [style.color]=\"!placeOfDeathValid?'red':''\"><b>*</b></span> </label>\r\n                                        <input type=\"text\" class=\"form-control\" name=\"placeofDeath\" placeholder=\" Place of Death\" #placeofDeath=\"ngModel\"\r\n                                               [(ngModel)]=\"claim.deathDetails.placeofDeath\"\r\n                                               [ngClass]=\"{'invalid-data': placeofDeath.invalid && (!placeOfDeathValid || placeofDeath.touched), 'valid-data': placeofDeath.valid && placeOfDeathValid }\" required />\r\n                                        <div *ngIf=\"placeofDeath.invalid && (!placeOfDeathValid ||placeofDeath.touched)\">\r\n                                            <span style=\"color: red;\">Place of Death is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"> Details of Death</label>\r\n                                        <label class=\"input\">\r\n                                            <textarea name=\"detailsofDeath\" rows=\"4\" cols=\"72\" placeholder=\"Details of disability\" [(ngModel)]=\"claim.deathDetails.detailsofDeath\"></textarea>\r\n                                        </label>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\" id=\"eligibleAmountdeath\" *ngIf=\"viewEligibilityAmount\">\r\n                                        <label class=\"label\">Eligible Amount: {{deathEligibility}} </label>\r\n                                        <!--<div class=\"col col-6\">\r\n                <label class=\"label\"><strong>Eligible Amount:</strong> </label>\r\n            </div>\r\n            <div class=\"col col-6\">\r\n                <label id=\"amtbasedonDisability\">{{deathEligibility}}</label>\r\n            </div>-->\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"><strong>Upload Documents</strong> </label><br>\r\n                                        <hr />\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Attested copy of Death Certificate <span [style.color]=\"!deathCertificateUploaded?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'deathCertificate')\">Browse</span><input type=\"text\" readonly>\r\n                                            <!--<span class=\"button\"><input type=\"file\" id=\"file\" onchange=\"this.parentNode.nextSibling.value = this.value\">Browse</span><input type=\"text\" readonly>-->\r\n                                        </div>\r\n                                        <div *ngIf=\"(!deathCertificateUploaded) && (deathCertificate.fileName =='' || deathCertificate.fileName ==undefined )\">\r\n                                            <span style=\"color: red;\">Death certificate is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{deathCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">First Page of Bank Passbook <span [style.color]=\"!bankPassbookUploaded?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'bankPassbook')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div *ngIf=\"(!bankPassbookUploaded) && (bankPassbook.fileName =='' || bankPassbook.fileName ==undefined )\">\r\n                                            <span style=\"color: red;\">First Page of Bank Passbook is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{bankPassbook.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isDeathnotcausedbyintentional\" [(ngModel)]=\"claim.deathDetails.isDeathorpermanentdisabilitynotcausedbyintentional\"\r\n                                                       #isDeathnotcausedbyintentional=\"ngModel\" [ngClass]=\"{'invalid-data':isDeathnotcausedbyintentional.invalid && (!isDeath1 ||  isDeathnotcausedbyintentional.touched), 'valid-data': isDeathnotcausedbyintentional.valid && isDeath1}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that the\r\n                                                Death or permanent disability not caused by intentional self injury, suicide or attempted suicide, insanity or immorality or under influence of intoxicating liquor, drug or narcotic\r\n                                                <span [style.color]=\"!isDeath1?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isDeathnotcausedbyintentional.invalid && (!isDeath1 ||  isDeathnotcausedbyintentional.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of Death or permanent disability not caused by intentional self injury is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isDeathnotcausedbyinjuries\" [(ngModel)]=\"claim.deathDetails.isDeathorpermanentdisabilitynotcausedbyinjuries\"\r\n                                                       #isDeathnotcausedbyinjuries=\"ngModel\" [ngClass]=\"{'invalid-data':isDeathnotcausedbyinjuries.invalid && (!isDeath2 ||  isDeathnotcausedbyinjuries.touched), 'valid-data': isDeathnotcausedbyinjuries.valid && isDeath2}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that Death or permanent disability not caused by injuries resulting from riots, civil commotions, or racing of any kind\r\n                                                <span [style.color]=\"!isDeath2?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isDeathnotcausedbyinjuries.invalid && (!isDeath2 ||  isDeathnotcausedbyinjuries.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of Death or permanent disability not caused by injuries is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isDeathOtherFinancialAssistance\" [(ngModel)]=\"claim.deathDetails.isOtherFinancialAssistance\"\r\n                                                       #isDeathOtherFinancialAssistance=\"ngModel\" [ngClass]=\"{'invalid-data':isDeathOtherFinancialAssistance.invalid && (!isDeath3 ||  isDeathOtherFinancialAssistance.touched), 'valid-data': isDeathOtherFinancialAssistance.valid && isDeath3}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that I am not in receipt of any financial assistance of similar nature from the government\r\n                                                <span [style.color]=\"!isDeath3?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isDeathOtherFinancialAssistance.invalid && (!isDeath3 ||  isDeathOtherFinancialAssistance.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of not in receipt of any financial assistance is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                            </fieldset>\r\n                            <fieldset id=\"education\" *ngIf=\"viewEducation\" [disabled]=\"disableEdu\">\r\n                                <header>Education </header>\r\n\r\n                                <fieldset id=\"addbutton\">\r\n                                    <div class=\"row\" *ngIf=\"eduCount<2 && benficiaryChildren.length !=0\">\r\n                                        <a class=\"btn btn-primary\" (click)=\"openModel()\" style=\"width :55px;height:30px;padding:5px;\"> Add </a>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <table id=\"datatable_fixed_column\" class=\"table table-striped table-bordered\" width=\"100%\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Name of the Student</th>\r\n                                                    <th>Name of the Institution</th>\r\n                                                    <th>Contact Number of the Institution</th>\r\n                                                    <th>Registration No./Roll No./Year</th>\r\n                                                    <th> Present Reading</th>\r\n                                                    <th></th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr *ngIf=\"educationDetailsArray.length==0\"><td colspan=\"6\">No student details</td></tr>\r\n                                                <tr *ngFor=\"let education of educationDetailsArray\">\r\n                                                    <td>{{education.dependentName}}</td>\r\n                                                    <td>{{education.institutionName}}</td>\r\n                                                    <td>{{education.institutionContact}}</td>\r\n                                                    <td>{{education.registrationRollNo}}</td>\r\n                                                    <td>{{education.presentlyReadingName}}</td>\r\n                                                    <td>\r\n                                                        <a class=\"btn btn-labeled btn-primary\" (click)=\"editEducationDetails(education)\" style=\"margin-right:5px;\"><i class=\"glyphicon glyphicon-edit\"></i> Edit</a>\r\n                                                        <a class=\"btn btn-labeled btn-danger\" (click)=\"removeEducationDetails(education)\"><i class=\"glyphicon glyphicon-trash\"></i> Remove</a>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                </fieldset>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Amount Claimed</label>\r\n                                        <label class=\"form-control\" disabled>{{claim.educationDetails.claimAmount}}</label>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"><strong>Upload Documents</strong> </label><br>\r\n                                        <hr />\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isanyothersourceofthegovernment\"\r\n                                                       [(ngModel)]=\"claim.educationDetails.isanyothersourceofthegovernment\"\r\n                                                       #isanyothersourceofthegovernment=\"ngModel\"\r\n                                                       [ngClass]=\"{'invalid-data':isanyothersourceofthegovernment.invalid && (!educationCheck ||  isanyothersourceofthegovernment.touched), 'valid-data': isanyothersourceofthegovernment.valid && educationCheck}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that My son or daughter is not availing or has not availed any scholarship for the above mentioned courses from any other source of the government\r\n                                                <span [style.color]=\"!educationCheck?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isanyothersourceofthegovernment.invalid && (!educationCheck ||  isanyothersourceofthegovernment.touched)\">\r\n                                                <span style=\"color: red;\">Check education terms and conditions </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                            </fieldset>\r\n                            <div *ngIf=\"viewPf || viewHealth || viewDisability || viewDeath|| viewEducation\">\r\n                                <header>Upload Documents</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label class=\"label\">Form - V duly filled and signed <span [style.color]=\"!uplaodmain?'red':''\"><b>*</b></span></label>\r\n                                                <div class=\"input input-file\">\r\n                                                    <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'main')\"\r\n                                                                                [disabled]=\"!(SubmitVisible && !disableSubmitbutton && !restrictSave)\">Browse</span><input type=\"text\" readonly>\r\n                                                </div>\r\n                                                <div *ngIf=\"(!uplaodmain) && (mainUpload?.fileName =='' || mainUpload?.fileName ==undefined )\">\r\n                                                    <span style=\"color: red;\">Form - V is required </span>\r\n                                                </div>\r\n                                                <div>\r\n                                                    {{mainUpload?.fileName}}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </div>\r\n                            <footer *ngIf=\"GenaratePdfVisible && disableSubmitbutton && !restrictSave\"><a class=\"btn btn-success\" (click)=\"GenaratePdf(claim,3)\">Generate Pdf</a></footer>\r\n                            <footer>\r\n                                <!--<a *ngIf=\"GenaratePdfVisible && disableSubmitbutton && !restrictSave\" class=\"btn btn-success\" (click)=\"GenaratePdf(claim,3)\">Generate Pdf</a>-->\r\n                                <a *ngIf=\"SubmitVisible && !disableSubmitbutton && !restrictSave\" name=\"save\" class=\"btn btn-success\" (click)=\"saveClaimsData(claim,2)\">Submit</a>\r\n                                <a class=\"btn btn-primary\" *ngIf=\"SaveVisible && !restrictSave\" (click)=\"saveClaimsData(claim,1,$event)\">Save as Draft</a>\r\n                                <a class=\"btn btn-default\" (click)=\"claerClaim()\">Reset</a>\r\n                                <a class=\"btn btn-danger\" (click)=\"cancleClick()\">Cancel</a>\r\n                            </footer>\r\n                        </form>\r\n                        <!--/ Success states for elements -->\r\n                    </div>\r\n                    <!-- end widget content -->\r\n                </div>\r\n                <!-- end widget div -->\r\n            </div>\r\n            <!-- end widget -->\r\n        </article>\r\n        <!-- WIDGET END -->\r\n    </div>\r\n    <!-- end row -->\r\n</section>\r\n<!-- end widget grid -->\r\n<div bsModal #lgModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"lgModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Add Student Details</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <fieldset id=\"divAddEducationDetails\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6 \">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label control-label\"> Name of the Student <span [style.color]=\"!studentNameValid?'red':''\"><b>*</b></span></label>\r\n                                <select class=\"form-control select\" name=\"dependentId\" (change)=\"selectDependent($event)\" [(ngModel)]=\"educationDetails.dependentId\"\r\n                                        #dependentId=\"ngModel\"\r\n                                        [ngClass]=\"{'invalid-data': dependentId.invalid && ( !studentNameValid || dependentId.touched ),\r\n                                        'valid-data': studentNameValid && dependentId.valid  }\"\r\n                                        required>\r\n                                    <option value=\"0\" selected disabled>Choose a Student</option>\r\n                                    <option value=\"{{ben.benFamilyMemSno}}\" *ngFor=\"let ben of benficiaryFamily\">{{ben.benDependentName}} - {{ben.benDependentRelation}}</option>\r\n                                </select>\r\n                                <i></i>\r\n                                <div *ngIf=\"dependentId.invalid && (!studentNameValid || dependentId.touched)\">\r\n                                    <span style=\"color: red;\">Select a Student </span>\r\n                                </div>\r\n                                <div *ngIf=\"isDuplicateDependent\">\r\n                                    <span style=\"color: red;\">Already submitted for this year please select another dependent </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Name of the Institution <span [style.color]=\"!institutionNameValid?'red':''\"><b>*</b></span></label>\r\n                                <input type=\"text\" name=\"institutionName\" placeholder=\"Name of the Institution\" [(ngModel)]=\"educationDetails.institutionName\"\r\n                                       #institutionName=\"ngModel\"\r\n                                       [ngClass]=\"{'invalid-data': institutionName.invalid && (!institutionNameValid || institutionName.touched), 'valid-data': institutionName.valid && institutionNameValid}\" class=\"form-control\"\r\n                                       required>\r\n                                <div *ngIf=\"institutionName.invalid && (!institutionNameValid ||institutionName.touched)\">\r\n                                    <span style=\"color: red;\">Name of the Institution is required </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Name of the Principal/Head Master of the institution</label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"institutionPrinicipleName\" placeholder=\"Institution Principal Name\" [(ngModel)]=\"educationDetails.institutionPrinicipleName\">\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Contact Number of the Institution</label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"institutionContact\" placeholder=\"Institution Contact\" [(ngModel)]=\"educationDetails.institutionContact\"\r\n                                       NumbersOnly maxlength=\"15\"\r\n                                       #institutionContact=\"ngModel\"\r\n                                       [ngClass]=\"{'invalid-data': !institutionContactValid }\">\r\n                                <div *ngIf=\"!institutionContactValid\">\r\n                                    <span style=\"color: red;\">Invalid IContact Number of the Institution</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Registration No./Roll No. of last exam passed  <span [style.color]=\"!registrationNoValid?'red':''\"><b>*</b></span></label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"registrationRollNo\" placeholder=\"Registration No./Roll No. of last exam passed \" [(ngModel)]=\"educationDetails.registrationRollNo\"\r\n                                       #registrationRollNo=\"ngModel\"\r\n                                       [ngClass]=\"{'invalid-data': registrationRollNo.invalid && (!registrationNoValid || registrationRollNo.touched), 'valid-data': registrationRollNo.valid && registrationNoValid}\"\r\n                                       required>\r\n                                <div *ngIf=\"registrationRollNo.invalid && (!registrationNoValid ||registrationRollNo.touched)\">\r\n                                    <span style=\"color: red;\">Registration No./Roll No. of last exam passed  is required </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Year of Examination <span [style.color]=\"!educationYearValid?'red':''\"><b>*</b></span></label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"year\" placeholder=\"Year\" [(ngModel)]=\"educationDetails.year\" maxlength=\"4\" NumbersOnly>  <!--readonly-->\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\" *ngIf=\"isMarried\">\r\n                            <div class=\"form-group\">\r\n                                <div>\r\n                                    <label for=\"label\">Is Married <span [style.color]=\"!marriedValid?'red':''\"><b>*</b></span></label>\r\n                                    <input type=\"radio\" value=\"1\" name=\"gender\" required #gender=\"ngModel\" [(ngModel)]=\"educationDetails.isMarried\"> Yes\r\n                                    <input type=\"radio\" value=\"0\" name=\"gender\" required #gender=\"ngModel\" [(ngModel)]=\"educationDetails.isMarried\">No\r\n                                </div>\r\n\r\n                                <div *ngIf=\"!marriedValid\">\r\n                                    <!--*ngIf=\"gender.invalid && (!marriedValid || gender.touched)\"-->\r\n                                    <span style=\"color: red;\">Is Married is required </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Last Exam Passed</label>\r\n                                <select name=\"lastExamPassed\" class=\"form-control\" (change)=\"selectLastExamPassed($event,educationDetails)\" [(ngModel)]=\"educationDetails.lastExamPassed\">\r\n                                    <option value=\"00\" disabled>Choose Reading</option>\r\n                                    <option value=\"{{lep.lovDtlId}}\" *ngFor=\"let lep of lastExampassed\">{{lep.optionName}}</option>\r\n\r\n                                </select> <i></i>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Date of Admission <span *ngIf=\"!isDisabledBaseOnLastExamPassed\" [style.color]=\"!dateOfAdmissionValid?'red':''\"><b>*</b></span></label>\r\n                                <input type=\"text\" name=\"dateofAdmission\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxDate\" placeholder=\"DD/MM/YYYY\"\r\n                                       #dateofAdmission=\"ngModel\" [disabled]=\"isDisabledBaseOnLastExamPassed\"\r\n                                       [(ngModel)]=\"educationDetails.dateofAdmission\" readonly\r\n                                       value=\"{{ educationDetails.dateofAdmission | date: 'dd/MM/yyyy' }}\"\r\n                                       [ngClass]=\"{'invalid-data':dateofAdmission.invalid && (!dateOfAdmissionValid || dateofAdmission.touched), 'valid-data':dateofAdmission.valid && dateOfAdmissionValid}\"\r\n                                       required>\r\n                                <div *ngIf=\"dateofAdmission.invalid && (!dateOfAdmissionValid || dateofAdmission.touched)\">\r\n                                    <span style=\"color: red;\">Date of Admission is required </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Presently Reading <span *ngIf=\"!isDisabledBaseOnLastExamPassed\" [style.color]=\"!presentlyReadingValid?'red':''\"><b>*</b></span></label>\r\n                                <select name=\"presentlyReading\" class=\"form-control\" (change)=\"selectPresentlyReading($event,educationDetails)\"\r\n                                        [(ngModel)]=\"educationDetails.presentlyReading\" #presentlyReading=\"ngModel\" [disabled]=\"isDisabledBaseOnLastExamPassed\"\r\n                                        [ngClass]=\"{'invalid-data': presentlyReading.invalid && ( !presentlyReadingValid || presentlyReading.touched ),\r\n                                        'valid-data': presentlyReadingValid && presentlyReading.valid  }\"\r\n                                        required>\r\n                                    <option value=\"0\" disabled>Choose Reading</option>\r\n                                    <option value=\"{{edu.claimConfigId}}\" *ngFor=\"let edu of educationConfig\">{{edu.claimConfigOptionName}}</option>\r\n                                </select> <i></i>\r\n                                <div *ngIf=\"presentlyReading.invalid && (!presentlyReadingValid || presentlyReading.touched)\">\r\n                                    <span style=\"color: red;\">Select a Presently reading </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\">Eligible Amount</label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"eligibleAmount\" [(ngModel)]=\"educationDetails.eligibleAmount\" disabled />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-12 smart-form\">\r\n                        <header>Upload Documents</header>\r\n                        <div class=\"row\" *ngIf=\"!isDisabledBaseOnLastExamPassed\">\r\n                            <section class=\"col col-10 top-5\">\r\n                                <label class=\"label\">Certificate from head of institution for not availing any scholarship <span [style.color]=\"!uploadCertificatetValid?'red':''\"><b>*</b></span> </label>\r\n\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\">\r\n                                        <input type=\"file\" id=\"file\" accept=\"image/*,.pdf\" multiple (change)=\"changeCertificate($event,'certificate')\">Browse\r\n                                    </span>\r\n                                    <input type=\"text\" readonly>\r\n                                    <label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                </div>\r\n                                <div *ngIf=\"!uploadCertificatetValid && educertificates.length==0\">\r\n                                    <span style=\"color: red;\"> Certificate required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr *ngFor=\"let item of educertificates\">\r\n                                            <td>{{item.fileName}}</td>\r\n                                            <td style=\"padding-left:10px\"> <a class=\"btn btn-danger\" (click)=\"removeUploadCertificates(item,'certificate')\">      <i class=\"glyphicon glyphicon-trash\"></i> Remove</a></td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </section>\r\n                            <!--<section style=\"padding-top:30px\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>-->\r\n                        </div>\r\n                        <div class=\"row\" *ngIf=\"viewuploadNonMarriage\">\r\n                            <section class=\"col col-10 top-5\">\r\n                                <label class=\"label\">Non marriage certificate of Daughter <span [style.color]=\"!uploadNonMarriageValid?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\"><input type=\"file\" accept=\"image/*,.pdf\" multiple (change)=\"changeCertificate($event,'nonMarriage')\" id=\"file\">Browse</span><input type=\"text\" readonly>\r\n                                    <label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                </div>\r\n                                <div *ngIf=\"!uploadNonMarriageValid && eduNonMarriage.length==0\">\r\n                                    <span style=\"color: red;\"> Non marriage certificate of Daughter required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr *ngFor=\"let item of eduNonMarriage\">\r\n                                            <td>{{item.fileName}}</td>\r\n                                            <td style=\"padding-left:10px\"> <a class=\"btn btn-danger\" (click)=\"removeUploadCertificates(item,'nonMarriage')\"><i class=\"glyphicon glyphicon-trash\"></i> Remove</a></td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </section>\r\n                            <!--<section style=\"padding-top:30px\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>-->\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <section class=\"col col-10 top-5\">\r\n                                <label class=\"label\">Self attested copy of last exam passing certificate <span [style.color]=\"!uploadselfattestedValid?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\"><input type=\"file\" id=\"file\" accept=\"image/*,.pdf\" multiple (change)=\"changeCertificate($event,'selfAttest')\">Browse</span>\r\n                                    <input type=\"text\" readonly>\r\n                                    <label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                </div>\r\n                                <div *ngIf=\"!uploadselfattestedValid && eduSelfAttested.length==0\">\r\n                                    <span style=\"color: red;\"> Self attested required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr *ngFor=\"let item of eduSelfAttested\">\r\n                                            <td>{{item.fileName}}</td>\r\n                                            <td style=\"padding-left:10px\"> <a class=\"btn btn-danger\" (click)=\"removeUploadCertificates(item,'selfAttest')\"><i class=\"glyphicon glyphicon-trash\"></i> Remove</a></td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </section>\r\n                            <!--<section style=\"padding-top:30px\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>-->\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"lgModal.hide()\">\r\n                    Cancel\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"addEducationDetails(educationDetails)\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">Success Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\" style=\"overflow-y:scroll\">\r\n                <div [innerHTML]=\"successMessage\"></div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<div bsModal #packageModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"packageModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Packages</h4>\r\n            </div>\r\n             <div class=\"modal-body\" style=\"max-height:500px; overflow-x:scroll\">\r\n                <div *ngFor=\"let item of result\" border=\"1\">\r\n                    <strong>{{item.name}}</strong>                    \r\n                    <table class=\"table table-striped\" [mfData]=\"item.values\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"5\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th><!--<input type=\"checkbox\" value=\"checkAll\" name=\"checkall\" (change)=\"checkAll($event,item.name)\" />--></th>\r\n                                <th><mfDefaultSorter by=\"packageName\">Package Name</mfDefaultSorter></th>\r\n                                <th><mfDefaultSorter by=\"packageCode\">Package Code</mfDefaultSorter></th>\r\n                                <th><mfDefaultSorter by=\"amount\">Amount</mfDefaultSorter></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let value of mf.data;let i=index;\">\r\n                                <td><input type=\"checkbox\" name=\"{{i}}\" [(ngModel)]=\"value.isChecked\" (change)=\"checkIfAllSelected(item);\" /></td>\r\n\t\t\t\t\t\t\t\t<td>{{value.packageName}}</td>\r\n                                <td>{{value.packageCode}}</td>\r\n                                <td>{{value.amount}}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tfoot><tr><td colspan=\"4\"><mfBootstrapPaginator></mfBootstrapPaginator></td></tr></tfoot>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitClick()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #pdfModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">Form-V Pdf</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                Form-V genarated, Please print or download.\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPdf(claim,'print')\">\r\n                    Print FormV\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPdf(claim,'download')\">\r\n                    Download FormV\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/claim/agent-claim-entry/agent-claim-entry.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/claim/agent-claim-entry/agent-claim-entry.component.ts ***!
  \************************************************************************/
/*! exports provided: AgentClaimEntryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgentClaimEntryComponent", function() { return AgentClaimEntryComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_6__);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var AgentClaimEntryComponent = /** @class */ (function () {
    function AgentClaimEntryComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.claimId = 0;
        this.claimStatus = 0;
        this.viewuploadNonMarriage = false;
        this.viewPf = false;
        this.viewHealth = false;
        this.viewDeath = false;
        this.viewEducation = false;
        this.viewDisability = false;
        this.viewDateOfFirstAppointment = false;
        this.viewDateOfAdmit = false;
        this.viewMetWithAnAccident = false;
        this.viewFamily = false;
        this.viewSelf = false;
        this.viewLOEAmount = false;
        this.viewAccidental = false;
        this.viewEligibilityAmount = false;
        this.viewDeathFieldsAndNominee = false;
        this.viewDisabilityFieldsAndNominee = false;
        this.enableDeathEligibility = false;
        this.disableSubmitbutton = true;
        this.disabledssin = false;
        this.disableEducationCheckbox = false;
        this.disableHealthCheckbox = false;
        this.claim = {};
        this.educationDetails = {};
        this.educationDetailsArray = [];
        this.hospitalizationLov = [];
        this.healthtypeofClaim = [];
        this.healthConfig = [];
        this.pfConfig = [];
        this.deathConfig = [];
        this.disabilityConfig = [];
        this.educationConfig = [];
        this.configConfig = [];
        this.lastExampassed = [];
        this.reasonForApply = [];
        this.beneficiary = {};
        this.benficiaryFamily = [];
        this.benficiaryChildren = [];
        this.benficiaryNominee = [];
        this.hospotalList = [];
        this.maxHelathClaimLimitExceeded = false;
        //Validation Education variables
        this.studentNameValid = true;
        this.institutionNameValid = true;
        this.registrationNoValid = true;
        this.institutionContactValid = true;
        this.educationYearValid = true;
        this.dateOfAdmissionValid = true;
        this.presentlyReadingValid = true;
        this.disableEdu = false;
        this.maxLimitExceeded = false;
        this.educationCheck = true;
        this.uploadselfattestedValid = true;
        this.uploadNonMarriageValid = true;
        this.uploadCertificatetValid = true;
        this.uplaodmain = true;
        this.reasonForApplyValid = true;
        this.ssinReq = true;
        this.eduCount = 0;
        this.rowIndex = -1;
        this.totalHealthClaimAmount = 0;
        this.typeOfAilmentClaimedAmount = 0;
        this.surgeryClaimedAmount = 0;
        this.lossOfEmploymentAmount = 0;
        this.rowEligibleAmount = 0;
        this.validateDependent = false;
        this.noDependents = false;
        this.benficiaryInactive = false;
        this.disableDischarge = true;
        this.minAppointmentDate = new Date(new Date().getTime() - (60 * 24 * 60 * 60 * 1000));
        this.mode = "";
        this.educertificates = [];
        this.eduNonMarriage = [];
        this.eduSelfAttested = [];
        this.mainUploadList = [];
        this.healthOriginalVoucher = {};
        this.healthSelfAttached = {};
        this.healthDischargeCertificate = {};
        this.healthExpensesSheet = {};
        this.healthAttachmentList = [];
        // health & family 
        this.typeOfClaimValid = false;
        this.hospital = false;
        this.hospitalization = false;
        this.dateofAdmin = false;
        this.dateofDischargeValid = false;
        this.claimForValid = false;
        this.familyMember = false;
        this.hospitalselfAttested = false;
        this.isOtherHospital = false;
        this.otherHospitalValid = false;
        this.hospotalId = 0;
        this.disableCost = true;
        //originalVoucher: boolean = false;
        this.dischargeCertificate = false;
        this.rigisterESI = false;
        this.dateofAppointment = false;
        this.loeFromDate = false;
        this.loeToDate = false;
        this.showDisCertUpload = true;
        this.viewNameOfClinicalTest = false;
        this.healthCondolationCertificate = {};
        this.reasonForHealthDelayValid = false;
        this.enableReasonForDelaySubmissionInHealth = false;
        this.isHealthClaimEdit = false;
        this.healthCondolationCertificateUploaded = false;
        //Button variables
        this.GenaratePdfVisible = true;
        this.SubmitVisible = true;
        this.SaveVisible = true;
        this.restrictSave = false;
        this.ClaimStatusId = 0;
        this.isVisable = true;
        this.isLOEToDate = true;
        this.packages = [];
        this.selectedPackages = [];
        this.healthFamilyPackages = [];
        //expection: ClaimExceptionDetailsModel[] = [] as ClaimExceptionDetailsModel[];
        this.educationClaimExceptionDetails = [];
        this.healthClaimExceptionDetails = [];
        //Disability
        this.disableDisabilityCheckbox = true;
        this.disabilityCertificate = {};
        this.disabilityAttachmentList = [];
        this.condolationCertificate = {};
        this.disabilityCertificateUploaded = false;
        this.condolationCertificateUploaded = false;
        this.dateofrelease1 = false;
        this.natureOfDisability = false;
        this.reasonForDelayValid = false;
        this.checkNatureOfDisability = true;
        this.isDeathorpermanent1 = false;
        this.isDeathorpermanent2 = false;
        this.isDeathorpermanent3 = false;
        this.enableReasonForDelaySubmission = false;
        this.isDisabilityClaimEdit = false;
        //Death
        this.disableDeathCheckbox = true;
        this.deathCertificate = {};
        this.bankPassbook = {};
        this.deathAttachmentList = [];
        this.deathCertificateUploaded = false;
        this.bankPassbookUploaded = false;
        this.dateofDeath = false;
        this.natureOfDeath = false;
        this.isDeath1 = false;
        this.isDeath2 = false;
        this.isDeath3 = false;
        this.placeOfDeathValid = false;
        this.beneficiaryAppliedDisabilities = [];
        this.disabilityClaimExceptionDetails = [];
        this.deathClaimExceptionDetails = [];
        this.pfExsits = false;
        this.disablePFCheckbox = false;
        this.isPrematureClaim = false;
        this.pfTypeOfClaimValid = false;
        this.isPFSubmitted = false;
        this.benNomineeShareAmount = 0;
        this.viewNomineeShare = false;
        this.disablePFTypeOfClaim = false;
        this.reasonForPreclosureValid = false;
        this.benMaturityDate = null;
        this.pfLockingPeriod = null;
        this.isNomineesExist = true;
        this.pfClaimExceptionDetails = [];
        this.nomineeRequired = true;
        this.isBenNomineeSubmittedClaim = false;
        this.isBenNomineeSubmittedPFClaim = false;
        //deathCheckBox: boolean = false;
        //pfCheckBox: boolean = false;
        this.isEduSubmitted = false;
        this.isHFSubmitted = false;
        //healthCheckBox: boolean = false;
        //educationCheckBox: boolean = false;
        this.pfExsitsValue = false;
        this.isClaimEdit = false;
        this.clinicalTestSettings = {};
        this.nameOfClinicalTestIds = [];
        this.clinicalTestDetails = [];
        this.disabilityBenefitConfigDetails = [];
        this.healthFamilyBenefitConfigDetails = [];
        this.educationBenefitConfigDetails = [];
        this.deathBenefitConfigDetails = [];
        this.pfBenefitConfigDetails = {};
        this.isDisabledBaseOnLastExamPassed = false;
        this.marriedValid = true;
        this.isMarried = false;
        this.isDuplicateDependent = false;
        this.isBenDeath = false;
        this.isRegistrationNo = false;
        this.isCAFUpdated = false;
        //Claims Effective Dates
        this.pfClaimEffectiveDate = null;
        this.healthFamilyClaimEffectiveDate = null;
        this.disabilityClaimEffectiveDate = null;
        this.deathClaimEffectiveDate = null;
        this.educationClaimEffectiveDate = null;
        this.claimConfigHdrDetails = [];
        this.isClaimEffectiveDate = false;
        this.claimEffectiveDate = null;
        this.beneficiaryPFAccountDetails = {};
        this.claim.healthFamilyDetails = {};
        this.claim.educationDetails = {};
        this.claim.deathDetails = {};
        this.claim.disabilityDetails = {};
        this.claim.providentFundDetails = {};
        this.maxDate = new Date();
        this.maxAdmitDate = new Date();
        //this.maxDate = new Date(new Date().setMonth(new Date().getMonth() + 3));
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        this.minAppointmentDate = new Date(this.minAppointmentDate);
    }
    AgentClaimEntryComponent.prototype.ngOnDestroy = function () {
        if (this.route$)
            this.route$.unsubscribe();
    };
    AgentClaimEntryComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.pfTypeOfClaimValid = this.otherHospitalValid = true; //this.disablePFCheckbox = true;
        this.typeOfClaimValid = this.dateofAppointment = this.hospital = this.hospitalization = this.dateofAdmin = this.dateofDischargeValid = this.claimForValid = this.familyMember = this.hospitalselfAttested = this.dischargeCertificate = this.rigisterESI = this.loeFromDate = this.loeToDate = this.healthCondolationCertificateUploaded = this.reasonForHealthDelayValid = true; // this.originalVoucher =
        this.dateofrelease1 = this.natureOfDisability = this.disabilityCertificateUploaded = this.isDeathorpermanent1 = this.isDeathorpermanent2 = this.isDeathorpermanent3 = this.checkNatureOfDisability = this.condolationCertificateUploaded = this.reasonForDelayValid = true;
        this.natureOfDeath = this.dateofDeath = this.deathCertificateUploaded = this.isDeath1 = this.isDeath2 = this.isDeath3 = this.placeOfDeathValid = this.bankPassbookUploaded = true;
        this.route$ = this.route.params.subscribe(function (params) {
            _this.claimId = params["claimId"] != null ? Number(params["claimId"]) : 0;
            _this.mode = params["mode"];
            _this.claimTypeString = params["tranctionType"];
            _this.claimStatus = params["claimStatus"] != null ? Number(params["claimStatus"]) : 0;
            //if (this.claimStatus >= ClaimStatus.Submitted) {
            //    this.GenaratePdfVisible = false;
            //    this.disableSubmitbutton = false;
            //    this.SaveVisible = false;
            //}
            //else {
            //    this.claimStatus = ClaimStatus.Submitted;
            //}
        });
        this.clinicalTestSettings = {
            singleSelection: false,
            idField: 'lovDtlId',
            textField: 'optionName',
            selectAllText: 'Select All',
            unSelectAllText: 'UnSelect All',
            itemsShowLimit: 3,
            allowSearchFilter: true
        };
        //this.claim.ssin=""
        //this.claimId = 137;//params["claimId"];
        //this.claimType = ClaimConstants.Education;
        this.getDisabilityBenefitConfigurationDetails();
        this.getHealthFamilyBenefitConfigurationDetails();
        this.getPFBenefitConfigurationDetails();
        this.getEducationBenefitConfigurationDetails();
        this.getDeathBenefitConfigurationDetails();
        this.getClaimsConfiguartionDetails();
        if (this.claimId > 0) {
            this.getAllLoads();
            this.deleteClaimExceptions(this.claimId);
            this.getClaimDetailsByClaimId(this.claimId);
        }
        else {
            this.getAllLoads();
        }
    };
    AgentClaimEntryComponent.prototype.getClaimsConfiguartionDetails = function () {
        var _this = this;
        this.dataService.getClaimConfigurationMaster()
            .subscribe(function (data) {
            _this.claimConfigHdrDetails = data;
            debugger;
            if (_this.claimConfigHdrDetails != null) {
                _this.pfClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 1; }).cliamEffectiveDate;
                _this.healthFamilyClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 2; }).cliamEffectiveDate;
                _this.disabilityClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 3; }).cliamEffectiveDate;
                _this.deathClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 4; }).cliamEffectiveDate;
                _this.educationClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 5; }).cliamEffectiveDate;
            }
        });
    };
    AgentClaimEntryComponent.prototype.getAllLoads = function () {
        this.getDeathConfiguration();
        this.getDisabIlityConfiguration();
        this.getEducationConfiguration();
        this.getHealthandFamilyConfiguration();
        this.getPfConfiguration();
        this.getHospitalization();
        this.getHealthClainFor();
        this.getHospitals();
        this.getDiseases();
        this.getClinicalTests();
        this.getLastExamPassed();
        this.getReasonForApply();
        this.getPackages();
    };
    AgentClaimEntryComponent.prototype.getDiseases = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].Diseases)
            .subscribe(function (data) {
            _this.diseasesLov = data;
        });
    };
    AgentClaimEntryComponent.prototype.getClinicalTests = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].ClinicalTests)
            .subscribe(function (data) {
            _this.clinicalTestLov = data;
        });
    };
    AgentClaimEntryComponent.prototype.openModel = function () {
        this.isDuplicateDependent = false;
        this.studentNameValid = this.institutionNameValid = this.registrationNoValid = this.institutionContactValid = this.educationYearValid = this.dateOfAdmissionValid = this.presentlyReadingValid = this.marriedValid = true;
        this.uploadCertificatetValid = this.uploadselfattestedValid = true;
        this.rowIndex = -1;
        this.rowEligibleAmount = 0;
        this.eduSelfAttested = [];
        this.educertificates = [];
        this.eduNonMarriage = [];
        this.educationDetails = {};
        this.educationDetails.year = new Date().getFullYear();
        this.lgModal.show();
    };
    AgentClaimEntryComponent.prototype.getClaimDetailsByClaimId = function (id) {
        var _this = this;
        this.dataService
            .getClaimDetailsById(id)
            .subscribe(function (data) {
            _this.claim = data;
            _this.isClaimEdit = _this.isDisabilityClaimEdit = _this.isHealthClaimEdit = true;
            if (_this.claim != null) {
                //if (this.claimTypeString == "Education") { this.disableHealthCheckbox = true; }
                //else if (this.claimTypeString == "HealthFamily") { this.disableEducationCheckbox = true; this.disableEdu = true; }
                if (_this.claimTypeString == undefined || _this.claimTypeString == null) {
                    if (_this.claim.educationDetails != null && _this.claim.educationDetails.educationHdrId > 0) {
                        _this.viewEducation = true;
                        if (_this.claim.educationDetails.educationDetailList != null && _this.claim.educationDetails.educationDetailList.length > 0) {
                            _this.educationDetailsArray = _this.claim.educationDetails.educationDetailList;
                            _this.rowIndex = _this.rowIndex + _this.educationDetailsArray.length;
                            if (_this.educationDetailsArray != null && _this.educationDetailsArray.length > 0) {
                                for (var i = 0; i < _this.educationDetailsArray.length; i++) {
                                    if (_this.educationDetailsArray[i].presentlyReadingName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
                                        _this.viewuploadNonMarriage = true;
                                    }
                                    else {
                                        _this.viewuploadNonMarriage = false;
                                    }
                                    if (_this.educationDetailsArray[i].lastExamPassedName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
                                        _this.isDisabledBaseOnLastExamPassed = true;
                                        _this.viewuploadNonMarriage = true;
                                    }
                                    else {
                                        _this.isDisabledBaseOnLastExamPassed = false;
                                        _this.viewuploadNonMarriage = false;
                                    }
                                    //Duplicate Dependent
                                    if (_this.educationDetailsArray[i].isDuplicate) {
                                        //const data1 = this.benficiaryFamily.find(x => x.benFamilyMemSno == this.educationDetailsArray[i].dependentId);
                                        //var stringMsg = "Already this Dependent " + data1.benDependentName + " has submitted for this year please select another dependent";
                                        _this.isDuplicateDependent = true;
                                        //alert("Already claim has submitted for this dependent in this year please select another dependent");
                                        //                    isValid = false;
                                    }
                                }
                            }
                        }
                    }
                    if (_this.claim.healthFamilyDetails != null && _this.claim.healthFamilyDetails.healthFamilyId > 0) {
                        _this.viewHealth = true;
                        if (_this.claim.healthFamilyDetails.hospitalId != null && _this.claim.healthFamilyDetails.hospitalId != undefined && _this.claim.healthFamilyDetails.otherHospital != undefined && _this.claim.healthFamilyDetails.otherHospital != null) {
                            _this.isOtherHospital = true;
                            _this.hospotalId = _this.claim.healthFamilyDetails.hospitalId;
                        }
                        if (_this.claim.healthFamilyDetails.claimFor === 5) {
                            _this.viewSelf = true;
                        }
                        else if (_this.claim.healthFamilyDetails.claimFor === 6) {
                            _this.viewFamily = true;
                        }
                        if (_this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                            _this.viewDateOfAdmit = true;
                            _this.disableCost = false;
                            if (_this.claim.healthFamilyDetails.typeOfClaim == 5) {
                                _this.viewMetWithAnAccident = true;
                            }
                        }
                        else if (_this.claim.healthFamilyDetails.typeOfHospitalization == 2) {
                            _this.viewDateOfFirstAppointment = true;
                            _this.showDisCertUpload = false;
                            if (_this.claim.healthFamilyDetails.nameOfTheDisease != null) {
                                _this.disableCost = false;
                                if (_this.claim.healthFamilyDetails.nameOfTheDisease == 56) {
                                    _this.viewNameOfClinicalTest = true;
                                    if (_this.claim.healthFamilyDetails.clinicalTestDetails != null && _this.claim.healthFamilyDetails.clinicalTestDetails.length > 0) {
                                        if (_this.clinicalTestLov != null && _this.clinicalTestLov.length > 0) {
                                            var selectedClinicalTestDetails = Object.assign([], _this.clinicalTestLov);
                                            var deletedClinicalTestDetails = Object.assign([], _this.clinicalTestLov);
                                            for (var i = 0; i < _this.claim.healthFamilyDetails.clinicalTestDetails.length; i++) {
                                                var t = _this.claim.healthFamilyDetails.clinicalTestDetails[i].clinicalTest;
                                                var s = _this.clinicalTestLov.filter(function (x) { return x.lovDtlId == t; });
                                                if (s != null) {
                                                    for (var j = 0; j < deletedClinicalTestDetails.length; j++) {
                                                        if (s[0].lovDtlId == deletedClinicalTestDetails[j].lovDtlId) {
                                                            deletedClinicalTestDetails.splice(j, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            if (deletedClinicalTestDetails != null && deletedClinicalTestDetails.length > 0) {
                                                for (var i = 0; i < deletedClinicalTestDetails.length; i++) {
                                                    for (var j = 0; j < selectedClinicalTestDetails.length; j++) {
                                                        if (selectedClinicalTestDetails[j].lovDtlId == deletedClinicalTestDetails[i].lovDtlId) {
                                                            selectedClinicalTestDetails.splice(j, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            for (var j = 0; j < selectedClinicalTestDetails.length; j++) { }
                                            _this.nameOfClinicalTestIds = selectedClinicalTestDetails;
                                        }
                                    }
                                }
                            }
                        }
                        if (_this.claim.healthFamilyDetails.admittedDate != null && _this.claim.healthFamilyDetails.admittedDate != undefined)
                            _this.claim.healthFamilyDetails.admittedDate = new Date(_this.claim.healthFamilyDetails.admittedDate);
                        if (_this.claim.healthFamilyDetails.dischargeDate != null && _this.claim.healthFamilyDetails.dischargeDate != undefined)
                            _this.claim.healthFamilyDetails.dischargeDate = new Date(_this.claim.healthFamilyDetails.dischargeDate);
                        if (_this.claim.healthFamilyDetails.firstAppointmentDate != null) {
                            _this.claim.healthFamilyDetails.firstAppointmentDate = new Date(_this.claim.healthFamilyDetails.firstAppointmentDate);
                        }
                        _this.claim.healthFamilyDetails.attachmentDTOList.forEach(function (eachObj) {
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].OriginalVouchers) {
                                _this.healthOriginalVoucher = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DischargeCertificate) {
                                _this.healthDischargeCertificate = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DoctorPrescription) {
                                _this.healthSelfAttached = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].ExpensesSheet) {
                                _this.healthExpensesSheet = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate) {
                                _this.healthCondolationCertificate = eachObj;
                            }
                        });
                        var data_1 = _this.claim.healthFamilyDetails.healthFamilyPackages;
                        for (var i = 0; i < data_1.length; i++) {
                            _this.packages.filter(function (x) { return x.packageID == data_1[i].packageID; })[0].isChecked = true;
                        }
                        _this.selectedPackages = _this.packages.filter(function (x) { return x.isChecked == true; });
                        var groups = new Set(_this.packages.map(function (item) { return item.ailmentName; }));
                        _this.result = [];
                        groups.forEach(function (g) {
                            return _this.result.push({
                                name: g,
                                values: _this.packages.filter(function (i) { return i.ailmentName === g; })
                            });
                        });
                    }
                    if (_this.claim.deathDetails != null && _this.claim.deathDetails.deathId > 0) {
                        _this.viewDeath = true;
                        if (_this.claim.deathDetails.dateofDeath != null) {
                            _this.claim.deathDetails.dateofDeath = new Date(_this.claim.deathDetails.dateofDeath);
                        }
                        if (_this.claim.deathDetails.natureofDeath > 0) {
                            _this.deathEligibility = _this.claim.deathDetails.claimAmount;
                            _this.viewEligibilityAmount = true;
                            if (_this.claim.deathDetails.natureofDeath == 16) {
                                _this.viewAccidental = true;
                            }
                        }
                        _this.claim.deathDetails.attachmentDTOList.forEach(function (eachObj) {
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DeathCertificate) {
                                _this.deathCertificate = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].FirstPageofBankPassbook) {
                                _this.bankPassbook = eachObj;
                            }
                        });
                    }
                    if (_this.claim.disabilityDetails != null && _this.claim.disabilityDetails.disabilityId > 0) {
                        _this.viewDisability = true;
                        if (_this.claim.disabilityDetails.dateofRelease != null) {
                            _this.claim.disabilityDetails.dateofRelease = new Date(_this.claim.disabilityDetails.dateofRelease);
                        }
                        if (_this.claim.disabilityDetails.natureOfDisability != null) {
                            _this.enableDeathEligibility = true;
                            _this.disableEligibility = _this.claim.disabilityDetails.claimAmount;
                        }
                        _this.claim.disabilityDetails.attachmentDTOList.forEach(function (eachObj) {
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DisabilityCertificate) {
                                _this.disabilityCertificate = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate) {
                                _this.condolationCertificate = eachObj;
                            }
                        });
                    }
                    if (_this.claim.providentFundDetails != null && _this.claim.providentFundDetails.pfId > 0) {
                        _this.viewPf = true;
                        if (_this.claim.providentFundDetails.typeOfClaim != null && _this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].Premature) {
                            _this.isPrematureClaim = true;
                        }
                    }
                }
                if (_this.claimTypeString == "Education") {
                    _this.disableHealthCheckbox = true;
                    _this.disableEducationCheckbox = true;
                    if (_this.claim.educationDetails != null && _this.claim.educationDetails.educationHdrId > 0) {
                        _this.viewEducation = true;
                        if (_this.claim.educationDetails.educationDetailList != null && _this.claim.educationDetails.educationDetailList.length > 0) {
                            _this.educationDetailsArray = _this.claim.educationDetails.educationDetailList;
                            _this.rowIndex = _this.rowIndex + _this.educationDetailsArray.length;
                            if (_this.educationDetailsArray != null && _this.educationDetailsArray.length > 0) {
                                for (var i = 0; i < _this.educationDetailsArray.length; i++) {
                                    if (_this.educationDetailsArray[i].presentlyReadingName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
                                        _this.viewuploadNonMarriage = true;
                                    }
                                    else {
                                        _this.viewuploadNonMarriage = false;
                                    }
                                    debugger;
                                    if (_this.educationDetailsArray[i].lastExamPassedName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
                                        _this.isDisabledBaseOnLastExamPassed = true;
                                        _this.viewuploadNonMarriage = true;
                                    }
                                    else {
                                        _this.isDisabledBaseOnLastExamPassed = false;
                                        _this.viewuploadNonMarriage = false;
                                    }
                                }
                            }
                        }
                    }
                }
                if (_this.claimTypeString == "HealthFamily") {
                    _this.disableHealthCheckbox = true;
                    _this.disableEducationCheckbox = true;
                    if (_this.claim.healthFamilyDetails != null && _this.claim.healthFamilyDetails.healthFamilyId > 0) {
                        _this.viewHealth = true;
                        if (_this.claim.healthFamilyDetails.claimFor === 5) {
                            _this.viewSelf = true;
                        }
                        else if (_this.claim.healthFamilyDetails.claimFor === 6) {
                            _this.viewFamily = true;
                        }
                        if (_this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                            _this.viewDateOfAdmit = true;
                            _this.disableCost = false;
                            if (_this.claim.healthFamilyDetails.typeOfClaim == 5) {
                                _this.viewMetWithAnAccident = true;
                            }
                        }
                        else if (_this.claim.healthFamilyDetails.typeOfHospitalization == 2) {
                            _this.viewDateOfFirstAppointment = true;
                            _this.showDisCertUpload = false;
                            if (_this.claim.healthFamilyDetails.nameOfTheDisease != null) {
                                _this.disableCost = false;
                                if (_this.claim.healthFamilyDetails.nameOfTheDisease == 56) {
                                    _this.viewNameOfClinicalTest = true;
                                    if (_this.claim.healthFamilyDetails.clinicalTestDetails != null && _this.claim.healthFamilyDetails.clinicalTestDetails.length > 0) {
                                        if (_this.clinicalTestLov != null && _this.clinicalTestLov.length > 0) {
                                            var selectedClinicalTestDetails = Object.assign([], _this.clinicalTestLov);
                                            var deletedClinicalTestDetails = Object.assign([], _this.clinicalTestLov);
                                            for (var i = 0; i < _this.claim.healthFamilyDetails.clinicalTestDetails.length; i++) {
                                                var t = _this.claim.healthFamilyDetails.clinicalTestDetails[i].clinicalTest;
                                                var s = _this.clinicalTestLov.filter(function (x) { return x.lovDtlId == t; });
                                                if (s != null) {
                                                    for (var j = 0; j < deletedClinicalTestDetails.length; j++) {
                                                        if (s[0].lovDtlId == deletedClinicalTestDetails[j].lovDtlId) {
                                                            deletedClinicalTestDetails.splice(j, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            if (deletedClinicalTestDetails != null && deletedClinicalTestDetails.length > 0) {
                                                for (var i = 0; i < deletedClinicalTestDetails.length; i++) {
                                                    for (var j = 0; j < selectedClinicalTestDetails.length; j++) {
                                                        if (selectedClinicalTestDetails[j].lovDtlId == deletedClinicalTestDetails[i].lovDtlId) {
                                                            selectedClinicalTestDetails.splice(j, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            for (var j = 0; j < selectedClinicalTestDetails.length; j++) { }
                                            _this.nameOfClinicalTestIds = selectedClinicalTestDetails;
                                        }
                                    }
                                }
                            }
                        }
                        if (_this.claim.healthFamilyDetails.admittedDate != null && _this.claim.healthFamilyDetails.admittedDate != undefined)
                            _this.claim.healthFamilyDetails.admittedDate = new Date(_this.claim.healthFamilyDetails.admittedDate);
                        if (_this.claim.healthFamilyDetails.dischargeDate != null && _this.claim.healthFamilyDetails.dischargeDate != undefined)
                            _this.claim.healthFamilyDetails.dischargeDate = new Date(_this.claim.healthFamilyDetails.dischargeDate);
                        if (_this.claim.healthFamilyDetails.firstAppointmentDate != null) {
                            _this.claim.healthFamilyDetails.firstAppointmentDate = new Date(_this.claim.healthFamilyDetails.firstAppointmentDate);
                        }
                        _this.claim.healthFamilyDetails.attachmentDTOList.forEach(function (eachObj) {
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].OriginalVouchers) {
                                _this.healthOriginalVoucher = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DischargeCertificate) {
                                _this.healthDischargeCertificate = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DoctorPrescription) {
                                _this.healthSelfAttached = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].ExpensesSheet) {
                                _this.healthExpensesSheet = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate) {
                                _this.healthCondolationCertificate = eachObj;
                            }
                        });
                        var data_2 = _this.claim.healthFamilyDetails.healthFamilyPackages;
                        for (var i = 0; i < data_2.length; i++) {
                            _this.packages.filter(function (x) { return x.packageID == data_2[i].packageID; })[0].isChecked = true;
                        }
                        _this.selectedPackages = _this.packages.filter(function (x) { return x.isChecked == true; });
                        var groups = new Set(_this.packages.map(function (item) { return item.ailmentName; }));
                        _this.result = [];
                        groups.forEach(function (g) {
                            return _this.result.push({
                                name: g,
                                values: _this.packages.filter(function (i) { return i.ailmentName === g; })
                            });
                        });
                    }
                }
                if (_this.claimTypeString == "Death") {
                    _this.disableDeathCheckbox = true;
                    _this.disableHealthCheckbox = true;
                    _this.disableEducationCheckbox = true;
                    if (_this.claim.deathDetails != null && _this.claim.deathDetails.deathId > 0) {
                        _this.viewDeath = true;
                        if (_this.claim.deathDetails.dateofDeath != null) {
                            _this.claim.deathDetails.dateofDeath = new Date(_this.claim.deathDetails.dateofDeath);
                        }
                        //if (this.claim.deathDetails.natureofDeath == 16) {
                        //    this.viewAccidental = true;
                        //}
                        if (_this.claim.deathDetails.natureofDeath > 0) {
                            _this.deathEligibility = _this.claim.deathDetails.claimAmount;
                            _this.viewEligibilityAmount = true;
                            if (_this.claim.deathDetails.natureofDeath == 16) {
                                _this.viewAccidental = true;
                            }
                        }
                        _this.claim.deathDetails.attachmentDTOList.forEach(function (eachObj) {
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DeathCertificate) {
                                _this.deathCertificate = eachObj;
                            }
                            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].FirstPageofBankPassbook) {
                                _this.bankPassbook = eachObj;
                            }
                        });
                    }
                }
                if (_this.claimTypeString == "Disability") {
                    _this.disableDisabilityCheckbox = true;
                    //this.disableDeathCheckbox = true;
                    _this.disableHealthCheckbox = true;
                    _this.disableEducationCheckbox = true;
                    if (_this.claim.disabilityDetails != null && _this.claim.disabilityDetails.disabilityId > 0) {
                        _this.viewDisability = true;
                        if (_this.claim.disabilityDetails.dateofRelease != null) {
                            _this.claim.disabilityDetails.dateofRelease = new Date(_this.claim.disabilityDetails.dateofRelease);
                        }
                        if (_this.claim.disabilityDetails.natureOfDisability != null) {
                            _this.enableDeathEligibility = true;
                            _this.disableEligibility = _this.claim.disabilityDetails.claimAmount;
                        }
                    }
                    _this.claim.disabilityDetails.attachmentDTOList.forEach(function (eachObj) {
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DisabilityCertificate) {
                            _this.disabilityCertificate = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate) {
                            _this.condolationCertificate = eachObj;
                        }
                    });
                }
                if (_this.claimTypeString == "PF") {
                    if (_this.claim.providentFundDetails != null && _this.claim.providentFundDetails.pfId > 0) {
                        _this.viewPf = true;
                        if (_this.claim.providentFundDetails.typeOfClaim != null && _this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].Premature) {
                            _this.isPrematureClaim = true;
                        }
                    }
                }
                if (_this.claim.attachment != null && _this.claim.attachment.length > 0) {
                    _this.mainUpload = _this.claim.attachment[0];
                }
                //  this.mainUpload = this.claim.attachment[0];
                //console.log(this.claim);
                //this.getBenficiaryFamilyDetails(this.claim.benSno);
                //this.getBenficiaryEduCount(this.claim.benSno);
                _this.ssin = _this.claim.ssin;
                _this.searchSSINNo(_this.claim.ssin);
            }
        });
    };
    AgentClaimEntryComponent.prototype.getBeneficiaryAppliedDisabilities = function (id, claimId) {
        var _this = this;
        this.dataService
            .getBeneficiaryAppliedDisabilities(id, claimId)
            .subscribe(function (data) {
            _this.beneficiaryAppliedDisabilities = data;
        });
    };
    AgentClaimEntryComponent.prototype.changeCertificate = function (inputValue, type) {
        var _this = this;
        var file = inputValue.target.files[0];
        if (type == "main") {
            if (file.type != "application/pdf") {
                alert("Only accept pdf file");
                return;
            }
        }
        if (file.type === "application/pdf" || file.type.includes("image/")) {
            if (file.size > 2000000) {
                alert("File is too big!");
                return;
            }
            ;
            var myReader = new FileReader();
            myReader.onloadend = function (e) {
                var model = {};
                model.fileName = file.name;
                model.filePath = "test";
                model.fileContent = myReader.result.toString().split(',')[1];
                model.statusId = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimStatus"].Submitted;
                switch (type) {
                    case "certificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Scholarship;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education;
                        _this.educertificates.push(model);
                        break;
                    case "nonMarriage":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].NonMarriage;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education;
                        _this.eduNonMarriage.push(model);
                        break;
                    case "selfAttest":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].PassingExamCertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education;
                        _this.eduSelfAttested.push(model);
                        break;
                    case "dischargeCertificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DischargeCertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthDischargeCertificate = model;
                        break;
                    case "originalVoucher":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].OriginalVouchers;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthOriginalVoucher = model;
                        break;
                    case "healthselfAttest":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DoctorPrescription;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthSelfAttached = model;
                        break;
                    case "main":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].FormV;
                        model.claimType = null;
                        _this.mainUpload = model;
                        break;
                    case "disablityCertificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DisabilityCertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability;
                        _this.disabilityCertificate = model;
                        break;
                    case "deathCertificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DeathCertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Death;
                        _this.deathCertificate = model;
                        break;
                    case "healthExpensesSheet":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].ExpensesSheet;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthExpensesSheet = model;
                        break;
                    case "bankPassbook":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].FirstPageofBankPassbook;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Death;
                        _this.bankPassbook = model;
                        break;
                    case "condolationCertificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability;
                        _this.condolationCertificate = model;
                        break;
                    case "healthCondolationCertificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthCondolationCertificate = model;
                        break;
                }
            };
            myReader.readAsDataURL(file);
        }
        else {
            alert("Only accept pdf and images");
        }
    };
    AgentClaimEntryComponent.prototype.removeUploadCertificates = function (edu, type) {
        if (type == "certificate") {
            var index = this.educertificates.indexOf(edu);
            if (index !== -1) {
                this.educertificates.splice(index, 1);
            }
        }
        if (type == "nonMarriage") {
            var index = this.eduNonMarriage.indexOf(edu);
            if (index !== -1) {
                this.eduNonMarriage.splice(index, 1);
            }
        }
        if (type == "selfAttest") {
            var index = this.eduSelfAttested.indexOf(edu);
            if (index !== -1) {
                this.eduSelfAttested.splice(index, 1);
            }
        }
    };
    AgentClaimEntryComponent.prototype.showChildModal = function () {
        this.lgModal.show();
    };
    AgentClaimEntryComponent.prototype.hideChildModal = function () {
        this.lgModal.hide();
    };
    AgentClaimEntryComponent.prototype.pfChange = function (eve) {
        this.isBenNomineeSubmittedClaim = this.isBenNomineeSubmittedPFClaim = this.isHFSubmitted = this.isEduSubmitted = this.isPFSubmitted = this.maxLimitExceeded = this.maxHelathClaimLimitExceeded = this.pfExsits = false;
        if (this.beneficiary.benPFStatus != null && this.beneficiary.benPFStatus == 1) {
            if (this.pfExsitsValue == false) {
                if (this.claim.reasonForApply != 16) {
                    this.validatePfSubmit(this.ssin.trim(), 0, eve);
                }
                else
                    this.validatePfSubmit(this.ssin.trim(), this.claim.nomineeId, eve);
            }
            else {
                this.viewPf = false;
                eve.target.checked = false;
                this.disablePFCheckbox = true;
                this.pfExsits = true;
            }
            //if (this.claim.reasonForApply == 16) {
            //    this.validatePfSubmit(this.ssin.trim(), this.claim.nomineeId, eve);
            //    //this.isSameBenNomineeClaimSubmitted(this.beneficiary.benSno, this.claim.nomineeId, ClaimConstants.PF, eve);
            //}
            //else {
            //    this.pfCode();
            //}
        }
        else {
            this.viewPf = false;
            eve.target.checked = false;
            this.disablePFCheckbox = true;
            this.pfExsits = true;
        }
    };
    AgentClaimEntryComponent.prototype.pfCode = function () {
        var _this = this;
        var share = 0;
        //this.pfCheckBox = !this.viewPf;
        this.viewPf = !this.viewPf;
        if (this.viewPf) { //this.viewDeathFieldsAndNominee = true && 
            //16-On Death of Beneficiary
            if (this.claim.reasonForApply == 16) {
                this.viewNomineeShare = true;
                if (this.benficiaryNominee != null && this.benficiaryNominee != undefined) {
                    share = this.benficiaryNominee.find(function (n) { return n.benNomineeSno == _this.claim.nomineeId; }).benNomineeSharePercentage;
                    if (this.benficiaryNominee.length == 1) {
                        if (share == 0) {
                            share = 100;
                        }
                    }
                    if (this.pfClaimAmount != undefined && this.pfClaimAmount != null && this.pfClaimAmount > 0)
                        this.benNomineeShareAmount = Math.round(this.pfClaimAmount * (share / 100));
                }
                this.claim.providentFundDetails.typeOfClaim = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].FinalPayment;
                this.disablePFTypeOfClaim = true;
            }
        }
    };
    AgentClaimEntryComponent.prototype.healthChange = function (eve) {
        this.isBenNomineeSubmittedClaim = this.isBenNomineeSubmittedPFClaim = this.isHFSubmitted = this.isEduSubmitted = this.isPFSubmitted = this.maxLimitExceeded = this.maxHelathClaimLimitExceeded = this.pfExsits = false;
        if (this.claim.reasonForApply == 16) {
            this.getNomineeClaimEntryValidation(this.beneficiary.benSno, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily, eve);
        }
        else {
            this.healthCode();
        }
    };
    AgentClaimEntryComponent.prototype.healthCode = function () {
        this.benficiaryInactive = this.validateDependent = this.noDependents = this.maxLimitExceeded = false;
        this.restrictSave = false;
        this.viewEducation = false;
        this.disableEdu = false;
        this.noDependents = false;
        this.viewHealth = !this.viewHealth;
        this.getBeneficiaryHealthClaimAmount(this.beneficiary.benSno);
    };
    AgentClaimEntryComponent.prototype.deathChange = function (eve) {
        this.isBenNomineeSubmittedClaim = this.isBenNomineeSubmittedPFClaim = this.isHFSubmitted = this.isEduSubmitted = this.isPFSubmitted = this.maxLimitExceeded = this.maxHelathClaimLimitExceeded = this.pfExsits = false;
        this.isSameBenNomineeClaimSubmitted(this.beneficiary.benSno, this.claim.nomineeId, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Death, eve);
    };
    AgentClaimEntryComponent.prototype.disabilityChangeEvent = function (eve) {
        this.isBenNomineeSubmittedClaim = this.isBenNomineeSubmittedPFClaim = this.isHFSubmitted = this.isEduSubmitted = this.isPFSubmitted = this.maxLimitExceeded = this.maxHelathClaimLimitExceeded = this.pfExsits = false;
        this.viewDisability = !this.viewDisability;
    };
    AgentClaimEntryComponent.prototype.educationChange = function (eve) {
        this.isBenNomineeSubmittedClaim = this.isBenNomineeSubmittedPFClaim = this.isHFSubmitted = this.isEduSubmitted = this.isPFSubmitted = this.maxLimitExceeded = this.maxHelathClaimLimitExceeded = this.pfExsits = false;
        if (this.claim.reasonForApply == 16) {
            this.getNomineeClaimEntryValidation(this.beneficiary.benSno, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education, eve);
        }
        else {
            this.educationCode(eve);
        }
    };
    AgentClaimEntryComponent.prototype.educationCode = function (eve) {
        if (this.eduCount >= 2 && this.claimId == 0) {
            this.disableEdu = true;
            this.maxLimitExceeded = true;
            this.restrictSave = true;
            this.viewEducation = false;
            //this.viewHealth = false;
            eve.target.checked = false;
            return;
        }
        if (this.benficiaryFamily == null || this.benficiaryFamily.length == 0) {
            this.restrictSave = true;
            this.viewEducation = false;
            this.disableEdu = true;
            this.noDependents = true;
            this.viewEducation = false;
            eve.target.checked = false;
            //this.viewHealth = false;
            return;
        }
        this.viewEducation = eve.target.checked;
        this.validateDependent = false;
    };
    AgentClaimEntryComponent.prototype.disabilityChange = function (id) {
        var _this = this;
        if (id != 0) {
            this.enableDeathEligibility = true;
            var data = this.disabilityConfig.find(function (x) { return x.claimConfigId == id; });
            this.disableEligibility = data.annualLimit;
            this.natureOfDisabilityName = data.claimConfigOptionName;
            var data1 = this.beneficiaryAppliedDisabilities.find(function (x) { return x == _this.claim.disabilityDetails.natureOfDisability; });
            if (data1) {
                this.checkNatureOfDisability = false;
                //alert("Claim has been already submitted with this nature of disability");
                //return;
            }
            else {
                this.checkNatureOfDisability = true;
            }
        }
        else {
            this.enableDeathEligibility = false;
            this.disableEligibility = 0;
        }
    };
    AgentClaimEntryComponent.prototype.getPfBalance = function (benSno) {
        var _this = this;
        this.pfExsitsValue = false;
        this.dataService
            .getPfBalance(benSno)
            .subscribe(function (data) {
            _this.pfBalanceDetails = data;
            if (_this.pfBalanceDetails != null && _this.pfBalanceDetails != undefined) {
                if (_this.pfBalanceDetails.code == "000") {
                    //this.viewPf = !this.viewPf;
                    //claim amount=   balance + cantribution +( (Contribution/25 ) * 30)
                    _this.pfClaimAmount = _this.pfBalanceDetails.balance + _this.pfBalanceDetails.contribution + ((_this.pfBalanceDetails.contribution / 25) * 30);
                    //this.pfLockingPeriodDate = this.pfBalanceDetails.lockingPeriodDate;
                    _this.pfAccountStatus = _this.pfBalanceDetails.accountStatus;
                    if (_this.pfBenefitConfigDetails != null) {
                        var date = new Date(_this.beneficiary.benDob);
                        //this.benMaturityDate = new Date(date.getFullYear() + 60, date.getMonth(), date.getDate());
                        _this.benMaturityDate = new Date(date.getFullYear() + _this.pfBenefitConfigDetails.maturityAge, date.getMonth(), date.getDate());
                        //pf Locking Period 3 year
                        if (_this.beneficiary.benRegDate != null) {
                            var lockingDate = new Date(_this.beneficiary.benRegDate);
                            //this.pfLockingPeriod = new Date(lockingDate.getFullYear() + 3, lockingDate.getMonth(), lockingDate.getDate());
                            _this.pfLockingPeriod = new Date(lockingDate.getFullYear(), lockingDate.getMonth() + _this.pfBenefitConfigDetails.pfLockingPeriodMonths, lockingDate.getDate());
                        }
                    }
                    //this.pfExsits = false;
                    _this.pfExsitsValue = false;
                }
                else {
                    //
                    //this.disablePFCheckbox = false;
                    _this.pfExsitsValue = true;
                    //this.pfExsits = true;
                    //this.viewPf = false;
                }
            }
            //if (this.pfExsits == false) {
            //    this.validatePfSubmit(this.ssin.trim(), 0);
            //}
            //else {
            //    this.disablePFCheckbox = true;
            //}
        });
    };
    AgentClaimEntryComponent.prototype.pfTypeOfClaimChange = function (eve) {
        if (this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].Premature) {
            this.isPrematureClaim = true;
            this.reasonForPreclosureValid = true;
        }
        else {
            this.isPrematureClaim = false;
        }
    };
    AgentClaimEntryComponent.prototype.typeOfClaimChange = function (eve) {
        if (this.claim.healthFamilyDetails.typeOfClaim == 5) {
            this.claim.healthFamilyDetails.typeOfHospitalization = 1;
        }
        else if (this.claim.healthFamilyDetails.typeOfClaim == 0) {
            this.claim.healthFamilyDetails.typeOfHospitalization = 0;
        }
        this.getBeneficiaryHealthClaimAmount(this.beneficiary.benSno, this.claim.healthFamilyDetails.typeOfClaim);
        this.hospitalizationChange(eve);
    };
    AgentClaimEntryComponent.prototype.getBeneficiaryHealthClaimAmount = function (benSno, typeOfClaim) {
        var _this = this;
        this.maxHelathClaimLimitExceeded = false;
        this.dataService
            .getBeneficiaryHealthClaimAmount(benSno, typeOfClaim)
            .subscribe(function (data) {
            var maxEligibleAmount = 0;
            if (typeOfClaim != 0) {
                if (typeOfClaim == 4) {
                    maxEligibleAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].TreatmentOfAilment;
                    _this.typeOfAilmentClaimedAmount = data;
                }
                else {
                    maxEligibleAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].Surgery;
                    _this.surgeryClaimedAmount = data;
                }
                if (data >= maxEligibleAmount) {
                    alert("Maximum claim limit has been reached for the selected claim type.");
                    _this.claim.healthFamilyDetails.typeOfClaim = 0;
                    return;
                }
            }
            else {
                _this.totalHealthClaimAmount = data;
                maxEligibleAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].TreatmentOfAilment + _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].Surgery;
                if (_this.totalHealthClaimAmount >= maxEligibleAmount) {
                    _this.viewHealth = false;
                    _this.maxHelathClaimLimitExceeded = true;
                }
            }
        });
    };
    AgentClaimEntryComponent.prototype.hospitalChange = function (eve) {
        if (this.hospotalList.length > 0) {
            var hos = this.hospotalList.find(function (x) { return x.hospitalId == eve; });
            this.hospotalId = 0;
            if (hos != null) {
                if (hos.hospitalName.toLowerCase() == "not in the list") {
                    this.hospotalId = hos.hospitalId;
                }
            }
            if (this.hospotalId > 0) {
                this.isOtherHospital = true;
                this.otherHospitalValid = true;
            }
            else {
                this.isOtherHospital = false;
                this.claim.healthFamilyDetails.otherHospital = undefined;
            }
        }
    };
    AgentClaimEntryComponent.prototype.hospitalizationChange = function (eve) {
        this.viewDateOfFirstAppointment = this.viewDateOfAdmit = this.viewMetWithAnAccident = this.viewNameOfClinicalTest = false;
        this.showDisCertUpload = this.disableCost = true;
        if (this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
            this.viewDateOfAdmit = true;
            this.disableCost = false;
            if (this.claim.healthFamilyDetails.typeOfClaim == 5) {
                this.viewMetWithAnAccident = true;
            }
            this.claim.healthFamilyDetails.nameOfTheDisease = undefined;
            this.claim.healthFamilyDetails.nameOfClinicalTest = undefined;
        }
        else if (this.claim.healthFamilyDetails.typeOfHospitalization == 2) {
            this.viewDateOfFirstAppointment = true;
            this.showDisCertUpload = false;
            this.claim.healthFamilyDetails.costOfClinicalTest = undefined;
            this.claim.healthFamilyDetails.costOfMedicine = undefined;
            if (this.claim.healthFamilyDetails.nameOfTheDisease != null) {
                this.disableCost = false;
                if (this.claim.healthFamilyDetails.nameOfTheDisease == 56) {
                    this.viewNameOfClinicalTest = true;
                }
            }
        }
        this.claimForChange(eve);
    };
    AgentClaimEntryComponent.prototype.nameOfDiseaseChange = function (eve) {
        this.viewNameOfClinicalTest = this.disableCost = false;
        if (this.claim.healthFamilyDetails.nameOfTheDisease == 56) {
            this.viewNameOfClinicalTest = true;
        }
        else {
            this.viewNameOfClinicalTest = false;
            this.claim.healthFamilyDetails.nameOfClinicalTest = undefined;
        }
    };
    AgentClaimEntryComponent.prototype.claimForChange = function (eve) {
        this.viewSelf = this.viewFamily = false;
        if (this.claim.healthFamilyDetails.claimFor == 5) {
            if (this.claim.healthFamilyDetails.typeOfHospitalization != 2) {
                this.lossOfEmploymentAmount = this.calculateLossOfEmploymentAmount();
                this.viewSelf = true;
            }
        }
        else if (this.claim.healthFamilyDetails.claimFor == 6) {
            this.viewFamily = true;
        }
    };
    AgentClaimEntryComponent.prototype.natureOfDeathChange = function (natureOfDeathData) {
        this.viewAccidental = this.viewEligibilityAmount = false;
        if (this.claim.deathDetails.natureofDeath > 0) {
            var data = this.deathConfig.find(function (x) { return x.claimConfigId == natureOfDeathData; });
            this.viewEligibilityAmount = true;
            this.deathEligibility = data.annualLimit;
            this.natureofDeathName = data.claimConfigOptionName;
        }
        if (this.claim.deathDetails.natureofDeath == 16) {
            this.viewAccidental = true;
        }
    };
    AgentClaimEntryComponent.prototype.selectDependent = function (args) {
        var _this = this;
        var data = this.benficiaryFamily.find(function (x) { return x.benFamilyMemSno == args.target.value; });
        this.dataService
            .isDuplicateDependentSubmitted(data.benSno, data.benFamilyMemSno, this.claimId, this.claim.reasonForApply == 16 ? false : true)
            .subscribe(function (data1) {
            debugger;
            if (!data1) {
                //--------------
                if (_this.educationDetailsArray.findIndex(function (x) { return x.dependentId == args.target.value; }) != -1 && _this.rowIndex == -1) {
                    alert("already added please select another dependent");
                    _this.educationDetails.dependentId = 0;
                    return;
                }
                if (data.benDependentRelation.toLowerCase() == "daughter") {
                    _this.isMarried = _this.marriedValid = true;
                    _this.getEducationConfiguration();
                    _this.getLastExamPassed();
                }
                else if (data.benDependentRelation.toLowerCase() == "son") {
                    _this.educationConfig = _this.dataService.eduConfig;
                    var index = _this.educationConfig.findIndex(function (x) { return x.claimConfigOptionName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development"; });
                    _this.educationConfig.splice(index, 1);
                    // remove item from last Exam passed option
                    var indexLastExamPassed = _this.lastExampassed.findIndex(function (l) { return l.optionName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development"; });
                    _this.lastExampassed.splice(indexLastExamPassed, 1);
                    //var timeDiff = Math.abs(Date.now() - Date.parse(data.dob));
                    //const age = Math.floor((timeDiff / (1000 * 3600 * 24)) / 365);
                    //if (age >= 21) {
                    //    alert("your dependent not suitable for this claim beacause your son age 21");
                    //    return;
                    //}
                    _this.isMarried = false;
                }
                else {
                    _this.getEducationConfiguration();
                    _this.getLastExamPassed();
                }
                _this.isDuplicateDependent = false;
            }
            else {
                _this.isDuplicateDependent = true;
            }
            //-------------------
        });
        this.educationDetails.dependentName = args.target.options[args.target.selectedIndex].text;
        this.educationDetails.dependentRelation = args.target.options[args.target.selectedIndex].text.split('-')[1];
    };
    AgentClaimEntryComponent.prototype.selectLastExamPassed = function (args, education) {
        this.educationDetails.lastExamPassedName = args.target.options[args.target.selectedIndex].text;
        if (args.target.options[args.target.selectedIndex].text == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
            this.isDisabledBaseOnLastExamPassed = true;
            this.educationDetails.eligibleAmount = 25000;
            this.viewuploadNonMarriage = true;
            this.educationDetails.presentlyReading = undefined;
            this.educationDetails.dateofAdmission = undefined;
        }
        else {
            this.isDisabledBaseOnLastExamPassed = false;
            this.educationDetails.eligibleAmount = 0;
            this.viewuploadNonMarriage = false;
            this.educationDetails.presentlyReading = undefined;
            this.educationDetails.dateofAdmission = undefined;
        }
    };
    AgentClaimEntryComponent.prototype.selectPresentlyReading = function (args, education) {
        var _this = this;
        var data = this.benficiaryFamily.find(function (x) { return x.benFamilyMemSno == education.dependentId; });
        this.educationDetails.presentlyReadingName = args.target.options[args.target.selectedIndex].text;
        if (this.educationDetails.presentlyReading > 0) {
            var data_3 = this.educationConfig.find(function (x) { return x.claimConfigId == _this.educationDetails.presentlyReading; });
            this.educationDetails.eligibleAmount = data_3.annualLimit;
        }
        else {
            this.educationDetails.eligibleAmount = 0;
        }
        if (data.benDependentRelation.toLowerCase() == "daughter" && this.educationDetails.presentlyReadingName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
            this.viewuploadNonMarriage = true;
        }
        else {
            this.viewuploadNonMarriage = false;
        }
    };
    AgentClaimEntryComponent.prototype.reasonForApplyChange = function (mode) {
        this.isRegistrationNo = false;
        this.isBenNomineeSubmittedClaim = this.isBenNomineeSubmittedPFClaim = this.isBenDeath = false;
        this.disablePFCheckbox = this.disableHealthCheckbox = this.disableEducationCheckbox = false;
        //this.disablePFCheckbox = this.disableHealthCheckbox = this.disableDisabilityCheckbox = this.disableDeathCheckbox = this.disableEducationCheckbox = true;
        this.viewDisability = false;
        this.viewDeath = false;
        this.viewPf = false;
        this.viewHealth = false;
        this.viewEducation = false;
        this.viewDeathFieldsAndNominee = false;
        this.claim.healthFamilyDetails.claimFor = 0;
        this.isNomineesExist = true;
        //16-On Death of Beneficiary / On Request of Nominee
        //17-On Disability of Beneficiary
        //18-On Request of Beneficiary
        if (mode == 16) {
            this.isBenDeath = false;
            this.disableDisabilityCheckbox = true;
            this.disableDeathCheckbox = false;
            this.viewDeathFieldsAndNominee = true;
            if (this.ssin != undefined && this.ssin.trim() != "" && this.beneficiary != null) {
                this.getBeneficiaryNomineeDetails(this.beneficiary.benSno);
                if (this.benficiaryNominee.length == 0)
                    this.isNomineesExist = false;
                else
                    this.isNomineesExist = true;
            }
            //this.getNomineeClaimEntryValidation(this.beneficiary.benSno);
        }
        else {
            if (this.beneficiary != null && this.beneficiary.benDeathStatus == 1) {
                this.isBenDeath = true;
                this.disableDeathCheckbox = true;
                this.disableEducationCheckbox = true;
                this.disableDisabilityCheckbox = true;
                this.disableHealthCheckbox = true;
                this.disablePFCheckbox = true;
            }
            else {
                if (this.claim.reasonForApply == 17) {
                    this.disableEducationCheckbox = true;
                    this.disableHealthCheckbox = true;
                    this.disablePFCheckbox = true;
                }
                this.disableDeathCheckbox = true;
                this.disableDisabilityCheckbox = false;
                this.isBenNomineeClaimSubmitted(this.beneficiary.benSno);
            }
        }
        if (mode == 16 || mode == 17) {
            this.claim.healthFamilyDetails.claimFor = 5;
        }
        this.claimForChange(null);
    };
    AgentClaimEntryComponent.prototype.nomineeChange = function (nomineeSno) {
        //this.validatePfSubmit(this.ssin.trim(), nomineeSno);
        this.claim.nomineeId = nomineeSno;
        if (this.benficiaryNominee.length > 0) {
            var nominee = this.benficiaryNominee.find(function (x) { return x.benNomineeSno == nomineeSno; });
            if (nominee != null) {
                this.claim.nomineeName = nominee.benNomineeName;
                this.claim.nomineeBankAccount = nominee.benNomineeBankAccNo;
                this.claim.nomineeIFSCCode = nominee.benNomineeBankIfscCode;
            }
        }
    };
    AgentClaimEntryComponent.prototype.chkAccidentChange = function (args, value) {
        if (value == true) {
            this.claim.healthFamilyDetails.claimFor = 5;
        }
        else {
            this.claim.healthFamilyDetails.claimFor = 0;
        }
        this.claimForChange(args);
    };
    AgentClaimEntryComponent.prototype.validateEducationDetails = function (details) {
        var isValid = true;
        this.studentNameValid = this.institutionNameValid = this.registrationNoValid = this.institutionContactValid = this.educationYearValid = this.dateOfAdmissionValid = this.presentlyReadingValid = true;
        if (details.dependentId == undefined || details.dependentId <= 0) {
            this.studentNameValid = isValid = false;
        }
        if (details.institutionName == undefined || details.institutionName == "") {
            this.institutionNameValid = isValid = false;
        }
        if (details.registrationRollNo == undefined || details.registrationRollNo == "") {
            this.registrationNoValid = isValid = false;
        }
        if (details.institutionContact != undefined && details.institutionContact.toString().length > 0 && details.institutionContact.toString().length < 10) {
            this.institutionContactValid = isValid = false;
        }
        if (details.year == undefined) {
            this.educationYearValid = isValid = false;
        }
        if (this.viewuploadNonMarriage) {
            if (this.eduNonMarriage.length == 0) {
                this.uploadNonMarriageValid = isValid = false;
            }
        }
        if (this.educertificates.length == 0 && !this.isDisabledBaseOnLastExamPassed) {
            this.uploadCertificatetValid = isValid = false;
        }
        if (this.eduSelfAttested.length == 0) {
            this.uploadselfattestedValid = isValid = false;
        }
        if (details.dateofAdmission == undefined && !this.isDisabledBaseOnLastExamPassed) {
            this.dateOfAdmissionValid = isValid = false;
        }
        if ((details.presentlyReading == undefined || details.presentlyReading <= 0) && !this.isDisabledBaseOnLastExamPassed) {
            this.presentlyReadingValid = isValid = false;
        }
        debugger;
        if (this.isMarried && (details.isMarried == undefined || details.isMarried == null)) {
            this.marriedValid = isValid = false;
        }
        else if (this.isMarried && details.isMarried == "1") {
            isValid = false;
            alert("This benefit not applicable for married student");
            return;
        }
        if (this.isDuplicateDependent) {
            isValid = false;
        }
        return isValid;
    };
    AgentClaimEntryComponent.prototype.addEducationDetails = function (details) {
        if (this.claim.educationDetails.claimAmount == undefined) {
            this.claim.educationDetails.claimAmount = 0;
        }
        if (this.validateEducationDetails(details)) {
            details.statusId = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimStatus"].Submitted;
            if (this.educationDetailsArray.findIndex(function (x) { return x.dependentId == details.dependentId; }) == -1 && this.rowIndex == -1) {
                var attachedList_1 = [];
                if (this.educertificates.length > 0) {
                    this.educertificates.forEach(function (contact) {
                        attachedList_1.push(contact);
                    });
                }
                if (this.eduNonMarriage.length > 0) {
                    this.eduNonMarriage.forEach(function (contact) {
                        attachedList_1.push(contact);
                    });
                }
                if (this.eduSelfAttested.length > 0) {
                    this.eduSelfAttested.forEach(function (contact) {
                        attachedList_1.push(contact);
                    });
                }
                details.attachmentDetailsList = attachedList_1;
                details.isDuplicate = false;
                this.educationDetailsArray.push(details);
                this.claim.educationDetails.claimAmount -= this.rowEligibleAmount == undefined ? 0 : this.rowEligibleAmount;
                this.eduCount += 1;
                this.lgModal.hide();
            }
            else if (this.educationDetailsArray.findIndex(function (x) { return x.dependentId == details.dependentId; }) != -1 && this.rowIndex == -1) {
                alert("already added please select another dependent");
                return;
            }
            else {
                if (this.rowIndex != -1) {
                    if (this.educationDetailsArray.findIndex(function (x) { return x.dependentId == details.dependentId; }) == this.rowIndex) {
                        this.educationDetailsArray.splice(this.rowIndex, 1);
                        this.claim.educationDetails.claimAmount -= this.rowEligibleAmount == undefined ? 0 : this.rowEligibleAmount;
                        var attachedList_2 = [];
                        if (this.educertificates.length > 0) {
                            this.educertificates.forEach(function (contact) {
                                attachedList_2.push(contact);
                            });
                        }
                        if (this.eduNonMarriage.length > 0) {
                            this.eduNonMarriage.forEach(function (contact) {
                                attachedList_2.push(contact);
                            });
                        }
                        if (this.eduSelfAttested.length > 0) {
                            this.eduSelfAttested.forEach(function (contact) {
                                attachedList_2.push(contact);
                            });
                        }
                        details.attachmentDetailsList = attachedList_2;
                        details.isDuplicate = false;
                        this.educationDetailsArray.push(details);
                        this.rowIndex = -1;
                        this.rowEligibleAmount = 0;
                        this.lgModal.hide();
                    }
                    else {
                        alert("already added please select another dependent");
                        return;
                    }
                }
            }
            if (this.educationBenefitConfigDetails != null && this.educationBenefitConfigDetails.length > 0) {
                var eduBenefit = this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "MaxLimitExceeded" /* MaxLimitExceeded */.toString(); });
                if (eduBenefit != null) {
                    var cond = eval(this.eduCount + eduBenefit.logic + eduBenefit.value);
                }
                if (cond) {
                    this.maxLimitExceeded = true;
                }
            }
            //if (this.eduCount >= 2) { this.maxLimitExceeded = true; }
            var data = this.benficiaryFamily.find(function (x) { return x.benFamilyMemSno == details.dependentId; });
            this.claim.educationDetails.claimAmount += details.eligibleAmount == undefined ? 0 : details.eligibleAmount;
            this.educationDetails = {};
        }
    };
    AgentClaimEntryComponent.prototype.editEducationDetails = function (details) {
        var _this = this;
        this.educationDetails = details;
        this.eduSelfAttested = [];
        this.educertificates = [];
        this.eduNonMarriage = [];
        this.educationDetails.dateofAdmission = new Date(details.dateofAdmission);
        this.educationDetails.attachmentDetailsList.forEach(function (eachObj) {
            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Scholarship) {
                _this.educertificates.push(eachObj);
            }
            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].NonMarriage) {
                _this.eduNonMarriage.push(eachObj);
            }
            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].PassingExamCertificate) {
                _this.eduSelfAttested.push(eachObj);
            }
        });
        this.rowEligibleAmount = details.eligibleAmount;
        this.rowIndex = this.educationDetailsArray.indexOf(details);
        this.lgModal.show();
    };
    AgentClaimEntryComponent.prototype.removeEducationDetails = function (details) {
        var index = this.educationDetailsArray.indexOf(details);
        if (index !== -1) {
            this.claim.educationDetails.claimAmount -= this.educationDetailsArray[index].eligibleAmount == undefined ? 0 : this.educationDetailsArray[index].eligibleAmount;
            this.educationDetailsArray.splice(index, 1);
            if (this.educationDetailsArray.findIndex(function (x) { return x.presentlyReadingName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development"; }) != -1) {
                this.viewuploadNonMarriage = true;
            }
            else {
                this.viewuploadNonMarriage = false;
            }
            this.eduCount -= 1;
            if (this.educationBenefitConfigDetails != null && this.educationBenefitConfigDetails.length > 0) {
                var eduBenefit = this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "MaxLimitExceeded" /* MaxLimitExceeded */.toLowerCase(); });
                if (eduBenefit != null) {
                    var cond = eval(this.eduCount + eduBenefit.logic + eduBenefit.value);
                }
                if (cond) {
                    this.maxLimitExceeded = true;
                }
                else {
                    this.maxLimitExceeded = false;
                }
            }
            //if (this.eduCount >= 2) { this.maxLimitExceeded = true; } else { this.maxLimitExceeded = false; }
        }
    };
    AgentClaimEntryComponent.prototype.getHospitalization = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].Hospitalization)
            .subscribe(function (data) {
            _this.hospitalizationLov = data;
        });
    };
    AgentClaimEntryComponent.prototype.getHealthClainFor = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].ClaimFor)
            .subscribe(function (data) {
            _this.healthtypeofClaim = data;
        });
    };
    AgentClaimEntryComponent.prototype.getLastExamPassed = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].LastExamPassed)
            .subscribe(function (data) {
            _this.lastExampassed = data;
        });
    };
    AgentClaimEntryComponent.prototype.getReasonForApply = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].ReasonForApply)
            .subscribe(function (data) {
            _this.reasonForApply = data;
        });
    };
    AgentClaimEntryComponent.prototype.getPfConfiguration = function () {
        var _this = this;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].PF)
            .subscribe(function (data) {
            _this.pfConfig = data;
        });
    };
    AgentClaimEntryComponent.prototype.getHealthandFamilyConfiguration = function () {
        var _this = this;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily)
            .subscribe(function (data) {
            _this.healthConfig = data;
        });
    };
    AgentClaimEntryComponent.prototype.getEducationConfiguration = function () {
        var _this = this;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education)
            .subscribe(function (data) {
            _this.educationConfig = data;
            _this.dataService.eduConfig = data;
        });
    };
    AgentClaimEntryComponent.prototype.getDeathConfiguration = function () {
        var _this = this;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Death)
            .subscribe(function (data) {
            _this.deathConfig = data;
        });
    };
    AgentClaimEntryComponent.prototype.getDisabIlityConfiguration = function () {
        var _this = this;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability)
            .subscribe(function (data) {
            _this.disabilityConfig = data;
        });
    };
    AgentClaimEntryComponent.prototype.searchSSINNo = function (ssnNo) {
        var _this = this;
        this.benficiaryNominee = [];
        this.pfExsits = this.isPFSubmitted = this.isCAFUpdated = false;
        this.benficiaryInactive = this.validateDependent = this.noDependents = this.maxLimitExceeded = false;
        if (this.claimId <= 0) {
            this.viewDisability = false;
            this.viewDeath = false;
            this.viewPf = false;
        }
        // this.viewDeathFieldsAndNominee = false;
        //this.viewDisability = this.viewDeath = this.disableDisabilityCheckbox = this.disableDeathCheckbox = false;
        if (ssnNo != undefined && ssnNo.trim() != "") {
            if (confirm("Are you sure to proceed ")) {
                debugger;
                if (this.viewDeathFieldsAndNominee) {
                    this.dataService.isCAFUpdated(ssnNo.trim(), this.isRegistrationNo).subscribe(function (data1) {
                        debugger;
                        if (!data1)
                            _this.isCAFUpdated = true;
                        else {
                            _this.dataService
                                .getBeneficiaryBasicDetailsByNo(ssnNo.trim(), _this.isRegistrationNo)
                                .subscribe(function (data) {
                                _this.beneficiary = data;
                                if (_this.beneficiary != null && _this.beneficiary.benSno > 0) {
                                    if (_this.beneficiary.isActive) {
                                        _this.ssin = _this.beneficiary.ssI_Number;
                                        _this.disabledssin = true;
                                        _this.benficiaryInactive = false;
                                        _this.getBenficiaryFamilyDetails(_this.beneficiary.benSno);
                                        _this.getBenficiaryFamilyDetailsByHealth(_this.beneficiary.benSno);
                                        _this.getBenficiaryEduCount(_this.beneficiary.benSno);
                                        _this.getBeneficiaryNomineeDetails(_this.beneficiary.benSno);
                                        debugger;
                                        _this.getBeneficiaryAppliedDisabilities(_this.beneficiary.benSno, _this.claimId);
                                        if (_this.beneficiary.benPFStatus != null && _this.beneficiary.benPFStatus == 1) {
                                            _this.dataService.getBeneficiaryPFAccountDetails(_this.beneficiary.benSno).subscribe(function (data1) {
                                                debugger;
                                                _this.beneficiaryPFAccountDetails = data1;
                                                if (_this.beneficiaryPFAccountDetails != null && (_this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != null && _this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != "")) {
                                                    if (_this.beneficiaryPFAccountDetails.pfStatus == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFStatusMaster"].Active || _this.beneficiaryPFAccountDetails.pfStatus == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFStatusMaster"].PartialClosed) {
                                                        _this.getPfBalance(_this.beneficiary.benSno);
                                                    }
                                                    else
                                                        alert("Your Pf Account is closed/Inactive");
                                                }
                                                else
                                                    alert("No pf details available for this given SSIN number");
                                            });
                                        }
                                        debugger;
                                        if (_this.claim.reasonForApply == 16) {
                                            _this.isBenDeath = false;
                                            _this.disableDisabilityCheckbox = true;
                                            _this.disableDeathCheckbox = false;
                                            _this.viewDeathFieldsAndNominee = true;
                                        }
                                        else {
                                            if (_this.beneficiary != null && _this.beneficiary.benDeathStatus == 1) {
                                                _this.isBenDeath = true;
                                                _this.disableDeathCheckbox = true;
                                                _this.disableEducationCheckbox = true;
                                                _this.disableDisabilityCheckbox = true;
                                                _this.disableHealthCheckbox = true;
                                                _this.disablePFCheckbox = true;
                                            }
                                            else {
                                                if (_this.claim.reasonForApply == 17) {
                                                    _this.disableEducationCheckbox = true;
                                                    _this.disableHealthCheckbox = true;
                                                    _this.disablePFCheckbox = true;
                                                }
                                                _this.disableDeathCheckbox = true;
                                                _this.disableDisabilityCheckbox = false;
                                                _this.isBenNomineeClaimSubmitted(_this.beneficiary.benSno);
                                            }
                                        }
                                    }
                                    else {
                                        _this.benficiaryInactive = true;
                                        _this.restrictSave = true;
                                        _this.viewEducation = false;
                                        _this.disableEdu = true;
                                    }
                                }
                                else
                                    _this.isCAFUpdated = true;
                                console.log(_this.beneficiary);
                            });
                        }
                    });
                }
                else {
                    if (!this.isCAFUpdated) {
                        this.dataService
                            .getBeneficiaryBasicDetailsByNo(ssnNo.trim(), this.isRegistrationNo)
                            .subscribe(function (data) {
                            _this.beneficiary = data;
                            if (_this.beneficiary != null) {
                                if (_this.beneficiary.isActive) {
                                    _this.disabledssin = true;
                                    _this.benficiaryInactive = false;
                                    _this.getBenficiaryFamilyDetails(_this.beneficiary.benSno);
                                    _this.getBenficiaryFamilyDetailsByHealth(_this.beneficiary.benSno);
                                    _this.getBenficiaryEduCount(_this.beneficiary.benSno);
                                    _this.getBeneficiaryNomineeDetails(_this.beneficiary.benSno);
                                    debugger;
                                    _this.getBeneficiaryAppliedDisabilities(_this.beneficiary.benSno, _this.claimId);
                                    if (_this.beneficiary.benPFStatus != null && _this.beneficiary.benPFStatus == 1) {
                                        _this.dataService.getBeneficiaryPFAccountDetails(_this.beneficiary.benSno).subscribe(function (data1) {
                                            debugger;
                                            _this.beneficiaryPFAccountDetails = data1;
                                            if (_this.beneficiaryPFAccountDetails != null && (_this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != null && _this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != "")) {
                                                if (_this.beneficiaryPFAccountDetails.pfStatus == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFStatusMaster"].Active || _this.beneficiaryPFAccountDetails.pfStatus == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFStatusMaster"].PartialClosed) {
                                                    _this.getPfBalance(_this.beneficiary.benSno);
                                                }
                                                else
                                                    alert("Your Pf Account is closed/Inactive");
                                            }
                                            else
                                                alert("No pf details available for this given SSIN number");
                                        });
                                    }
                                    //-----------------
                                    //16-On Death of Beneficiary / On Request of Nominee
                                    //17-On Disability of Beneficiary
                                    //18-On Request of Beneficiary
                                    debugger;
                                    if (_this.claim.reasonForApply == 16) {
                                        _this.isBenDeath = false;
                                        _this.disableDisabilityCheckbox = true;
                                        _this.disableDeathCheckbox = false;
                                        _this.viewDeathFieldsAndNominee = true;
                                    }
                                    else {
                                        if (_this.beneficiary != null && _this.beneficiary.benDeathStatus == 1) {
                                            _this.isBenDeath = true;
                                            _this.disableDeathCheckbox = true;
                                            _this.disableEducationCheckbox = true;
                                            _this.disableDisabilityCheckbox = true;
                                            _this.disableHealthCheckbox = true;
                                            _this.disablePFCheckbox = true;
                                        }
                                        else {
                                            if (_this.claim.reasonForApply == 17) {
                                                _this.disableEducationCheckbox = true;
                                                _this.disableHealthCheckbox = true;
                                                _this.disablePFCheckbox = true;
                                            }
                                            _this.disableDeathCheckbox = true;
                                            _this.disableDisabilityCheckbox = false;
                                            _this.isBenNomineeClaimSubmitted(_this.beneficiary.benSno);
                                        }
                                    }
                                    //------=====================
                                }
                                else {
                                    _this.benficiaryInactive = true;
                                    _this.restrictSave = true;
                                    _this.viewEducation = false;
                                    _this.disableEdu = true;
                                }
                            }
                            console.log(_this.beneficiary);
                        });
                    }
                }
            }
        }
        else {
            this.beneficiary = {};
            this.viewEducation = false;
        }
    };
    AgentClaimEntryComponent.prototype.getHospitals = function () {
        var _this = this;
        this.dataService
            .getAllHospitals()
            .subscribe(function (data) {
            _this.hospotalList = data;
            console.log(_this.hospotalList);
        });
    };
    AgentClaimEntryComponent.prototype.getBenficiaryEduCount = function (id) {
        var _this = this;
        this.dataService
            .getBeneficiaryEduCount(id)
            .subscribe(function (data) {
            _this.eduCount = data;
            if (_this.mode == "draft" && (_this.educationDetailsArray != null && _this.educationDetailsArray.length > 0)) {
                _this.eduCount = _this.eduCount + _this.educationDetailsArray.length;
            }
            if (_this.educationBenefitConfigDetails != null && _this.educationBenefitConfigDetails.length > 0) {
                var eduBenefit = _this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "MaxLimitExceeded" /* MaxLimitExceeded */.toLowerCase(); });
                if (eduBenefit != null) {
                    var cond = eval(_this.eduCount + eduBenefit.logic + eduBenefit.value);
                    if (cond && _this.claimId == 0) {
                        //if (this.eduCount >= 2 && this.claimId == 0) {
                        //this.disableEdu = true;
                        //this.maxLimitExceeded = true;
                        //this.restrictSave = true;
                    }
                    else {
                        _this.disableEdu = false;
                        _this.maxLimitExceeded = false;
                        _this.restrictSave = false;
                    }
                }
            }
        });
    };
    AgentClaimEntryComponent.prototype.getBenficiaryFamilyDetailsByHealth = function (id) {
        var _this = this;
        this.dataService
            .getBeneficiaryFamilyDetails(id, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily)
            .subscribe(function (data) {
            _this.benficiaryFamilybyHealth = data;
        });
    };
    AgentClaimEntryComponent.prototype.getBenficiaryFamilyDetails = function (id, type) {
        var _this = this;
        this.dataService
            .getBeneficiaryFamilyDetails(id, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education)
            .subscribe(function (data) {
            _this.benficiaryChildren = data;
            _this.benficiaryFamily = data;
        });
    };
    AgentClaimEntryComponent.prototype.getBeneficiaryNomineeDetails = function (id) {
        var _this = this;
        this.dataService
            .getBeneficiaryNomineeDetails(id)
            .subscribe(function (data) {
            _this.benficiaryNominee = data;
            if (_this.benficiaryNominee.length == 0)
                _this.isNomineesExist = false;
            else
                _this.isNomineesExist = true;
        });
    };
    AgentClaimEntryComponent.prototype.validateHealthData = function (claimData, id) {
        var isValid = true;
        this.typeOfClaimValid = this.dateofAppointment = this.hospital = this.hospitalization = this.dateofAdmin = this.dateofDischargeValid = this.claimForValid = this.familyMember = this.hospitalselfAttested = this.dischargeCertificate = this.rigisterESI = this.loeFromDate = this.loeToDate = this.healthCondolationCertificateUploaded = true; //this.originalVoucher =
        this.isClaimEffectiveDate = false;
        if (id == 1) {
            if (this.beneficiary.benSno == undefined) {
                this.ssinReq = isValid = false;
            }
            return isValid;
        }
        if (id == 2) {
            if (this.mainUpload == undefined) {
                this.uplaodmain = isValid = false;
            }
        }
        if (this.hospotalId > 0) {
            if (this.claim.healthFamilyDetails.otherHospital == undefined) {
                this.otherHospitalValid = isValid = false;
            }
            ;
        }
        if (this.claim.healthFamilyDetails.claimFor == undefined || this.claim.healthFamilyDetails.claimFor == 0) {
            this.claimForValid = isValid = false;
        }
        if (this.claim.healthFamilyDetails.typeOfClaim == undefined) {
            this.typeOfClaimValid = isValid = false;
        }
        if (this.claim.healthFamilyDetails.hospitalId == 0 || this.claim.healthFamilyDetails.hospitalId == undefined) {
            this.hospital = isValid = false;
        }
        if (this.claim.healthFamilyDetails.typeOfHospitalization == 0 || this.claim.healthFamilyDetails.typeOfHospitalization == undefined) {
            this.hospitalization = isValid = false;
        }
        if (this.claim.healthFamilyDetails.isCertifynotESI == false || this.claim.healthFamilyDetails.isCertifynotESI == undefined) {
            this.rigisterESI = isValid = false;
        }
        if (this.healthSelfAttached.fileName == undefined) {
            this.hospitalselfAttested = isValid = false;
        }
        ;
        //if (this.healthOriginalVoucher.fileName == undefined) { this.originalVoucher = isValid = false };
        if (this.showDisCertUpload && this.healthDischargeCertificate.fileName == undefined) {
            this.dischargeCertificate = isValid = false;
        }
        ;
        if (this.viewDateOfAdmit) {
            if (this.claim.healthFamilyDetails.admittedDate == undefined) {
                this.dateofAdmin = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.admittedDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
            if (this.claim.healthFamilyDetails.dischargeDate == undefined) {
                this.dateofDischargeValid = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.dischargeDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
        }
        if (this.viewDateOfFirstAppointment) {
            if (this.claim.healthFamilyDetails.firstAppointmentDate == undefined) {
                this.dateofAppointment = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.firstAppointmentDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
        }
        if (this.viewFamily) {
            if (this.claim.healthFamilyDetails.familyMemberId == 0 || this.claim.healthFamilyDetails.familyMemberId == undefined) {
                this.rigisterESI = isValid = false;
            }
        }
        if (this.viewSelf) {
            if (this.claim.healthFamilyDetails.loeFromDate == undefined) {
                this.loeFromDate = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.loeFromDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
            if (this.claim.healthFamilyDetails.loeToDate == undefined) {
                this.loeToDate = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.loeToDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
        }
        if (this.claim.healthFamilyDetails.costOfClinicalTest == undefined && (this.viewDateOfAdmit && this.claim.healthFamilyDetails.costOfHospitalization == undefined) && this.claim.healthFamilyDetails.costOfMedicine == undefined) {
            isValid = false;
            alert("Please enter atleast one cost");
            return;
        }
        else {
            if (this.claim.healthFamilyDetails.costOfClinicalTest == 0 && this.claim.healthFamilyDetails.costOfHospitalization == 0 && this.claim.healthFamilyDetails.costOfMedicine == 0) {
                isValid = false;
                alert("Please enter atleast one valid cost");
                return;
            }
            var amount = Number(claimData.healthFamilyDetails.costOfClinicalTest != undefined ? claimData.healthFamilyDetails.costOfClinicalTest : 0) + Number(claimData.healthFamilyDetails.costOfHospitalization != undefined ? claimData.healthFamilyDetails.costOfHospitalization : 0) + Number(claimData.healthFamilyDetails.costOfMedicine != undefined ? claimData.healthFamilyDetails.costOfMedicine : 0);
            if (amount == 0) {
                isValid = false;
                alert("Please enter atleast one valid cost");
                return;
            }
            var remainingAmount = 0;
            if (this.claim.healthFamilyDetails.typeOfClaim == 4) {
                remainingAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].TreatmentOfAilment - this.typeOfAilmentClaimedAmount;
            }
            else {
                remainingAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].Surgery - this.surgeryClaimedAmount;
            }
            if (amount > remainingAmount) {
                isValid = false;
                alert("Cost of Clinical Test, Cost of Medicine, Cost of Hospitalization should not be more than " + remainingAmount);
                return;
            }
        }
        if (this.enableReasonForDelaySubmissionInHealth) {
            if (this.claim.healthFamilyDetails.reasonForDelaySubmission == undefined) {
                this.reasonForHealthDelayValid = isValid = false;
            }
            ;
            if (this.healthCondolationCertificate.fileName == undefined) {
                this.healthCondolationCertificateUploaded = isValid = false;
            }
            ;
        }
        return isValid;
    };
    AgentClaimEntryComponent.prototype.validateClaimsData = function (claimData, id) {
        var isValid = true;
        this.ssinReq = this.reasonForApplyValid = this.uploadselfattestedValid = this.uploadNonMarriageValid = this.uploadCertificatetValid = this.educationCheck = this.nomineeRequired = true;
        if (id == 1) {
            if (this.beneficiary.benSno == undefined) {
                this.ssinReq = isValid = false;
            }
            return isValid;
        }
        if (this.claim.reasonForApply <= 0 || this.claim.reasonForApply == undefined) {
            this.reasonForApplyValid = isValid = false;
        }
        // Death of Beneficiary
        if (this.claim.reasonForApply == 16) {
            if (this.claim.nomineeId <= 0 || this.claim.nomineeId == undefined) {
                this.nomineeRequired = isValid = false;
            }
        }
        if (this.beneficiary.benSno == undefined) {
            this.ssinReq = isValid = false;
        }
        if (id == 2) {
            if (this.mainUpload == undefined) {
                this.uplaodmain = isValid = false;
            }
        }
        return isValid;
    };
    AgentClaimEntryComponent.prototype.validateDisabilityData = function (claimData, id) {
        var _this = this;
        var isValid = true;
        this.natureOfDisability = this.dateofrelease1 = this.disabilityCertificateUploaded = this.isDeathorpermanent1 = this.isDeathorpermanent2 = this.isDeathorpermanent3 = this.checkNatureOfDisability = this.condolationCertificateUploaded = true;
        this.isClaimEffectiveDate = false;
        if (id == 2) {
            if (this.mainUpload == undefined) {
                this.uplaodmain = isValid = false;
            }
        }
        if (this.disabilityCertificate.fileName == undefined) {
            this.disabilityCertificateUploaded = isValid = false;
        }
        ;
        if (this.claim.disabilityDetails.dateofRelease == undefined) {
            this.dateofrelease1 = isValid = false;
        }
        ;
        //if (this.claim.disabilityDetails.natureOfDisability == undefined) { this.natureOfDisability = isValid = false }
        if (this.claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyintentional == false || this.claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyintentional == undefined) {
            this.isDeathorpermanent1 = isValid = false;
        }
        if (this.claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyinjuries == false || this.claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyinjuries == undefined) {
            this.isDeathorpermanent2 = isValid = false;
        }
        if (this.claim.disabilityDetails.isOtherFinancialAssistance == false || this.claim.disabilityDetails.isOtherFinancialAssistance == undefined) {
            this.isDeathorpermanent3 = isValid = false;
        }
        if (this.claim.disabilityDetails.natureOfDisability == undefined) {
            this.natureOfDisability = isValid = false;
        }
        else {
            var data = this.beneficiaryAppliedDisabilities.find(function (x) { return x == _this.claim.disabilityDetails.natureOfDisability; });
            if (data) {
                this.checkNatureOfDisability = isValid = false;
                //alert("Claim has been already submitted with this nature of disability");
                //return;
            }
        }
        if (this.enableReasonForDelaySubmission) {
            if (this.claim.disabilityDetails.reasonForDelaySubmission == undefined) {
                this.reasonForDelayValid = isValid = false;
            }
            ;
            if (this.condolationCertificate.fileName == undefined) {
                this.condolationCertificateUploaded = isValid = false;
            }
            ;
        }
        if (this.claim.disabilityDetails.dateofRelease != undefined) {
            if (this.claim.disabilityDetails.dateofRelease < new Date(this.disabilityClaimEffectiveDate)) {
                this.claimEffectiveDate = this.disabilityClaimEffectiveDate;
                this.isClaimEffectiveDate = true;
                isValid = false;
            }
        }
        return isValid;
    };
    AgentClaimEntryComponent.prototype.validateDeathData = function (claimData, id) {
        var isValid = true;
        this.natureOfDeath = this.dateofDeath = this.isDeath1 = this.isDeath2 = this.isDeath3 = this.placeOfDeathValid = true;
        this.isClaimEffectiveDate = false;
        if (id == 2) {
            if (this.mainUpload == undefined) {
                this.uplaodmain = isValid = false;
            }
        }
        if (this.deathCertificate.fileName == undefined) {
            this.deathCertificateUploaded = isValid = false;
        }
        ;
        if (this.bankPassbook.fileName == undefined) {
            this.bankPassbookUploaded = isValid = false;
        }
        ;
        if (this.claim.deathDetails.natureofDeath == undefined) {
            this.natureOfDeath = isValid = false;
        }
        ;
        if (this.claim.deathDetails.dateofDeath == undefined) {
            this.dateofDeath = isValid = false;
        }
        else {
            if (this.claim.deathDetails.dateofDeath < new Date(this.deathClaimEffectiveDate)) {
                this.claimEffectiveDate = this.deathClaimEffectiveDate;
                this.isClaimEffectiveDate = true;
                isValid = false;
            }
        }
        if (this.claim.deathDetails.isDeathorpermanentdisabilitynotcausedbyintentional == false || this.claim.deathDetails.isDeathorpermanentdisabilitynotcausedbyintentional == undefined) {
            this.isDeath1 = isValid = false;
        }
        if (this.claim.deathDetails.isDeathorpermanentdisabilitynotcausedbyinjuries == false || this.claim.deathDetails.isDeathorpermanentdisabilitynotcausedbyinjuries == undefined) {
            this.isDeath2 = isValid = false;
        }
        if (this.claim.deathDetails.isOtherFinancialAssistance == false || this.claim.deathDetails.isOtherFinancialAssistance == undefined) {
            this.isDeath3 = isValid = false;
        }
        if (this.viewAccidental == true && this.claim.deathDetails.placeofDeath == undefined) {
            this.placeOfDeathValid = isValid = false;
        }
        ;
        return isValid;
    };
    AgentClaimEntryComponent.prototype.validatePFData = function (claimData, id) {
        var isValid = true;
        //this.natureOfDeath = this.dateofDeath = this.isDeath1 = this.isDeath2 = this.isDeath3 = this.placeOfDeathValid = true;
        if (id == 2) {
            if (this.mainUpload == undefined) {
                this.uplaodmain = isValid = false;
            }
        }
        if (this.claim.providentFundDetails.typeOfClaim == undefined) {
            this.pfTypeOfClaimValid = isValid = false;
        }
        else if (this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].Premature) //Premature
         {
            if (this.claim.providentFundDetails.reasonForPreClosure == undefined) {
                this.reasonForPreclosureValid = isValid = false;
            }
            ;
            if (this.pfLockingPeriod != undefined && this.pfLockingPeriod != null) {
                debugger;
                var date1 = new Date(this.pfLockingPeriod);
                var timeDiff = (this.maxDate.getTime() - date1.getTime());
                //var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                if (timeDiff < 0) {
                    alert("Premature can not be possible before locking period");
                    return;
                }
                if (timeDiff < 0 && this.pfAccountStatus.toLowerCase() == "suspend") {
                    alert("Irrespective of the locking period I can apply for premature");
                    return;
                }
            }
        }
        else if (this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].FinalPayment && this.claim.reasonForApply != 16) //FinalPayment and Not Death of Benficiary
         {
            if (this.pfBenefitConfigDetails != null) {
                //final payment  - age > 60 
                debugger;
                var date1 = new Date(this.beneficiary.benDob);
                var age = this.maxDate.getFullYear() - date1.getFullYear();
                var m = this.maxDate.getMonth() - date1.getMonth();
                if (m < 0 || (m === 0 && this.maxDate.getDate() < date1.getDate())) {
                    age--;
                }
                var cond = eval(age + this.pfBenefitConfigDetails.maturityAgeLogic + this.pfBenefitConfigDetails.maturityAge);
                // if (age < 60) {
                if (cond) {
                    alert("you are not eligible for this claim beacause your age less than 60");
                    return;
                }
            }
        }
        return isValid;
    };
    AgentClaimEntryComponent.prototype.validatePfSubmit = function (ssiNumber, nomineeId, eve) {
        var _this = this;
        var share = 0;
        if (nomineeId > 0) {
            this.dataService
                .validatePfSubmit(ssiNumber, 0)
                .subscribe(function (data) {
                _this.isPFSubmitted = data;
                if (_this.isPFSubmitted) {
                    _this.viewPf = false;
                    eve.target.checked = false;
                    _this.disablePFCheckbox = true;
                    _this.pfExsits = true;
                }
                else {
                    _this.dataService
                        .validatePfSubmit(ssiNumber, nomineeId)
                        .subscribe(function (data) {
                        _this.isPFSubmitted = data;
                        if (_this.isPFSubmitted) {
                            _this.viewPf = false;
                            eve.target.checked = false;
                            _this.disablePFCheckbox = true;
                            _this.pfExsits = true;
                        }
                        else {
                            _this.pfCode();
                        }
                        //else {
                        //    
                        //    this.disablePFCheckbox = false;
                        //    if (this.viewPf && nomineeId > 0) {
                        //        //16-On Death of Beneficiary
                        //        if (this.claim.reasonForApply == 16) {
                        //            this.viewNomineeShare = true;
                        //            if (this.benficiaryNominee != null && this.benficiaryNominee != undefined) {
                        //                share = this.benficiaryNominee.find(n => n.benNomineeSno == this.claim.nomineeId).benNomineeSharePercentage;
                        //                if (this.benficiaryNominee.length == 1) {
                        //                    if (share == 0) {
                        //                        share = 100;
                        //                    }
                        //                }
                        //                if (this.pfClaimAmount != undefined && this.pfClaimAmount != null && this.pfClaimAmount > 0)
                        //                    this.benNomineeShareAmount = Math.round(this.pfClaimAmount * (share / 100));
                        //            }
                        //            this.claim.providentFundDetails.typeOfClaim = PFTypeOfClaim.FinalPayment;
                        //            this.disablePFTypeOfClaim = true;
                        //        }
                        //        //else {
                        //        //    this.pfCode();
                        //        //}
                        //    }
                        //}
                    });
                }
            });
        }
        else {
            this.dataService
                .validatePfSubmit(ssiNumber, nomineeId)
                .subscribe(function (data) {
                _this.isPFSubmitted = data;
                if (_this.isPFSubmitted) {
                    _this.viewPf = false;
                    eve.target.checked = false;
                    _this.disablePFCheckbox = true;
                    _this.pfExsits = true;
                }
                else {
                    _this.pfCode();
                }
                //else {
                //    this.disablePFCheckbox = false;
                //    if (this.viewPf && nomineeId > 0) {
                //        //16-On Death of Beneficiary
                //        if (this.claim.reasonForApply == 16) {
                //            this.viewNomineeShare = true;
                //            if (this.benficiaryNominee != null && this.benficiaryNominee != undefined) {
                //                share = this.benficiaryNominee.find(n => n.benNomineeSno == this.claim.nomineeId).benNomineeSharePercentage;
                //                if (this.benficiaryNominee.length == 1) {
                //                    if (share == 0) {
                //                        share = 100;
                //                    }
                //                }
                //                if (this.pfClaimAmount != undefined && this.pfClaimAmount != null && this.pfClaimAmount > 0)
                //                    this.benNomineeShareAmount = Math.round(this.pfClaimAmount * (share / 100));
                //            }
                //            this.claim.providentFundDetails.typeOfClaim = PFTypeOfClaim.FinalPayment;
                //            this.disablePFTypeOfClaim = true;
                //        }
                //        else {
                //            this.pfCode();
                //        }
                //    }
                //}
            });
        }
    };
    AgentClaimEntryComponent.prototype.okClick = function () {
        //this.successModal.hide();
        if (this.mode == "draft") {
            window.location.href = "agent/DraftClaims";
        }
        else if (this.mode == "claim") {
            window.location.href = "agent/claims";
        }
        else if (this.mode == "referal") {
            window.location.href = "agent/agentreferral";
        }
        else {
            window.location.href = "agent/claims";
        }
    };
    AgentClaimEntryComponent.prototype.cancleClick = function () {
        if (this.mode == "draft") {
            window.location.href = "agent/DraftClaims";
        }
        else if (this.mode == "claim") {
            window.location.href = "agent/claims";
        }
        else if (this.mode == "referal") {
            window.location.href = "agent/agentreferral";
        }
        else {
            window.location.href = "agent/claims";
        }
    };
    AgentClaimEntryComponent.prototype.downLoadPdf = function (claimData, type) {
        var _this = this;
        if (!this.viewPf) {
            this.claim.providentFundDetails = null;
        }
        if (!this.viewDeath) {
            this.claim.deathDetails = null;
        }
        else {
            claimData.deathDetails.natureofDeathName = this.natureofDeathName;
            claimData.deathDetails.claimAmount = this.deathEligibility;
        }
        if (!this.viewDisability) {
            this.claim.disabilityDetails = null;
        }
        else {
            claimData.disabilityDetails.natureOfDisabilityName = this.natureOfDisabilityName;
        }
        if (!this.viewHealth) {
            this.claim.healthFamilyDetails = null;
        }
        if (!this.viewEducation) {
            this.claim.educationDetails = null;
        }
        else {
            claimData.educationDetails.educationDetailList = this.educationDetailsArray;
        }
        this.claim.benSno = this.beneficiary.benSno;
        claimData.benSno = this.claim.benSno;
        claimData.benName = this.beneficiary.benFullName;
        claimData.attachment = this.mainUploadList;
        claimData.ssin = this.beneficiary.ssI_Number;
        if (this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["UserType"].CA.toString())
            claimData.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["EntryPoint"].CA;
        else if (this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["UserType"].Lwfc.toString())
            claimData.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["EntryPoint"].Lwfc;
        else
            claimData.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["EntryPoint"].Agent;
        //claimData.entryPoint = EntryPoint.Agent;
        if (claimData.reasonForApply == 16)
            this.claim.onBehalfBen = false;
        else
            this.claim.onBehalfBen = true;
        this.dataService
            .genaratePdfFormV(claimData)
            .then(function (data) {
            var blob = new Blob([data.body], { type: 'application/pdf' });
            if (type == 'print') {
                var blobUrl = URL.createObjectURL(blob);
                var iframe = document.createElement('iframe');
                iframe.style.display = 'none';
                iframe.src = blobUrl;
                document.body.appendChild(iframe);
                iframe.contentWindow.print();
            }
            else {
                file_saver__WEBPACK_IMPORTED_MODULE_6__["saveAs"](blob, "FormV.pdf");
            }
            _this.disableSubmitbutton = false;
            _this.pdfModal.hide();
            //var url = window.URL.createObjectURL(blob);
            //this.disableSubmitbutton = false;
            //window.open(url);
        });
    };
    AgentClaimEntryComponent.prototype.GenaratePdf = function (claimData, type) {
        var isValid = true;
        if (this.viewHealth) {
            if (this.validateHealthData(claimData, type)) {
                if (this.claim.healthFamilyDetails.claimFor == 5 && this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                    claimData.healthFamilyDetails.loeAmount = this.lossOfEmploymentAmount;
                }
                else {
                    claimData.healthFamilyDetails.loeAmount = 0;
                }
            }
            else {
                //return;
                isValid = false;
            }
        }
        if (this.viewDisability) {
            if (!this.validateDisabilityData(claimData, type)) {
                //return;
                isValid = false;
            }
        }
        if (this.viewDeath) {
            if (!this.validateDeathData(claimData, type)) {
                //return;
                isValid = false;
            }
        }
        if (this.viewPf) {
            if (!this.validatePFData(claimData, type)) {
                //return;
                isValid = false;
            }
            else {
                claimData.providentFundDetails.pFNO = this.beneficiary.regNumber;
            }
        }
        //Keep Education Validations after all the health,pf,death, disability validations
        if (this.viewEducation) {
            if (this.educationDetailsArray.length == 0) {
                alert("Please add atleast one student");
                //return;
                isValid = false;
            }
            else if (this.educationDetailsArray.length > 0) {
                for (var i = 0; i < this.educationDetailsArray.length; i++) {
                    if (this.educationDetailsArray[i].isDuplicate) {
                        alert("Already claim has submitted for this dependent in this year please select another dependent");
                        isValid = false;
                        return;
                    }
                }
            }
            if (!claimData.educationDetails.isanyothersourceofthegovernment) {
                return this.educationCheck = isValid = false;
            }
            this.isClaimEffectiveDate = false;
            for (var i = 0; i < this.educationDetailsArray.length; i++) {
                if (this.educationDetailsArray[i].dateofAdmission != undefined) {
                    if (new Date(this.educationDetailsArray[i].dateofAdmission) < new Date(this.educationClaimEffectiveDate)) {
                        this.claimEffectiveDate = this.educationClaimEffectiveDate;
                        this.isClaimEffectiveDate = true;
                        isValid = false;
                        return;
                    }
                }
            }
        }
        if (isValid == false) {
            return;
        }
        if (this.validateClaimsData(claimData, 3)) {
            this.pdfModal.show();
        }
        else {
            return;
        }
    };
    AgentClaimEntryComponent.prototype.saveClaimsData = function (claimData, type) {
        var _this = this;
        var isValid = true;
        var hasNomineeShare = true;
        this.validateDependent = false;
        if (type != 1) {
            if (this.viewHealth) {
                if (!this.validateHealthData(claimData, type)) {
                    //return;
                    isValid = false;
                }
            }
            if (this.viewDisability) {
                if (!this.validateDisabilityData(claimData, type)) {
                    //return;
                    isValid = false;
                }
            }
            if (this.viewDeath) {
                if (!this.validateDeathData(claimData, type)) {
                    //return;
                    isValid = false;
                }
            }
            if (this.viewPf) {
                if (!this.validatePFData(claimData, type)) {
                    //return;
                    isValid = false;
                }
            }
            //Keep Education Validations after all the health,pf,death, disability validations
            if (this.viewEducation) {
                if (this.educationDetailsArray.length == 0) {
                    alert("Please add atleast one student");
                    //return;
                    isValid = false;
                }
                if (!claimData.educationDetails.isanyothersourceofthegovernment) {
                    //return
                    this.educationCheck = isValid = false;
                }
                this.isClaimEffectiveDate = false;
                for (var i = 0; i < this.educationDetailsArray.length; i++) {
                    if (this.educationDetailsArray[i].dateofAdmission != undefined) {
                        if (new Date(this.educationDetailsArray[i].dateofAdmission) < new Date(this.educationClaimEffectiveDate)) {
                            this.claimEffectiveDate = this.educationClaimEffectiveDate;
                            this.isClaimEffectiveDate = true;
                            isValid = false;
                            return;
                        }
                    }
                }
            }
        }
        if (isValid == false) {
            return;
        }
        if (this.validateClaimsData(claimData, type)) {
            this.UpdateClaimStatusIdByStatus(type);
            if (this.ClaimStatusId <= 7)
                claimData.workflowId = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["WorkflowTrans"].workflow;
            else
                claimData.workflowId = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["WorkflowTrans"].workflowreferral;
            var attachedList = [];
            if (!this.viewPf) {
                this.claim.providentFundDetails = null;
            }
            if (!this.viewDeath) {
                this.claim.deathDetails = null;
            }
            if (!this.viewDisability) {
                this.claim.disabilityDetails = null;
            }
            if (!this.viewHealth) {
                this.claim.healthFamilyDetails = null;
            }
            if (!this.viewEducation) {
                this.claim.educationDetails = null;
            }
            // this.mainUploadList.push(this.mainUpload);
            this.claim.benSno = this.beneficiary.benSno;
            if (this.mainUpload != undefined) {
                // claimData.attachment.push(this.mainUpload);
                this.mainUploadList.push(this.mainUpload);
            }
            claimData.attachment = this.mainUploadList;
            this.claim.benSno = this.beneficiary.benSno;
            claimData.ssin = this.beneficiary.ssI_Number;
            if (this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["UserType"].CA.toString())
                claimData.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["EntryPoint"].CA;
            else if (this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["UserType"].Lwfc.toString())
                claimData.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["EntryPoint"].Lwfc;
            else
                claimData.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["EntryPoint"].Agent;
            if (this.claim.educationDetails != null) {
                if (this.educationDetailsArray.length > 0) {
                    claimData.educationDetails.educationDetailList = this.educationDetailsArray;
                    //---------------------------
                    this.educationClaimExceptionDetails = [];
                    for (var i = 0; i < this.educationDetailsArray.length; i++) {
                        var data = this.benficiaryFamily.find(function (x) { return x.benFamilyMemSno == _this.educationDetailsArray[i].dependentId; });
                        if (this.educationBenefitConfigDetails != null && this.educationBenefitConfigDetails.length > 0) {
                            //Exception Rule - 1 (if currentdate-admissiondate >90) 
                            if (this.educationDetailsArray[i].dateofAdmission != null && this.educationDetailsArray[i].dateofAdmission != undefined) {
                                var date1 = new Date(this.educationDetailsArray[i].dateofAdmission);
                                var date2 = new Date(Date.now());
                                var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                                var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                                var eduBenefit = this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "DateofAdmissionExceeding" /* DateofAdmissionExceeding */.toLowerCase(); });
                                if (eduBenefit != null) {
                                    var cond = eval(diffDays + eduBenefit.logic + eduBenefit.value);
                                    //if (diffDays > 90) {
                                    if (cond) {
                                        var exp = {};
                                        exp.exceptionText = "Student (Dependent) " + data.benDependentName + " admission date exceeding 90 days";
                                        exp.exceptionCapturedDate = new Date();
                                        exp.raisedBy = this.user.user.deptUserid;
                                        this.educationClaimExceptionDetails.push(exp);
                                    }
                                }
                                //Exception Rule - 2 IF(BenDependentSonAge by admissiondate> 21) 
                                if (data.benDependentRelation.toLowerCase() == "son") {
                                    var date1 = new Date(this.educationDetailsArray[i].dateofAdmission);
                                    var date2 = new Date(data.dob);
                                    var timeDiff = Math.abs(date1.getTime() - date2.getTime());
                                    var age = Math.floor((timeDiff / (1000 * 3600 * 24)) / 365);
                                    var eduBenefit2 = this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "SonAgeExceeding" /* SonAgeExceeding */.toLowerCase(); });
                                    if (eduBenefit2 != null) {
                                        var cond2 = eval(age + eduBenefit2.logic + eduBenefit2.value);
                                        //if (age >= 21) {
                                        if (cond2) {
                                            var exp = {};
                                            exp.exceptionText = "Student (Dependent) " + data.benDependentName + " age exceeding 21";
                                            exp.exceptionCapturedDate = new Date();
                                            exp.raisedBy = this.user.user.deptUserid;
                                            this.educationClaimExceptionDetails.push(exp);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // claimData.educationDetails.educationClaimExceptionDetails = this.educationClaimExceptionDetails;
                }
                else
                    claimData.educationDetails.educationDetailList = null;
                //claimData.educationDetails.attachmentDetailsList = attachedList;
                claimData.educationDetails.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education;
                claimData.educationDetails.statusId = this.ClaimStatusId;
                claimData.educationDetails.CreatedBy = this.user.user.deptUserid;
            }
            if (this.claim.healthFamilyDetails != null) {
                //-------------------------------
                this.healthClaimExceptionDetails = [];
                if (this.healthFamilyBenefitConfigDetails != null && this.healthFamilyBenefitConfigDetails.length > 0) {
                    //Exception Rule - 4 if(Currentdate-Firstappointmentdate >60 and OPD)
                    if (this.claim.healthFamilyDetails.firstAppointmentDate != null && this.claim.healthFamilyDetails.firstAppointmentDate != undefined) {
                        var date1 = new Date(this.claim.healthFamilyDetails.firstAppointmentDate);
                        var date2 = new Date(Date.now());
                        var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                        var helBenefit = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "DateofFirstAppointmentExceeding" /* DateofFirstAppointmentExceeding */.toLowerCase(); });
                        if (helBenefit != null) {
                            var cond = eval(diffDays + helBenefit.logic + helBenefit.value);
                            if (cond && this.claim.healthFamilyDetails.typeOfHospitalization == 2) {
                                //if (diffDays > 60 && this.claim.healthFamilyDetails.typeOfHospitalization == 2) {
                                var exp = {};
                                exp.exceptionText = "First appointment date exceeding 60 days";
                                exp.exceptionCapturedDate = new Date();
                                exp.raisedBy = this.user.user.deptUserid;
                                this.healthClaimExceptionDetails.push(exp);
                            }
                        }
                    }
                    //Exception Rule - 5 if(Currentdate-Dischargedate>60 and Hospitalization)
                    if (this.claim.healthFamilyDetails.dischargeDate != null && this.claim.healthFamilyDetails.dischargeDate != undefined) {
                        var date1 = new Date(this.claim.healthFamilyDetails.dischargeDate);
                        var date2 = new Date(Date.now());
                        var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                        var helBenefit2 = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "DateofDischargeExceeding" /* DateofDischargeExceeding */.toLowerCase(); });
                        if (helBenefit2 != null) {
                            var cond2 = eval(diffDays + helBenefit2.logic + helBenefit2.value);
                            if (cond2 && this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                                // if (diffDays > 60 && this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                                var exp = {};
                                exp.exceptionText = "Discharge date exceeding 60 days";
                                exp.exceptionCapturedDate = new Date();
                                exp.raisedBy = this.user.user.deptUserid;
                                this.healthClaimExceptionDetails.push(exp);
                            }
                        }
                    }
                }
                // claimData.healthFamilyDetails.healthClaimExceptionDetails = this.healthClaimExceptionDetails;
                //--------------------
                this.healthFamilyPackages = [];
                claimData.healthFamilyDetails.healthFamilyPackages = [];
                for (var i = 0; i < this.selectedPackages.length; i++) {
                    var oo = {};
                    if (claimData.claimId > 0) {
                        oo.healthFamilyId = claimData.healthFamilyDetails.healthFamilyId;
                    }
                    oo.packageID = this.selectedPackages[i].packageID;
                    oo.ailmentName = this.selectedPackages[i].ailmentName;
                    oo.packageName = this.selectedPackages[i].packageName;
                    this.healthFamilyPackages.push(oo);
                }
                claimData.healthFamilyDetails.healthFamilyPackages = this.healthFamilyPackages;
                claimData.healthFamilyDetails.claimAmount = Number(claimData.healthFamilyDetails.costOfClinicalTest != undefined ? claimData.healthFamilyDetails.costOfClinicalTest : 0) + Number(claimData.healthFamilyDetails.costOfHospitalization != undefined ? claimData.healthFamilyDetails.costOfHospitalization : 0) + Number(claimData.healthFamilyDetails.costOfMedicine != undefined ? claimData.healthFamilyDetails.costOfMedicine : 0) + ((this.viewSelf) ? claimData.healthFamilyDetails.loeAmount : 0);
                claimData.healthFamilyDetails.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                claimData.healthFamilyDetails.statusId = this.ClaimStatusId;
                claimData.healthFamilyDetails.loeAmount = this.lossOfEmploymentAmount;
                claimData.healthFamilyDetails.createdBy = this.user.user.deptUserid;
                if (!this.isOtherHospital) {
                    claimData.healthFamilyDetails.otherHospital == undefined;
                }
                else {
                    var exp = {};
                    exp.exceptionText = "Application has been submitted with a non listed hospital";
                    exp.exceptionCapturedDate = new Date();
                    exp.raisedBy = this.user.user.deptUserid;
                    // this.expection.push(exp);
                    this.healthClaimExceptionDetails.push(exp);
                }
                if (!this.viewDateOfAdmit) {
                    claimData.healthFamilyDetails.admittedDate == undefined;
                    claimData.healthFamilyDetails.dischargeDate == undefined;
                    claimData.healthFamilyDetails.costOfHospitalization == undefined;
                }
                if (!this.viewDateOfFirstAppointment) {
                    claimData.healthFamilyDetails.firstAppointmentDate == undefined;
                    claimData.healthFamilyDetails.nameOfTheDisease == undefined;
                    //claimData.healthFamilyDetails.nameOfClinicalTest == undefined;
                    this.nameOfClinicalTestIds = [];
                }
                else {
                    if (!this.viewNameOfClinicalTest) {
                        // claimData.healthFamilyDetails.nameOfClinicalTest == undefined;
                        this.nameOfClinicalTestIds = [];
                    }
                    else {
                        if (this.nameOfClinicalTestIds != null && this.nameOfClinicalTestIds.length > 0) {
                            this.clinicalTestDetails = [];
                            for (var i = 0; i < this.nameOfClinicalTestIds.length; i++) {
                                var testId = {};
                                var t = this.nameOfClinicalTestIds[i].lovDtlId;
                                testId.clinicalTest = Number(t);
                                this.clinicalTestDetails.push(testId);
                            }
                            if (this.clinicalTestDetails.length > 0) {
                                claimData.healthFamilyDetails.clinicalTestDetails = this.clinicalTestDetails;
                            }
                        }
                    }
                }
                if (!this.viewSelf) {
                    claimData.healthFamilyDetails.loeFromDate = undefined;
                    claimData.healthFamilyDetails.loeToDate = undefined;
                }
                this.healthAttachmentList.push(this.healthOriginalVoucher);
                this.healthAttachmentList.push(this.healthSelfAttached);
                if (this.healthDischargeCertificate.fileName != undefined) {
                    this.healthAttachmentList.push(this.healthDischargeCertificate);
                }
                if (this.healthExpensesSheet.fileName != undefined) {
                    this.healthAttachmentList.push(this.healthExpensesSheet);
                }
                if (this.enableReasonForDelaySubmissionInHealth) {
                    this.healthAttachmentList.push(this.healthCondolationCertificate);
                }
                claimData.healthFamilyDetails.attachmentDTOList = this.healthAttachmentList;
            }
            if (this.claim.reasonForApply == 16 || this.claim.reasonForApply == 17) {
                if (this.benficiaryNominee != null && this.benficiaryNominee.length > 0) {
                    for (var i = 0; i < this.benficiaryNominee.length; i++) {
                        if ((this.benficiaryNominee[i].benNomineeBankAccNo == null || this.benficiaryNominee[i].benNomineeBankAccNo == undefined) && (this.benficiaryNominee[i].benNomineeBankIfscCode == null || this.benficiaryNominee[i].benNomineeBankIfscCode == undefined)) {
                            var exp = {};
                            exp.exceptionText = "bank details does not exists for nominee";
                            exp.exceptionCapturedDate = new Date();
                            exp.raisedBy = this.user.user.deptUserid;
                            this.educationClaimExceptionDetails.push(exp);
                            this.healthClaimExceptionDetails.push(exp);
                        }
                    }
                    //Nominee Details
                    var nominee = this.benficiaryNominee.find(function (x) { return x.benNomineeSno == claimData.nomineeId; });
                    if (nominee != null) {
                        claimData.nomineeName = nominee.benNomineeName;
                        //claimData.nomineeContact
                        claimData.nomineeDOB = nominee.dob;
                        claimData.nomineeBankAccount = nominee.benNomineeBankAccNo;
                        claimData.nomineeIFSCCode = nominee.benNomineeBankIfscCode;
                        claimData.nomineeRelationwithBen = nominee.relationshipID;
                    }
                }
            }
            if (this.claim.disabilityDetails != null) {
                this.disabilityClaimExceptionDetails = [];
                claimData.disabilityDetails.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability;
                claimData.disabilityDetails.statusId = this.ClaimStatusId;
                claimData.disabilityDetails.createdBy = this.user.user.deptUserid;
                claimData.disabilityDetails.claimAmount = this.disableEligibility;
                this.disabilityAttachmentList.push(this.disabilityCertificate);
                if (this.enableReasonForDelaySubmission) {
                    this.disabilityAttachmentList.push(this.condolationCertificate);
                }
                claimData.disabilityDetails.attachmentDTOList = this.disabilityAttachmentList;
                //Disability Exceptions
                //Exception Rule - Selected Other Nature Of Disability
                //let data = this.beneficiaryAppliedDisabilities.find(x => x == this.claim.disabilityDetails.natureOfDisability);
                //if (data == undefined) {
                if (this.beneficiaryAppliedDisabilities.length > 0) {
                    var exp = {};
                    exp.exceptionText = "Beneficiary applied another nature of disability";
                    exp.exceptionCapturedDate = new Date();
                    exp.raisedBy = this.user.user.deptUserid;
                    this.disabilityClaimExceptionDetails.push(exp);
                    //alert("Claim has been already submitted with this nature of disability");
                    //return;
                }
                //Exception Rule - if(Currentdate-dateofRelease >90)
                if (this.claim.disabilityDetails.dateofRelease != null && this.claim.disabilityDetails.dateofRelease != undefined) {
                    var date1 = new Date(this.claim.disabilityDetails.dateofRelease);
                    var date2 = new Date(Date.now());
                    var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                    var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                    if (this.disabilityBenefitConfigDetails != null && this.disabilityBenefitConfigDetails.length > 0) {
                        var disBenefit = this.disabilityBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "DateOfReleaseExceeding" /* DateOfReleaseExceeding */.toLowerCase(); });
                        if (disBenefit != null) {
                            var cond = eval(diffDays + disBenefit.logic + disBenefit.value);
                            if (cond) {
                                //if (diffDays > 90) {
                                var exp = {};
                                exp.exceptionText = "Date of release from hospital/Accident date exceeding 90 days";
                                exp.exceptionCapturedDate = new Date();
                                exp.raisedBy = this.user.user.deptUserid;
                                this.disabilityClaimExceptionDetails.push(exp);
                            }
                        }
                    }
                }
            }
            if (this.claim.deathDetails != null) {
                this.deathClaimExceptionDetails = [];
                claimData.deathDetails.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Death;
                claimData.deathDetails.statusId = this.ClaimStatusId;
                claimData.deathDetails.createdBy = this.user.user.deptUserid;
                claimData.deathDetails.claimAmount = this.deathEligibility;
                this.deathAttachmentList.push(this.deathCertificate);
                this.deathAttachmentList.push(this.bankPassbook);
                claimData.deathDetails.attachmentDTOList = this.deathAttachmentList;
                //Death Exceptions
                //Exception Rule - if(Currentdate-dateofDeath >90)
                if (this.claim.deathDetails.dateofDeath != null && this.claim.deathDetails.dateofDeath != undefined) {
                    var date1 = new Date(this.claim.deathDetails.dateofDeath);
                    var date2 = new Date(Date.now());
                    var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                    var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                    if (this.deathBenefitConfigDetails != null && this.deathBenefitConfigDetails.length > 0) {
                        var deaBenefit = this.deathBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "DateofDeathExceeding" /* DateofDeathExceeding */.toLowerCase(); });
                        if (deaBenefit != null) {
                            var cond = eval(diffDays + deaBenefit.logic + deaBenefit.value);
                            if (cond) {
                                //if (diffDays > 90) {
                                var exp = {};
                                exp.exceptionText = "Date of Death exceeding 90 days";
                                exp.exceptionCapturedDate = new Date();
                                exp.raisedBy = this.user.user.deptUserid;
                                this.deathClaimExceptionDetails.push(exp);
                            }
                        }
                    }
                }
            }
            if (this.claim.providentFundDetails != null) {
                //claimData.providentFundDetails.pFNO = this.beneficiary.regNumber;
                claimData.providentFundDetails.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].PF;
                claimData.providentFundDetails.statusId = this.ClaimStatusId;
                claimData.providentFundDetails.createdBy = this.user.user.deptUserid;
                claimData.providentFundDetails.nomineeId = this.claim.nomineeId;
                claimData.providentFundDetails.maturityDate = this.benMaturityDate;
                claimData.providentFundDetails.lockingPeriodDate = this.pfLockingPeriod;
                if (this.beneficiaryPFAccountDetails != null && (this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != null && this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != "")) {
                    claimData.providentFundDetails.pFNO = this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO;
                }
                else {
                    claimData.providentFundDetails.pFNO = this.beneficiary.regNumber;
                }
                if (this.claim.reasonForApply == 16) {
                    //share = this.benficiaryNominee.find(n => n.benNomineeSno == this.claim.nomineeId).benNomineeSharePercentage;
                    //if(share == 0)
                    claimData.providentFundDetails.claimAmount = this.benNomineeShareAmount;
                }
                else
                    claimData.providentFundDetails.claimAmount = this.pfClaimAmount;
                //PF Exceptions
                if (this.benficiaryNominee.length > 1) {
                    for (var i = 0; i < this.benficiaryNominee.length; i++) {
                        if (this.benficiaryNominee[i].benNomineeSharePercentage == 0) {
                            hasNomineeShare = false;
                            break;
                        }
                    }
                    if (hasNomineeShare == false) {
                        var exp = {};
                        exp.exceptionText = "Nominees doesn't have share allocation";
                        exp.exceptionCapturedDate = new Date();
                        exp.raisedBy = this.user.user.deptUserid;
                        this.pfClaimExceptionDetails.push(exp);
                    }
                }
            }
            //16-On Death of Beneficiary / On Request of Nominee
            //17-On Disability of Beneficiary
            //18-On Request of Beneficiary
            if (this.claim.reasonForApply == 17 || this.claim.reasonForApply == 18) {
                if (this.beneficiary.benRegDate != null && this.beneficiary.benRegDate != undefined) {
                    debugger;
                    var benregDate = new Date(this.beneficiary.benRegDate);
                    var todayDate = new Date();
                    var diffYears = todayDate.getFullYear() - benregDate.getFullYear();
                    var m = todayDate.getMonth() - benregDate.getMonth();
                    if (m < 0 || (m === 0 && todayDate.getDate() < benregDate.getDate())) {
                        diffYears--;
                    }
                    if (diffYears < 1) {
                        var exp = {};
                        exp.exceptionText = "Beneficiary has not completed one year of registration";
                        exp.exceptionCapturedDate = new Date();
                        exp.raisedBy = this.user.user.deptUserid;
                        this.healthClaimExceptionDetails.push(exp);
                        this.educationClaimExceptionDetails.push(exp);
                        this.disabilityClaimExceptionDetails.push(exp);
                        this.deathClaimExceptionDetails.push(exp);
                    }
                }
                //--------------------
                debugger;
                if ((this.beneficiary.benBankAccNo == undefined || this.beneficiary.benBankAccNo == null || this.beneficiary.benBankAccNo == "")) {
                    var exp = {};
                    exp.exceptionText = "Benificiary does not have bank account number";
                    exp.exceptionCapturedDate = new Date();
                    exp.raisedBy = this.user.user.deptUserid;
                    this.healthClaimExceptionDetails.push(exp);
                    this.educationClaimExceptionDetails.push(exp);
                    this.disabilityClaimExceptionDetails.push(exp);
                    this.deathClaimExceptionDetails.push(exp);
                    this.pfClaimExceptionDetails.push(exp);
                }
                else {
                    if (this.beneficiary.isAssignedMultiple) {
                        var exp = {};
                        exp.exceptionText = "Bank account number assigned to the multiple beneficiaries";
                        exp.exceptionCapturedDate = new Date();
                        exp.raisedBy = this.user.user.deptUserid;
                        this.healthClaimExceptionDetails.push(exp);
                        this.educationClaimExceptionDetails.push(exp);
                        this.disabilityClaimExceptionDetails.push(exp);
                        this.deathClaimExceptionDetails.push(exp);
                        this.pfClaimExceptionDetails.push(exp);
                    }
                }
            }
            if (type != 1) {
                if (this.claim.educationDetails != null && this.educationClaimExceptionDetails.length > 0) {
                    claimData.educationDetails.educationClaimExceptionDetails = this.educationClaimExceptionDetails;
                }
                if (this.claim.healthFamilyDetails != null && this.healthClaimExceptionDetails.length > 0) {
                    claimData.healthFamilyDetails.healthClaimExceptionDetails = this.healthClaimExceptionDetails;
                }
                if (this.claim.disabilityDetails != null && this.disabilityClaimExceptionDetails.length > 0) {
                    claimData.disabilityDetails.disabilityClaimExceptionDetails = this.disabilityClaimExceptionDetails;
                }
                if (this.claim.deathDetails != null && this.deathClaimExceptionDetails.length > 0) {
                    claimData.deathDetails.deathClaimExceptionDetails = this.deathClaimExceptionDetails;
                }
                if (this.claim.providentFundDetails != null && this.pfClaimExceptionDetails.length > 0) {
                    claimData.providentFundDetails.pfClaimExceptionDetails = this.pfClaimExceptionDetails;
                }
            }
            claimData.StatusId = this.ClaimStatusId;
            claimData.CreatedBy = this.user.user.deptUserid;
            this.saveType = type;
            this.successMessage = "";
            console.log(claimData);
            if (this.claimId > 0) {
                if (confirm("Are you sure to proceed ")) {
                    this.dataService
                        .updateClaim(claimData)
                        .then(function (data) {
                        if (data) {
                            if (type == 1) {
                                _this.mode = "draft";
                                _this.successMessage = "Your claim was updated successfully";
                            }
                            else {
                                var refNo = void 0;
                                if (_this.viewHealth) {
                                    refNo = data.item2 + " (Health & Family) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item2 + " (Health & Family) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewDisability) {
                                    refNo = data.item4 + " (Disability) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item4 + " (Disability) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewDeath) {
                                    refNo = data.item5 + " (Death) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item4 + " (Death) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewPf) {
                                    refNo = data.item1 + " (PF) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item1 + " (PF) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewEducation) {
                                    if (refNo == undefined) {
                                        refNo = data.item3 + " (Education) ";
                                        _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item3 + " (Education) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                    }
                                    else {
                                        _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item3 + "(Education) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                        refNo = " (PF) " + data.item1 + " , " + " (Health & Family) " + data.item2 + " , " + " (Education) " + data.item3 + " , " + " (Disability) " + data.item4 + " , " + " (Death) " + data.item4;
                                    }
                                }
                            }
                            _this.successModal.show();
                        }
                        else {
                            _this.successMessage = "Invalid transaction";
                            _this.successModal.show();
                        }
                    });
                }
            }
            else {
                if (confirm("Are you sure to proceed ")) {
                    this.dataService
                        .createClaim(claimData)
                        .then(function (data) {
                        if (data) {
                            if (type == 1) {
                                _this.mode = "draft";
                                _this.successMessage = "Your claim was saved successfully";
                            }
                            else {
                                var refNo = void 0;
                                if (_this.viewHealth) {
                                    refNo = data.item2 + " (Health & Family) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item2 + " (Health & Family) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewDisability) {
                                    refNo = data.item4 + " (Disability) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item4 + " (Disability) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewDeath) {
                                    refNo = data.item5 + " (Death) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item4 + " (Death) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewPf) {
                                    refNo = data.item1 + " (PF) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item1 + " (PF) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewEducation) {
                                    if (refNo == undefined) {
                                        refNo = data.item3 + " (Education) ";
                                        _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item3 + " (Education) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                    }
                                    else {
                                        _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item3 + "(Education) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                        refNo = " (PF) " + data.item1 + " , " + " (Health & Family) " + data.item2 + " , " + " (Education) " + data.item3 + " , " + " (Disability) " + data.item4 + " , " + " (Death) " + data.item4;
                                    }
                                }
                            }
                            _this.successModal.show();
                        }
                        else {
                            _this.successMessage = "Invalid transaction";
                            _this.successModal.show();
                        }
                    });
                }
            }
        }
        else {
            return;
        }
    };
    AgentClaimEntryComponent.prototype.claerClaim = function () {
        this.isRegistrationNo = false;
        this.isCAFUpdated = false;
        this.isHFSubmitted = this.isEduSubmitted = this.isBenNomineeSubmittedClaim = this.isBenNomineeSubmittedPFClaim = this.isBenDeath = false;
        //this.deathCheckBox = this.pfCheckBox = this.healthCheckBox = this.educationCheckBox = false;
        this.typeOfClaimValid = this.dateofAppointment = this.hospital = this.hospitalization = this.dateofAdmin = this.dateofDischargeValid = this.claimForValid = this.familyMember = this.hospitalselfAttested = this.dischargeCertificate = this.rigisterESI = this.loeFromDate = this.loeToDate = this.healthCondolationCertificateUploaded = true; //this.originalVoucher =
        this.restrictSave = false;
        this.viewEducation = false;
        this.disableEdu = false;
        this.noDependents = false;
        this.uplaodmain = this.uploadselfattestedValid = this.uploadNonMarriageValid = this.uploadCertificatetValid = this.educationCheck = true;
        this.claim = {};
        this.educationDetailsArray = [];
        this.viewEducation = false;
        this.viewHealth = false;
        this.viewDeath = false;
        this.viewDisability = false;
        this.viewPf = false;
        this.rowIndex = -1;
        this.ssin = "";
        this.eduCount = 0;
        this.rowEligibleAmount = 0;
        this.educationDetailsArray = [];
        this.healthOriginalVoucher = {};
        this.healthSelfAttached = {};
        this.healthDischargeCertificate = {};
        this.healthExpensesSheet = {};
        this.healthAttachmentList = [];
        this.mainUploadList = [];
        this.educertificates = [];
        this.eduNonMarriage = [];
        this.eduSelfAttested = [];
        this.disabilityAttachmentList = [];
        this.disabilityCertificate = {};
        this.deathAttachmentList = [];
        this.deathCertificate = {};
        this.claim.healthFamilyDetails = {};
        this.claim.educationDetails.isanyothersourceofthegovernment = false;
        this.disabilityCertificateUploaded = this.natureOfDisability = this.dateofrelease1 = this.isDeathorpermanent1 = this.isDeathorpermanent2 = this.isDeathorpermanent3 = this.checkNatureOfDisability = this.condolationCertificateUploaded = true;
        this.natureOfDeath = this.dateofDeath = this.deathCertificateUploaded = this.isDeath1 = this.isDeath2 = this.isDeath3 = this.placeOfDeathValid = this.bankPassbookUploaded = true;
        this.condolationCertificate = {};
        this.healthCondolationCertificate = {};
        this.pfTypeOfClaimValid = true;
        this.viewDeathFieldsAndNominee = false;
        if (this.claim.claimId == undefined) {
            this.claim = {};
            this.claim.healthFamilyDetails = {};
            this.claim.educationDetails = {};
            this.claim.educationDetails.educationDetailList = [];
        }
        else {
            this.getClaimDetailsByClaimId(this.claimId);
        }
    };
    AgentClaimEntryComponent.prototype.UpdateClaimStatusIdByStatus = function (type) {
        debugger;
        if (type == 1)
            this.ClaimStatusId = 1;
        else {
            if (this.claimStatus < 5)
                this.ClaimStatusId = 2;
            else if (this.claimStatus == 5)
                this.ClaimStatusId = 4;
            else if (this.claimStatus == 6 || this.claimStatus == 10)
                this.ClaimStatusId = 8;
            else if (this.claimStatus == 9 || this.claimStatus == 13)
                this.ClaimStatusId = 12;
        }
    };
    AgentClaimEntryComponent.prototype.loeFromDateChange = function (eve) {
        //alert(this.claim.healthFamilyDetails.loeFromDate);
        this.minLOEDate = new Date(this.claim.healthFamilyDetails.loeFromDate);
        this.isLOEToDate = false;
    };
    AgentClaimEntryComponent.prototype.loeToDateChange = function (eve) {
        this.calculateLossOfEmploymentAmount();
    };
    AgentClaimEntryComponent.prototype.dateofadminchange = function (eve) {
        this.disableDischarge = false;
        if (eve != null) {
            if (!this.isClaimEdit) {
                this.claim.healthFamilyDetails.dischargeDate = null;
                this.claim.healthFamilyDetails.loeToDate = null;
            }
            else {
                this.isClaimEdit = false;
            }
        }
        this.dischargeMinDt = eve;
        this.lossOfEmploymentAmount = 0;
        if (this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
            this.claim.healthFamilyDetails.loeFromDate = eve;
            this.lossOfEmploymentAmount = this.calculateLossOfEmploymentAmount();
        }
    };
    AgentClaimEntryComponent.prototype.dateofdischargechange = function (eve) {
        this.lossOfEmploymentAmount = 0;
        if (this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
            this.claim.healthFamilyDetails.loeToDate = eve;
            this.lossOfEmploymentAmount = this.calculateLossOfEmploymentAmount();
        }
        if (eve != null) {
            if (!this.isHealthClaimEdit) {
                var date1 = new Date(eve);
                var date2 = new Date(Date.now());
                var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                if (this.healthFamilyBenefitConfigDetails != null && this.healthFamilyBenefitConfigDetails.length > 0) {
                    var helBenefit = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "ReasonForDelaySubmission" /* ReasonForDelaySubmission */.toLowerCase(); });
                    if (helBenefit != null) {
                        var cond = eval(diffDays + helBenefit.logic + helBenefit.value);
                        if (cond) {
                            this.enableReasonForDelaySubmissionInHealth = true;
                        }
                        else {
                            this.claim.healthFamilyDetails.reasonForDelaySubmission = null;
                            this.healthCondolationCertificate = null;
                            this.enableReasonForDelaySubmissionInHealth = false;
                        }
                    }
                }
                //if (diffDays > 90) {
                //    this.enableReasonForDelaySubmissionInHealth = true;
                //}
                //else {
                //    this.claim.healthFamilyDetails.reasonForDelaySubmission = null;
                //    this.healthCondolationCertificate = null;
                //    this.enableReasonForDelaySubmissionInHealth = false;
                //}
            }
            else {
                this.isHealthClaimEdit = false;
                if (this.claim.healthFamilyDetails.reasonForDelaySubmission != undefined || this.claim.healthFamilyDetails.reasonForDelaySubmission != null)
                    this.enableReasonForDelaySubmissionInHealth = true;
                else
                    this.enableReasonForDelaySubmissionInHealth = false;
            }
        }
    };
    AgentClaimEntryComponent.prototype.calculateLossOfEmploymentAmount = function () {
        debugger;
        var calculatedAmount = 0;
        if (this.healthFamilyBenefitConfigDetails != null && this.healthFamilyBenefitConfigDetails.length > 0) {
            if (this.claim.healthFamilyDetails.claimFor != undefined && this.claim.healthFamilyDetails.claimFor == 5) {
                if (this.claim.healthFamilyDetails.claimFor != undefined && this.claim.healthFamilyDetails.typeOfHospitalization != 2) {
                    if (this.claim.healthFamilyDetails.loeFromDate != undefined && this.claim.healthFamilyDetails.loeToDate != undefined) {
                        var date1 = new Date(this.claim.healthFamilyDetails.loeFromDate);
                        var date2 = new Date(this.claim.healthFamilyDetails.loeToDate);
                        var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                        if (diffDays != NaN) {
                            diffDays += 1;
                            //-----------------------
                            var helBenefit = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "LossOfEmploymentDateDiffernce" /* LossOfEmploymentDateDiffernce */.toLowerCase(); });
                            if (helBenefit != null) {
                                var cond = eval(diffDays + helBenefit.logic + helBenefit.value);
                                if (cond) {
                                    calculatedAmount = 0;
                                    this.viewLOEAmount = false;
                                    this.viewSelf = false;
                                }
                                else {
                                    if (diffDays > Number(helBenefit.value))
                                        calculatedAmount = (200 * Number(helBenefit.value)) + ((diffDays - Number(helBenefit.value)) * 100); //calculatedAmount = (200 * 5) + ((diffDays - 5) * 100);
                                    else
                                        calculatedAmount = diffDays * 200; //calculatedAmount = diffDays * 200;
                                    this.viewSelf = true;
                                    this.viewLOEAmount = true;
                                }
                            }
                            //if (diffDays <= 5) {
                            //    //calculatedAmount = diffDays * 200;
                            //    this.viewLOEAmount = false;
                            //}
                            //else {
                            //    this.viewLOEAmount = true;
                            //    calculatedAmount = (200 * 5) + ((diffDays - 5) * 100);
                            //}
                        }
                    }
                    var helBenefit2 = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "LossOfEmploymentAmountExceeding" /* LossOfEmploymentAmountExceeding */.toLowerCase(); });
                    if (helBenefit2 != null) {
                        var cond2 = eval(calculatedAmount + helBenefit2.logic + helBenefit2.value);
                        if (cond2) {
                            calculatedAmount = 10000;
                        }
                    }
                }
            }
        }
        //if (calculatedAmount > 10000) { calculatedAmount = 10000; }
        return calculatedAmount;
    };
    AgentClaimEntryComponent.prototype.checkAll = function (e, item) {
        if (e.target.checked) {
            this.result.filter(function (x) { return x.name == item; })[0].values.forEach(function (item) {
                item.isChecked = true;
            });
        }
        else {
            this.result.filter(function (x) { return x.name == item; })[0].values.forEach(function (item) {
                item.isChecked = false;
            });
        }
    };
    AgentClaimEntryComponent.prototype.submitClick = function () {
        this.selectedPackages = [];
        for (var i = 0; i < this.result.length; i++) {
            for (var j = 0; j < this.result[i].values.length; j++) {
                if (this.result[i].values[j].isChecked) {
                    this.selectedPackages.push(this.result[i].values[j]);
                }
            }
        }
        this.packageModal.hide();
    };
    AgentClaimEntryComponent.prototype.checkIfAllSelected = function (item) {
    };
    AgentClaimEntryComponent.prototype.viewPackages = function () {
        this.packageModal.show();
    };
    AgentClaimEntryComponent.prototype.getPackages = function () {
        var _this = this;
        this.dataService
            .getPackages()
            .subscribe(function (data) {
            _this.packages = data;
            console.log(_this.packages);
            var groups = new Set(_this.packages.map(function (item) { return item.ailmentName; }));
            _this.result = [];
            groups.forEach(function (g) {
                return _this.result.push({
                    name: g,
                    values: _this.packages.filter(function (i) { return i.ailmentName === g; })
                });
            });
        });
    };
    AgentClaimEntryComponent.prototype.isBenNomineeClaimSubmitted = function (id) {
        var _this = this;
        this.dataService
            .isBenNomineeClaimSubmitted(id)
            .subscribe(function (data) {
            _this.isBenNomineeSubmittedClaim = data;
            if (_this.isBenNomineeSubmittedClaim) {
                _this.disablePFCheckbox = _this.disableHealthCheckbox = _this.disableDisabilityCheckbox = _this.disableDeathCheckbox = _this.disableEducationCheckbox = true;
            }
        });
    };
    AgentClaimEntryComponent.prototype.isSameBenNomineeClaimSubmitted = function (id, nomineeId, claimType, eve) {
        var _this = this;
        this.dataService
            .isSameBenNomineeClaimSubmitted(id, nomineeId, claimType)
            .subscribe(function (data) {
            if (claimType == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Death) {
                _this.isBenNomineeSubmittedClaim = data;
                if (_this.isBenNomineeSubmittedClaim) {
                    _this.viewDeath = false;
                    //this.deathCheckBox = false;
                    eve.target.checked = false;
                    _this.disableDeathCheckbox = true;
                }
                else {
                    //this.deathCheckBox = !this.viewDeath;
                    _this.viewDeath = !_this.viewDeath;
                }
            }
            else if (claimType == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].PF) {
                _this.isBenNomineeSubmittedPFClaim = data;
                if (_this.isBenNomineeSubmittedPFClaim) {
                    _this.viewPf = false;
                    //this.pfCheckBox = false;
                    eve.target.checked = false;
                    _this.disablePFCheckbox = true;
                }
                else {
                    _this.pfCode();
                }
            }
        });
    };
    AgentClaimEntryComponent.prototype.getNomineeClaimEntryValidation = function (id, claimType, eve) {
        var _this = this;
        this.dataService
            .getNomineeClaimEntryValidation(id)
            .subscribe(function (data) {
            if (data) {
                var healthCount = data.item1;
                var eduCount = data.item2;
                //health Check box
                if (claimType == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily) {
                    if (healthCount > 0) {
                        _this.isHFSubmitted = false;
                        _this.disableHealthCheckbox = false;
                        _this.healthCode();
                    }
                    else {
                        _this.isHFSubmitted = true;
                        _this.disableHealthCheckbox = true;
                        //this.healthCheckBox = false;
                        eve.target.checked = false;
                    }
                }
                //Education Check box
                if (claimType == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education) {
                    if (eduCount > 0) {
                        _this.isEduSubmitted = false;
                        _this.disableEducationCheckbox = false;
                        _this.educationCode(eve);
                    }
                    else {
                        _this.isEduSubmitted = true;
                        _this.disableEducationCheckbox = true;
                        //this.educationCheckBox = false;
                        eve.target.checked = false;
                    }
                }
            }
        });
    };
    AgentClaimEntryComponent.prototype.disabilityDateofReleaseChange = function (eve) {
        if (eve != null) {
            if (!this.isDisabilityClaimEdit) {
                var date1 = new Date(eve);
                var date2 = new Date(Date.now());
                var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                if (this.disabilityBenefitConfigDetails != null && this.disabilityBenefitConfigDetails.length > 0) {
                    var disBenefit = this.disabilityBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "ReasonForDelaySubmission" /* ReasonForDelaySubmission */.toLowerCase(); });
                    if (disBenefit != null) {
                        var cond = eval(diffDays + disBenefit.logic + disBenefit.value);
                        if (cond) {
                            // if (diffDays > 90) {
                            this.enableReasonForDelaySubmission = true;
                        }
                        else {
                            this.claim.disabilityDetails.reasonForDelaySubmission = null;
                            this.condolationCertificate = null;
                            this.enableReasonForDelaySubmission = false;
                        }
                    }
                }
            }
            else {
                this.isDisabilityClaimEdit = false;
                if (this.claim.disabilityDetails.reasonForDelaySubmission != undefined || this.claim.disabilityDetails.reasonForDelaySubmission != null)
                    this.enableReasonForDelaySubmission = true;
                else
                    this.enableReasonForDelaySubmission = false;
            }
        }
    };
    AgentClaimEntryComponent.prototype.getDisabilityBenefitConfigurationDetails = function () {
        var _this = this;
        this.dataService
            .getBenefitConfigurationDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability)
            .subscribe(function (data) {
            _this.disabilityBenefitConfigDetails = data;
        });
    };
    AgentClaimEntryComponent.prototype.getHealthFamilyBenefitConfigurationDetails = function () {
        var _this = this;
        this.dataService
            .getBenefitConfigurationDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily)
            .subscribe(function (data) {
            _this.healthFamilyBenefitConfigDetails = data;
        });
    };
    AgentClaimEntryComponent.prototype.getEducationBenefitConfigurationDetails = function () {
        var _this = this;
        this.dataService
            .getBenefitConfigurationDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education)
            .subscribe(function (data) {
            _this.educationBenefitConfigDetails = data;
        });
    };
    AgentClaimEntryComponent.prototype.getDeathBenefitConfigurationDetails = function () {
        var _this = this;
        this.dataService
            .getBenefitConfigurationDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education)
            .subscribe(function (data) {
            _this.deathBenefitConfigDetails = data;
        });
    };
    AgentClaimEntryComponent.prototype.getPFBenefitConfigurationDetails = function () {
        var _this = this;
        this.dataService
            .getPFConfigurationDetails(0)
            .subscribe(function (data) {
            _this.pfBenefitConfigDetails = data;
        });
    };
    AgentClaimEntryComponent.prototype.deleteClaimExceptions = function (id) {
        this.dataService
            .deleteClaimExceptions(id)
            .subscribe(function (data) { });
    };
    AgentClaimEntryComponent.prototype.radioChange = function (id) {
        if (id == 1)
            this.isRegistrationNo = false;
        if (id == 2)
            this.isRegistrationNo = true;
    };
    AgentClaimEntryComponent.prototype.updateCAFDetails = function () {
        var _this = this;
        if (this.isRegistrationNo)
            window.location.href = "/Registration/DeathclaimFrom?ID=" + this.ssin;
        else {
            this.dataService
                .getRegistrationNumber(this.ssin)
                .subscribe(function (data) {
                debugger;
                if (data)
                    window.location.href = "/Registration/DeathclaimFrom?ID=" + data;
                else
                    window.location.href = "/Registration/DeathclaimFrom?ID=" + _this.ssin;
            });
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('lgModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_1__["ModalDirective"])
    ], AgentClaimEntryComponent.prototype, "lgModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('packageModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_1__["ModalDirective"])
    ], AgentClaimEntryComponent.prototype, "packageModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_1__["ModalDirective"])
    ], AgentClaimEntryComponent.prototype, "successModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('pdfModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_1__["ModalDirective"])
    ], AgentClaimEntryComponent.prototype, "pdfModal", void 0);
    AgentClaimEntryComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-agent-claim-entry',
            template: __webpack_require__(/*! ./agent-claim-entry.component.html */ "./src/app/claim/agent-claim-entry/agent-claim-entry.component.html"),
            styles: [__webpack_require__(/*! ./agent-claim-entry.component.css */ "./src/app/claim/agent-claim-entry/agent-claim-entry.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_5__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_4__["UserService"]])
    ], AgentClaimEntryComponent);
    return AgentClaimEntryComponent;
}());



/***/ }),

/***/ "./src/app/claim/agent-claims/agent-claims.component.css":
/*!***************************************************************!*\
  !*** ./src/app/claim/agent-claims/agent-claims.component.css ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/agent-claims/agent-claims.component.html":
/*!****************************************************************!*\
  !*** ./src/app/claim/agent-claims/agent-claims.component.html ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>Claim Status</h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <!--<div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>-->\r\n                        <div class=\"ssv-search\">\r\n                            <input type=\"text\" [(ngModel)]=\"ssinSearchText\" placeholder=\"SSIN Search..\" class=\"advancedSearchTextbox\" NumbersOnly>\r\n                            <input type=\"text\" [(ngModel)]=\"claimReferenceNoText\" placeholder=\"Claim Reference No Search..\" class=\"advancedSearchTextbox\" NumbersOnly minlength=\"12\" maxlength=\"12\">\r\n                            <button (click)=\"GetResults()\"><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n                        <p></p>\r\n\r\n                        <table class=\"table table-striped\" [mfData]=\"claimsData\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"ssin\">SSIN</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"benName\">Beneficiary Name</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimRefernceNo\">Claim Reference No</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"submittedDate\">Submission Date</mfDefaultSorter>\r\n                                    </th>\r\n\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimAmount\">Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"statusName\">Status</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"lastActionDateString\">Last Action</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let claims of mf.data|grdFilter: {ssin:searchText, claimRefernceNo: searchText,benName:searchText,submittedDateString: searchText, claimAmount: searchText, claimType: searchText,\r\n           statusName: searchText, lastActionDateString: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <a (click)=\"onEditClaimClick(claims)\" *ngIf=\"claims.isEdit\" title=\"Edit\" class=\"txt-color-red\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n\r\n                                        <a (click)=\"onViewClaimClick(claims)\" *ngIf=\"!claims.isEdit\" title=\"View\" class=\"txt-color-red\"><i class=\"fa fa-eye\"></i></a>\r\n                                        <a (click)=\"downloadRecept(claims)\" title=\"Receipt\" class=\"txt-color-red\"><i class=\"fa fa-file-pdf-o\"></i></a>\r\n                                        <a (click)=\"onTrackClaimClick(claims)\" title=\"Track\" class=\"txt-color-red\"><i class=\"fa fa-recycle\"></i></a>\r\n                                    </td>\r\n                                    <td>{{claims.ssin}}</td>\r\n                                    <td>{{claims.benName}}</td>\r\n                                    <td>{{claims.claimRefernceNo}}</td>\r\n                                    <td>{{claims.submittedDateString }}</td>\r\n                                    <td>{{claims.claimAmount}}</td>\r\n                                    <td>{{claims.statusName}}</td>\r\n                                    <td>{{claims.lastActionDateString}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n\r\n\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"9\">\r\n                                        <div *ngIf=\"claimsData.length>0\">\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                            <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</section>"

/***/ }),

/***/ "./src/app/claim/agent-claims/agent-claims.component.ts":
/*!**************************************************************!*\
  !*** ./src/app/claim/agent-claims/agent-claims.component.ts ***!
  \**************************************************************/
/*! exports provided: AgentClaimsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgentClaimsComponent", function() { return AgentClaimsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var AgentClaimsComponent = /** @class */ (function () {
    function AgentClaimsComponent(router, dataService, userService) {
        this.router = router;
        this.dataService = dataService;
        this.userService = userService;
        this.claimsData = [];
        this.p = 1;
        this.order = 'description';
        this.reverse = false;
        //Paging props start
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
    }
    AgentClaimsComponent.prototype.setOrder = function (value) {
        if (this.order === value) {
            this.reverse = !this.reverse;
        }
    };
    AgentClaimsComponent.prototype.ngOnInit = function () {
        if (this.userService.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["UserType"].CA.toString())
            this.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].CA;
        else if (this.userService.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["UserType"].Lwfc.toString())
            this.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Lwfc;
        else
            this.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Agent;
        this.getClaimsByAgentID(this.userService.user.deptUserid, this.entryPoint, "0", "0", this.page, this.pageSize);
    };
    AgentClaimsComponent.prototype.onChangePage = function (pageOfItems) {
        // update current page of items
        this.pageOfItems = pageOfItems;
    };
    AgentClaimsComponent.prototype.getClaimsByAgentID = function (id, entrypoint, ssin, claimRefNo, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getAllClaimsByAgent(id, entrypoint, ssin, claimRefNo, pageNo, pageSize)
            .subscribe(function (data) {
            _this.claimsData = data.results;
            _this.totalRows = data.rowCount;
        });
    };
    AgentClaimsComponent.prototype.getDate = function (datestring) {
        return new Date(datestring).toLocaleDateString();
    };
    AgentClaimsComponent.prototype.trackClaim = function (item) {
        this.router.navigate(['claim/ClaimTrack'], { skipLocationChange: true });
    };
    AgentClaimsComponent.prototype.onEditClaimClick = function (item) {
        this.router.navigate(['claim/agentclaimentry', { claimId: item.claimId, mode: "claim", claimStatus: item.statusId, tranctionType: item.claimType }], { skipLocationChange: true });
    };
    AgentClaimsComponent.prototype.onViewClaimClick = function (item) {
        this.router.navigate(['claim/ClaimView', { claimId: item.claimId, tranctionType: item.claimType, transactionId: item.transactionId, mode: "claim", workflowId: _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["WorkflowTrans"].workflow }], { skipLocationChange: true });
    };
    AgentClaimsComponent.prototype.onTrackClaimClick = function (item) {
        this.router.navigate(['claim/ClaimTrack', { transactionId: item.transactionId, tranctionType: item.claimType, mode: "claim", workflowId: _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["WorkflowTrans"].workflow }], { skipLocationChange: true });
    };
    AgentClaimsComponent.prototype.getTypeName = function (claimType) {
        if (_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["ClaimConstants"][claimType] == 2) {
            return "Health & Family";
        }
        return claimType;
    };
    AgentClaimsComponent.prototype.downloadRecept = function (claim) {
        this.dataService
            .downloadReceipt(claim.benName, claim.ssin, claim.claimRefernceNo, claim.claimAmount, this.getTypeName(claim.claimType))
            .then(function (data) {
            var dd = data;
            var url = window.URL.createObjectURL(data);
            window.open(url);
        });
    };
    AgentClaimsComponent.prototype.changepage = function (page) {
        this.getClaimsByAgentID(this.userService.user.deptUserid, this.entryPoint, "0", "0", this.page, this.pageSize);
    };
    AgentClaimsComponent.prototype.GetResults = function () {
        if ((this.ssinSearchText != null && this.ssinSearchText != undefined) || (this.claimReferenceNoText != null && this.claimReferenceNoText != undefined)) {
            if (this.ssinSearchText != null && this.ssinSearchText != undefined && this.ssinSearchText != "")
                this.strSSIN = this.ssinSearchText.trim();
            else
                this.strSSIN = "0";
            if (this.claimReferenceNoText != null && this.claimReferenceNoText != undefined && this.claimReferenceNoText != "")
                this.strClaimRefNo = this.claimReferenceNoText.trim();
            else
                this.strClaimRefNo = "0";
            //this.dataService
            //    .getSearchAllClaimsByAgent(this.userService.user.deptUserid, this.entryPoint, this.strSSIN, this.strClaimRefNo, pagination.pageNo, pagination.pageSize)
            //    .subscribe((data: any) => {
            //        this.claimsData = data.results;
            //        this.totalRows = data.rowCount;
            //    });
            this.getClaimsByAgentID(this.userService.user.deptUserid, this.entryPoint, this.strSSIN, this.strClaimRefNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize);
        }
    };
    AgentClaimsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-agent-claims',
            template: __webpack_require__(/*! ./agent-claims.component.html */ "./src/app/claim/agent-claims/agent-claims.component.html"),
            styles: [__webpack_require__(/*! ./agent-claims.component.css */ "./src/app/claim/agent-claims/agent-claims.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], AgentClaimsComponent);
    return AgentClaimsComponent;
}());



/***/ }),

/***/ "./src/app/claim/agent-draft/agent-draft.component.css":
/*!*************************************************************!*\
  !*** ./src/app/claim/agent-draft/agent-draft.component.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/agent-draft/agent-draft.component.html":
/*!**************************************************************!*\
  !*** ./src/app/claim/agent-draft/agent-draft.component.html ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>Draft Claims  </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <!--<div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>-->\r\n                        <div class=\"ssv-search\">\r\n                            <input type=\"text\" [(ngModel)]=\"ssinSearchText\" placeholder=\"SSIN Search..\" class=\"advancedSearchTextbox\" NumbersOnly>\r\n                            <!--<input type=\"text\" [(ngModel)]=\"claimReferenceNoText\" placeholder=\"Claim Reference No Search..\" class=\"advancedSearchTextbox\" NumbersOnly minlength=\"12\" maxlength=\"12\">-->\r\n                            <button (click)=\"GetResults()\"><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n                        <p></p>\r\n\r\n                        <table class=\"table table-striped\" [mfData]=\"claimsData\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"ssin\">SSIN</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"benName\">Beneficiary Name</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimRefernceNo\">Claim Reference No</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"submittedDate\">Submission Date</mfDefaultSorter>\r\n                                    </th>\r\n\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimAmount\">Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"statusName\">Status</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <!--<th>\r\n                    <mfDefaultSorter by=\"statusName\">Last Action</mfDefaultSorter>\r\n\r\n                </th>-->\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let claims of mf.data|grdFilter: {ssin:searchText,benName:searchText, claimRefernceNo: searchText,submittedDateString: searchText, claimAmount: searchText, claimType: searchText,\r\n           statusName: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <a (click)=\"onEditClaimClick(claims)\" title=\"Edit\" class=\"txt-color-red\" *ngIf=\"claims.statusName=='Saved'\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n                                        <a (click)=\"onDeleteClaimClick(claims)\" title=\"Delete\" class=\"txt-color-red\" *ngIf=\"claims.statusName=='Saved'\"><i class=\"fa fa-trash-o fa-lg\"></i></a>\r\n\r\n                                    </td>\r\n                                    <td>{{claims.ssin}}</td>\r\n                                    <td>{{claims.benName}}</td>\r\n                                    <td>{{claims.claimRefernceNo}}</td>\r\n                                    <td>{{ claims.submittedDateString}}</td>\r\n                                    <td>{{claims.claimAmount}}</td>\r\n                                    <td>{{claims.statusName}}</td>\r\n                                    <!--<td>{{claims.submittedDateString}}</td>-->\r\n                                </tr>\r\n                            </tbody>\r\n\r\n\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"9\">\r\n                                        <div *ngIf=\"claimsData.length>0\">\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                              <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</section>\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"successModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Success Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p id=\"mesgSubmit\">{{successMessage}}</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/agent-draft/agent-draft.component.ts":
/*!************************************************************!*\
  !*** ./src/app/claim/agent-draft/agent-draft.component.ts ***!
  \************************************************************/
/*! exports provided: AgentDraftComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgentDraftComponent", function() { return AgentDraftComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var AgentDraftComponent = /** @class */ (function () {
    function AgentDraftComponent(router, dataService, userService) {
        this.router = router;
        this.dataService = dataService;
        this.userService = userService;
        this.claimsData = [];
        this.p = 1;
        this.order = 'description';
        this.reverse = false;
        this.deleteStatus = false;
        //Paging props start
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
    }
    AgentDraftComponent.prototype.setOrder = function (value) {
        if (this.order === value) {
            this.reverse = !this.reverse;
        }
    };
    AgentDraftComponent.prototype.ngOnInit = function () {
        if (this.userService.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["UserType"].CA.toString())
            this.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].CA;
        else if (this.userService.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["UserType"].Lwfc.toString())
            this.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Lwfc;
        else
            this.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Agent;
        this.getClaimsByAgentID(this.userService.user.deptUserid, this.entryPoint, "0", this.page, this.pageSize);
        //this.getClaimsByAgentID(this.userService.user.deptUserid, EntryPoint.Agent, this.page, this.pageSize);
    };
    AgentDraftComponent.prototype.onChangePage = function (pageOfItems) {
        // update current page of items
        this.pageOfItems = pageOfItems;
    };
    AgentDraftComponent.prototype.getClaimsByAgentID = function (id, entrypoint, ssin, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getAllDraftClaimsByAgent(id, entrypoint, ssin, pageNo, pageSize)
            .subscribe(function (data) {
            debugger;
            _this.claimsData = data.results;
            _this.totalRows = data.rowCount;
        });
    };
    AgentDraftComponent.prototype.onEditClaimClick = function (item) {
        this.router.navigate(['claim/agentclaimentry', { claimId: item.claimId, mode: "draft", claimStatus: item.statusId }], { skipLocationChange: true });
    };
    AgentDraftComponent.prototype.getDate = function (datestring) {
        return new Date(datestring).toLocaleDateString();
    };
    AgentDraftComponent.prototype.downloadRecept = function (claim) {
        this.dataService
            .downloadReceipt(claim.benName, claim.ssin, claim.claimRefernceNo, claim.claimAmount, claim.claimType)
            .then(function (data) {
            var dd = data;
            var url = window.URL.createObjectURL(data);
            window.open(url);
        });
    };
    AgentDraftComponent.prototype.okClick = function () {
        this.successModal.hide();
        this.getClaimsByAgentID(this.userService.user.deptUserid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Agent, this.page, this.pageSize);
    };
    AgentDraftComponent.prototype.onDeleteClaimClick = function (item) {
        var _this = this;
        if (confirm("Are you sure to proceed ")) {
            this.dataService.deleteClaimById(item.claimId)
                .subscribe(function (data) {
                _this.deleteStatus = data;
                if (_this.deleteStatus) {
                    _this.successMessage = "Your claim was deleted successfully";
                }
                else {
                    _this.successMessage = "Invalid transaction";
                }
                _this.successModal.show();
            });
        }
    };
    AgentDraftComponent.prototype.changepage = function (page) {
        // this.getClaimsByAgentID(this.userService.user.deptUserid, EntryPoint.Agent, this.page, this.pageSize);
        this.getClaimsByAgentID(this.userService.user.deptUserid, this.entryPoint, "0", this.page, this.pageSize);
    };
    AgentDraftComponent.prototype.GetResults = function () {
        if (this.ssinSearchText != null && this.ssinSearchText != undefined && this.ssinSearchText != "")
            this.strSSIN = this.ssinSearchText.trim();
        else
            this.strSSIN = "0";
        this.getClaimsByAgentID(this.userService.user.deptUserid, this.entryPoint, this.strSSIN, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentDraftComponent.prototype, "successModal", void 0);
    AgentDraftComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-agent-draft',
            template: __webpack_require__(/*! ./agent-draft.component.html */ "./src/app/claim/agent-draft/agent-draft.component.html"),
            styles: [__webpack_require__(/*! ./agent-draft.component.css */ "./src/app/claim/agent-draft/agent-draft.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], AgentDraftComponent);
    return AgentDraftComponent;
}());



/***/ }),

/***/ "./src/app/claim/agent-pf-collection-form/agent-pf-collection-form.component.css":
/*!***************************************************************************************!*\
  !*** ./src/app/claim/agent-pf-collection-form/agent-pf-collection-form.component.css ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".invalid-data {\r\n    border: 1px solid red;\r\n}\r\n\r\n.valid-data {\r\n    border: 1px solid rgb(19, 92, 4);\r\n}\r\n"

/***/ }),

/***/ "./src/app/claim/agent-pf-collection-form/agent-pf-collection-form.component.html":
/*!****************************************************************************************!*\
  !*** ./src/app/claim/agent-pf-collection-form/agent-pf-collection-form.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-sm-12 col-md-12 col-lg-12 nocollapse\">\r\n\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n\r\n                <header>\r\n                    <h2>PF Collection </h2>\r\n                </header>\r\n\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <!-- widget edit box -->\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <form class=\"smart-form smart-form-main\">\r\n                            <header *ngIf=\"!agentInfo\">Agent Details</header>\r\n                            <fieldset *ngIf=\"!agentInfo\">\r\n                                <section>\r\n                                    <div class=\"row\" >\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Agent Name: </strong>{{agentUserName}} </label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Agent ARN No: </strong>{{agentARNCode}} </label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-4\" *ngIf=\"!isAllDepositsPayInSlipsUploaded\">\r\n                                            <span style=\"color: red;\">Agent didn't upload the PayIn Slips, Can't create Collections </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-4\" *ngIf=\"agentInfo\">\r\n                                            <label>\r\n                                                <strong>Agent ARN No: </strong>\r\n                                                <select class=\"form-control select\" name=\"agentName\" id=\"ddlAgentName\" [(ngModel)]=\"agentUserId\"\r\n                                                        (change)=\"agentChange($event.target.value)\" [disabled]=\"isAgentLoggedin\">\r\n                                                    <option value=\"{{agent.userid}}\" *ngFor=\"let agent of agentList\">{{agent.userCode}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                        </div>\r\n                                        <div class=\"col col-4\" *ngIf=\"agentInfo\">\r\n                                            <label><strong>Agent Name: </strong>{{agentUserName}}</label>\r\n                                        </div>\r\n                                        <!--<div class=\"col col-4\"  *ngIf=\"agentInfo\">\r\n                                            <label><strong>RLO Office Name & Address: </strong>{{agentRLOOfficeAddress}}</label>\r\n                                        </div>-->\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-4\">\r\n                                        <label>\r\n                                            <strong>Collection Date: </strong><span [style.color]=\"!collectionDateReq?'red':''\"><b>*</b></span>\r\n                                        </label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <input type=\"text\" name=\"collectionDate\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                   [maxDate]=\"toDayDate\"\r\n                                                   placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"collectionDate\"\r\n                                                   value=\"{{collectionDate | date: 'dd/MM/yyyy' }}\" [ngClass]=\"{'invalid-data': (!collectionDateReq), 'valid-data': collectionDateReq}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"!collectionDateReq\">\r\n                                            <span style=\"color: red;\">Collection Date is required </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-4\">\r\n                                            <label>Beneficiary Search(SSIN/Adhar/Reg.No./PF No.) <span [style.color]=\"!ssinValid?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <i class=\"icon-append fa fa-search\" (click)=\"searchSSINNo($event.target.value)\"></i>\r\n                                                <input class=\"form-control\" type=\"text\" name=\"benSno\" [(ngModel)]=\"ssin\" placeholder=\"Enter SSIN\" (change)=\"searchSSINNo($event.target.value)\"\r\n                                                       (keydown.enter)=\"searchSSINNo($event.target.value)\" NumbersOnly maxlength=\"50\"\r\n                                                       #benSno=\"ngModel\"\r\n                                                       [ngClass]=\"{'invalid-data': benSno.invalid && (!ssinValid || benSno.touched), 'valid-data': benSno.valid && ssinValid}\"\r\n                                                       required>\r\n                                            </label>\r\n                                            <div *ngIf=\"benSno.invalid && (!ssinValid || benSno.touched)\">\r\n                                                <span style=\"color: red;\">Search criteria is required </span>\r\n                                            </div>\r\n                                            <div *ngIf=\"beneficiary.benSno==0\">\r\n                                                <span style=\"color: red;\">{{beneficiary.errorMessage}}</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset *ngIf=\"beneficiary.benSno>0\">\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-4 selectContainer\">\r\n                                            <img height=\"70\" width=\"70\" id=\"benImage\" src=\"{{weburl+beneficiary.benPhoto}}\" />\r\n\r\n                                        </div>\r\n                                        <div class=\"col col-4 selectContainer\">\r\n                                            <label><strong>Beneficiary Name: </strong> {{beneficiary.benFullName}} </label>\r\n                                            <label><strong>Mobile : </strong> {{beneficiary.benMobileNo}} </label>\r\n                                        </div>\r\n                                        <div class=\"col col-4 selectContainer\">\r\n                                            <label class=\"control-label\">\r\n                                                <strong>Address: </strong>\r\n                                                {{beneficiary.benAddress}}\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-4\">\r\n                                            <label>\r\n                                                <strong>Last Collection Date: </strong><span [style.color]=\"!LastCollectionDateReq?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <label class=\"input\">\r\n                                                <i class=\"icon-append fa fa-calendar\"></i>\r\n                                                <input type=\"text\" name=\"lastCollectionDate\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                       [maxDate]=\"toDayDate\" #lastCollectionDate=\"ngModel\" [disabled]=\"isbenLastCollectionDate\"\r\n                                                       placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"benLastCollectionDate\"\r\n                                                       value=\"{{benLastCollectionDate | date: 'dd/MM/yyyy' }}\" [ngClass]=\"{'invalid-data': (!LastCollectionDateReq), 'valid-data': LastCollectionDateReq}\"\r\n                                                       required>\r\n                                            </label>\r\n                                            <div *ngIf=\"!lastCollectionDateReq\">\r\n                                                <span style=\"color: red;\">Last Collection Date is required </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-4 selectContainer\">\r\n                                                <label><strong>Last Month Paid: </strong></label>\r\n                                                <select class=\"form-control\" name=\"lastPaidMonth\" id=\"lastPaidMonth\" [(ngModel)]=\"pfLastPaidMonth\" #lastPaidMonth=\"ngModel\" (change)=\"lastPaidMonthChange($event.target.value)\"\r\n                                                        required>\r\n                                                    <option value=\"0\" selected>Choose month</option>\r\n                                                    <option value=\"{{pf.monthId}}\" *ngFor=\"let pf of collectionMonths\">{{pf.monthName + ' ' + (pf.Id > 9 ? this.fEndYear : (pf.Id == 0 ? (this.fStartYear -1) :this.fStartYear)) }}</option>\r\n                                                </select>\r\n                                                <i></i>\r\n                                            </div>\r\n                                            <div class=\"col col-4\">\r\n                                                <label><strong>Month up to: </strong><span [style.color]=\"!pfMonthIsValid?'red':''\"><b>*</b></span>  </label>\r\n                                                <select class=\"form-control\" name=\"pfselectionmonth\" id=\"selectedMonth\" [(ngModel)]=\"pfSelectedMonth\" (change)=\"pfMonthChange($event.target.value)\"\r\n                                                        #pfselectionmonth=\"ngModel\"\r\n                                                        [ngClass]=\"{'invalid-data': pfselectionmonth.invalid && (!pfMonthIsValid || pfselectionmonth.touched),\r\n                                        'valid-data':pfselectionmonth.valid && pfMonthIsValid }\"\r\n                                                        required>\r\n                                                    <option value=\"0\" selected disabled>Choose month</option>\r\n                                                    <option value=\"{{pf.monthId}}\" *ngFor=\"let pf of pfMonths\">{{pf.monthName}}</option>\r\n                                                </select>\r\n                                                <div *ngIf=\"pfselectionmonth.invalid &&(pfselectionmonth.touched || !pfMonthIsValid)\">\r\n                                                    <span style=\"color: red;\">Month is required </span>\r\n                                                </div>\r\n                                                <i></i>\r\n                                            </div>\r\n                                            <div class=\"col col-4\">\r\n                                                <label>\r\n                                                    <strong>Year : </strong>  {{currentyear}}</label>\r\n                                                <!--<input type=\"text\" class=\"form-control\" name=\"year\" placeholder=\"Year\" [(ngModel)]=\"currentyear\" maxlength=\"4\" width=\"300px\" NumbersOnly readonly>-->\r\n                                            </div>\r\n                                        </div>\r\n                                        <section *ngIf=\"pfDetailsVisible\">\r\n                                            <div class=\"row\">\r\n                                                <table id=\"datatable_fixed_column\" class=\"table table-striped table-bordered\" width=\"100%\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>Month</th>\r\n                                                            <th>Year</th>\r\n                                                            <th>Amount</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        <tr *ngFor=\"let pf of pfSelectedMonths\">\r\n                                                            <td>{{pf.monthName}}</td>\r\n                                                            <td>{{pf.year}}</td>\r\n                                                            <td>{{pf.amount}}</td>\r\n                                                        </tr>\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col col-4 selectContainer\">\r\n                                                    <label><strong>Book No.: </strong><span [style.color]=\"!bookNoIsValid?'red':''\"><b>*</b></span></label>\r\n                                                    <select class=\"form-control\" name=\"bookNo\" [(ngModel)]=\"pfDetails.bookNo\" (change)=\"bookNoChange($event.target.value)\"\r\n                                                            #bookNo=\"ngModel\"\r\n                                                            [ngClass]=\"{'invalid-data': bookNo.invalid && (!bookNoIsValid || bookNo.touched),\r\n                                        'valid-data':bookNo.valid && bookNoIsValid }\"\r\n                                                            required>\r\n                                                        <option value=\"0\" selected disabled>Choose book</option>\r\n                                                        <option value=\"{{book.id}}\" *ngFor=\"let book of agentReceiptBooks\">{{book.bookNo}}</option>\r\n                                                    </select>\r\n                                                    <!--<input type=\"text\" class=\"form-control\" name=\"BookNo\" placeholder=\"Book No\" [(ngModel)]=\"pfDetails.bookNo\" maxlength=\"6\"\r\n                #BookNo=\"ngModel\"\r\n                [ngClass]=\"{'invalid-data': BookNo.invalid && (!bookNoIsValid || BookNo.touched), 'valid-data': BookNo.valid && bookNoIsValid}\"\r\n                required />-->\r\n\r\n                                                    <div *ngIf=\"bookNo.invalid && (!bookNoIsValid || bookNo.touched)\">\r\n                                                        <span style=\"color: red;\">Book No. is required </span>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                                <div class=\"col col-4\">\r\n                                                    <label><strong>Receipt No.: </strong><span [style.color]=\"!receiptNoIsValid?'red':''\"><b>*</b></span></label>\r\n                                                    <label class=\"input\">\r\n                                                        <input type=\"text\" class=\"form-control\" name=\"ReceiptNo\" placeholder=\"Receipt No\" [(ngModel)]=\"pfDetails.receiptNo\" NumbersOnly maxlength=\"6\"\r\n                                                               #ReceiptNo=\"ngModel\"\r\n                                                               [ngClass]=\"{'invalid-data': ReceiptNo.invalid && (!receiptNoIsValid || ReceiptNo.touched), 'valid-data': ReceiptNo.valid && receiptNoIsValid}\"\r\n                                                               required [disabled]=\"!receiptGenerated\" (change)=\"checkReceiptNoForAgentBook($event.target.value, pfDetails.bookNo)\" />\r\n                                                    </label>\r\n                                                    <div *ngIf=\"ReceiptNo.invalid && (!receiptNoIsValid || ReceiptNo.touched)\">\r\n                                                        <span style=\"color: red;\">Receipt No. is required </span>\r\n                                                    </div>\r\n                                                    <div *ngIf=\"!receiptGenerated\">\r\n                                                        <span style=\"color: red;\">All Receipt No's are generated. Please select another book No. </span>\r\n                                                    </div>\r\n                                                    <div *ngIf=\"receiptValue==1\">\r\n                                                        <span style=\"color: red;\">Receipt No is already generated. </span>\r\n                                                    </div>\r\n                                                    <div *ngIf=\"receiptValue==2\">\r\n                                                        <span style=\"color: red;\">Receipt No is not in the range. </span>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div class=\"col col-4 selectContainer\">\r\n                                                    <label><strong>Amount: </strong> {{pfTotalAmount}} </label>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"row\">\r\n                                                <div *ngIf=\"agentPfValidation\">\r\n                                                    <span style=\"color: red;\">Collection amount exceeds</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </section>\r\n                                        <footer>\r\n                                            <a *ngIf=\"isAllDepositsPayInSlipsUploaded\" id=\"btnPfCollect\" class=\"btn btn-primary\" (click)=\"SavePFCollectionDetails(pfDetails)\">Submit</a>\r\n                                            <a class=\"btn btn-warning\" (click)=\"cancelClick()\">Cancel</a>\r\n                                        </footer>\r\n</section>\r\n                            </fieldset>\r\n                        </form>\r\n\r\n                    </div>\r\n                    <!-- end widget content -->\r\n\r\n                </div>\r\n                <!-- end widget div -->\r\n\r\n            </div>\r\n            <!-- end widget -->\r\n\r\n        </article>\r\n        <!-- WIDGET END -->\r\n\r\n    </div>\r\n    </section>\r\n    <div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n         aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n        <div class=\"modal-dialog modal-lg\">\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n\r\n                    <h4 class=\"modal-title\">Status Message</h4>\r\n                </div>\r\n                <div class=\"modal-body\">\r\n                    <p id=\"mesgSubmit\">{{successMessage}}</p>\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                        Download Receipt\r\n                    </button>-->\r\n                    <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                        Ok\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n   \r\n"

/***/ }),

/***/ "./src/app/claim/agent-pf-collection-form/agent-pf-collection-form.component.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/claim/agent-pf-collection-form/agent-pf-collection-form.component.ts ***!
  \**************************************************************************************/
/*! exports provided: AgentPfCollectionFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgentPfCollectionFormComponent", function() { return AgentPfCollectionFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _models_pf_months_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/pf.months.model */ "./src/app/claim/models/pf.months.model.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var AgentPfCollectionFormComponent = /** @class */ (function () {
    function AgentPfCollectionFormComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.benficiaryInactive = false;
        this.beneficiary = {};
        this.IsValidssin = false;
        this.ssinValid = true;
        this.months = _models_pf_months_model__WEBPACK_IMPORTED_MODULE_4__["Months"];
        this.collectionMonths = _models_pf_months_model__WEBPACK_IMPORTED_MODULE_4__["CollectionMonths"];
        this.pfDetailsVisible = false;
        this.pfMonths = [];
        this.pfSelectedMonths = [];
        this.lastPaidDetails = {};
        this.pfDetails = {};
        this.pfCollectionDetails = {};
        this.pfMasterConfig = {};
        this.agentPfValidation = false;
        //Validation Props
        this.bookNoIsValid = true;
        this.receiptNoIsValid = true;
        this.pfMonthIsValid = true;
        this.weburl = _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].weburl;
        this.agentList = [];
        this.isAgentLoggedin = false;
        this.collectionDateReq = true;
        this.agentInfo = true;
        this.receiptGenerated = true;
        this.agentReceiptBooks = [];
        this.isAllDepositsPayInSlipsUploaded = true;
        this.lastPaidMonthValid = true;
        this.isbenLastCollectionDate = false;
        this.lastCollectionDateReq = true;
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        this.toDayDate = new Date();
        this.currentyear = new Date().getFullYear();
        var currentMonth = new Date().getMonth();
        if (currentMonth <= 3) {
            this.fStartYear = this.currentyear - 1;
            this.fEndYear = this.currentyear;
        }
        else {
            this.fStartYear = this.currentyear;
            this.fEndYear = this.currentyear + 1;
        }
        this.currentyear = this.fStartYear + '-' + this.fEndYear;
    }
    AgentPfCollectionFormComponent.prototype.ngOnInit = function () {
        this.getAgentList();
        this.userName = this.user.user.userName;
        this.userCode = this.user.user.userTypeName;
        this.getPFMasterConfigDetails();
        this.weburl = _environments_environment__WEBPACK_IMPORTED_MODULE_6__["environment"].weburl;
        if (this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_7__["UserType"].ServiceProvider.toString() || this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_7__["UserType"].CA.toString()) {
            this.agentInfo = false;
            this.checkAgentDepositsPayInSlipsUploaded(this.user.user.deptUserid);
        }
    };
    AgentPfCollectionFormComponent.prototype.getAgentCollectedAmount = function (userId) {
        var _this = this;
        this.dataService
            .getAgentCollectedAmount(userId)
            .subscribe(function (data) {
            _this.agentPfCollectAmount = data;
        });
    };
    AgentPfCollectionFormComponent.prototype.getPFMasterConfigDetails = function () {
        var _this = this;
        this.dataService
            .getPFMasterConfigDetails()
            .subscribe(function (data) {
            _this.pfMasterConfig = data;
            if (_this.pfMasterConfig != null) {
            }
        });
    };
    AgentPfCollectionFormComponent.prototype.searchSSINNo = function (ssnNo) {
        var _this = this;
        debugger;
        this.benficiaryInactive = false;
        this.isbenLastCollectionDate = false;
        if (ssnNo != undefined && ssnNo.trim() != "") {
            this.clearValues();
            this.dataService
                .getBeneficiaryDetailsBySearch(ssnNo.trim())
                .subscribe(function (data) {
                debugger;
                _this.beneficiary = data;
                if (_this.beneficiary != null) {
                    if (_this.beneficiary.benLastCollectionDate != null) {
                        _this.benLastCollectionDate = new Date(_this.beneficiary.benLastCollectionDate);
                        _this.isbenLastCollectionDate = true;
                    }
                    if (_this.beneficiary.isActive && _this.beneficiary.status == 1) {
                        _this.ssinValid = true;
                        //this.getPaymentDetailsBybenSno(this.beneficiary.benSno);
                    }
                    else {
                        _this.ssinValid = false;
                    }
                }
                else {
                    _this.ssinValid = false;
                }
            });
        }
        else {
            this.beneficiary = {};
            this.ssinValid = true;
        }
    };
    AgentPfCollectionFormComponent.prototype.getPaymentDetailsBybenSno = function (benSno) {
        var _this = this;
        this.dataService
            .getLastPaidPfDetails(benSno)
            .subscribe(function (data) {
            debugger;
            _this.lastPaidDetails = data;
            if (_this.lastPaidDetails != null && (_this.lastPaidDetails.lastPaid != null || _this.lastPaidDetails.lastPaid.trim() != '')) {
                debugger;
                _this.displayMonthList(_this.lastPaidDetails.monthPaid, _this.lastPaidDetails.yearPaid);
            }
            else {
                _this.pfMonths = _this.months;
            }
        });
    };
    AgentPfCollectionFormComponent.prototype.displayMonthList = function (monthId, year) {
        //let monthid = this.months.find(x => x.monthId == monthId).monthId;
        if (year == this.fStartYear && monthId <= 3) {
            this.pfMonths = this.months;
        }
        else {
            var id_1 = this.months.find(function (x) { return x.monthId == monthId; }).Id;
            this.pfMonths = this.months.filter(function (x) { return x.Id > id_1; });
        }
    };
    AgentPfCollectionFormComponent.prototype.lastPaidMonthChange = function (value) {
        debugger;
        this.pfTotalAmount = 0;
        if (value != 0) {
            this.lastPaidDetails = {};
            this.lastPaidDetails.monthPaid = value;
            if (value <= 3)
                this.lastPaidDetails.yearPaid = this.fEndYear;
            else
                this.lastPaidDetails.yearPaid = this.fStartYear;
            this.displayMonthList(this.lastPaidDetails.monthPaid, this.lastPaidDetails.yearPaid);
        }
        else if (value == 0) {
            this.lastPaidDetails = {};
            this.lastPaidDetails.monthPaid = 0;
            this.lastPaidDetails.yearPaid = this.fStartYear;
            this.displayMonthList(this.lastPaidDetails.monthPaid, this.lastPaidDetails.yearPaid);
        }
        else {
            this.lastPaidDetails = null;
            this.pfMonths = this.months;
        }
        this.pfSelectedMonth = 0;
        this.pfSelectedMonths = null;
    };
    AgentPfCollectionFormComponent.prototype.pfMonthChange = function (value) {
        var _this = this;
        this.pfTotalAmount = 0;
        var s = null;
        var id = this.months.find(function (x) { return x.monthId == value; }).Id;
        var m = this.months.filter(function (x) { return x.Id <= id; });
        if (this.lastPaidDetails != null && this.lastPaidDetails.monthPaid > 0) {
            var lastId_1 = this.months.find(function (x) { return x.monthId == _this.lastPaidDetails.monthPaid; }).Id;
            var mon = this.months.filter(function (x) { return x.Id > lastId_1 && x.Id <= id; });
            s = mon;
            //s = m.filter(x => x.monthId > this.lastPaidDetails.monthPaid);
        }
        else {
            s = m;
        }
        if (s != null && s != undefined) {
            this.pfDetailsVisible = true;
            this.pfSelectedMonths = s;
            this.pfSelectedMonths.filter(function (x) { return x.amount = _this.pfMasterConfig.beneficiaryPFContribution; });
            this.pfSelectedMonths.filter(function (x) { return x.year = (x.Id >= 10 ? _this.fEndYear : _this.fStartYear); });
            for (var i = 0; i < this.pfSelectedMonths.length; i++) {
                this.pfTotalAmount += +this.pfSelectedMonths[i].amount;
            }
            var totalAmount = (this.agentPfCollectAmount + this.pfTotalAmount);
            debugger;
            if (this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_7__["UserType"].ServiceProvider.toString() || this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_7__["UserType"].CA.toString()) {
                if (totalAmount < this.pfMasterConfig.agentCollectionLimit) {
                    this.agentPfValidation = false;
                }
                else {
                    this.agentPfValidation = true;
                }
            }
        }
    };
    AgentPfCollectionFormComponent.prototype.SavePFCollectionDetails = function (pfDetails) {
        var _this = this;
        if (this.pfSelectedMonths == undefined || this.pfSelectedMonths.length == 0) {
            this.pfMonthIsValid = false;
        }
        if (pfDetails.bookNo == undefined || pfDetails.bookNo == 0) {
            this.bookNoIsValid = false;
        }
        if (pfDetails.receiptNo == undefined || pfDetails.receiptNo == 0) {
            this.receiptNoIsValid = false;
        }
        if (this.collectionDate == undefined || this.collectionDate == null) {
            this.collectionDateReq = false;
        }
        if (this.benLastCollectionDate == undefined || this.benLastCollectionDate == null) {
            this.lastCollectionDateReq = false;
        }
        if (!this.pfMonthIsValid || !this.bookNoIsValid || !this.receiptNoIsValid || !this.collectionDateReq || !this.lastCollectionDateReq)
            return;
        debugger;
        this.pfCollectionDetails.BenSno = this.beneficiary.benSno;
        this.pfCollectionDetails.AgentNo = this.agentUserId; //this.user.user.deptUserid;
        this.pfCollectionDetails.BookNo = pfDetails.bookNo;
        this.pfCollectionDetails.CollectionAmount = this.pfTotalAmount;
        this.pfCollectionDetails.CollectionDate = this.collectionDate;
        this.pfCollectionDetails.ReceiptNo = pfDetails.receiptNo;
        this.pfCollectionDetails.BenPFAccountId = this.beneficiary.benPFAccountId;
        this.pfCollectionDetails.RLOOfficeId = this.rloOffcieId;
        this.pfCollectionDetails.LastCollectionDate = this.benLastCollectionDate;
        if (!this.agentPfValidation) {
            this.pfCollectionDetails.PFCollectionDtlList = [];
            for (var i = 0; i < this.pfSelectedMonths.length; i++) {
                this.pfCollectionDetails.PFCollectionDtlList.push({ MonthPaid: this.pfSelectedMonths[i].monthId, YearPaid: this.pfSelectedMonths[i].year, Amount: this.pfSelectedMonths[i].amount });
            }
            if (confirm("Are you sure to proceed ")) {
                this.dataService
                    .savePFCollectionDetails(this.pfCollectionDetails)
                    .then(function (data) {
                    debugger;
                    if (data) {
                        _this.successMessage = "PF collections successfully submitted";
                        _this.pfTotalAmount = 0;
                    }
                    else {
                        _this.successMessage = "Invalid transaction";
                    }
                    _this.successModal.show();
                });
            }
        }
    };
    AgentPfCollectionFormComponent.prototype.okClick = function () {
        this.successModal.hide();
        //this.ngOnInit();
        //this.beneficiary = {} as PFBeneficiaryDetails;
        //this.ssin = null;
        if (this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_7__["UserType"].Inspector.toString())
            window.location.href = "Inspector/PfCollectionForm";
        else if (this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_7__["UserType"].AsstLabourCom.toString())
            window.location.href = "ALC/PfCollectionForm";
        else
            window.location.href = "Agent/PfCollectionForm";
        // this.router.navigate(['claim/PfCollectionForm']);
    };
    AgentPfCollectionFormComponent.prototype.cancelClick = function () {
        this.router.navigate(['claim/PfDeposit']);
    };
    AgentPfCollectionFormComponent.prototype.clearValues = function () {
        this.lastPaidDetails = {};
        this.pfTotalAmount = 0;
        this.beneficiary = {};
        this.pfSelectedMonths = [];
        this.pfDetails = {};
        this.pfDetailsVisible = false;
        this.collectionDateReq = true;
    };
    AgentPfCollectionFormComponent.prototype.getAgentList = function () {
        var _this = this;
        this.dataService
            .getAgentList(0)
            .subscribe(function (data) {
            debugger;
            _this.agentList = data;
            if (_this.agentList != null && _this.agentList.length > 0) {
                for (var i = 0; i <= _this.agentList.length; i++) {
                    debugger;
                    if (_this.agentList[i].userid == _this.user.user.deptUserid) {
                        _this.agentUserId = _this.agentList[i].userid;
                        _this.agentUserName = _this.agentList[i].firstname + " " + _this.agentList[i].lastname;
                        _this.agentARNCode = _this.agentList[i].userCode;
                        _this.rloOffcieId = _this.agentList[i].rloOfficeId;
                        _this.isAgentLoggedin = true;
                        _this.getAgentCollectedAmount(_this.user.user.deptUserid);
                        _this.getAgentReceiptBooks(_this.user.user.deptUserid);
                    }
                }
            }
        });
    };
    AgentPfCollectionFormComponent.prototype.agentChange = function (eve) {
        debugger;
        this.agentUserId = eve;
        this.agentUserName = this.agentList.find(function (x) { return x.userid == eve; }).firstname + " " + this.agentList.find(function (x) { return x.userid == eve; }).lastname;
        this.rloOffcieId = this.agentList.find(function (x) { return x.userid == eve; }).rloOfficeId;
        this.getAgentCollectedAmount(eve);
        this.getAgentReceiptBooks(eve);
        this.checkAgentDepositsPayInSlipsUploaded(eve);
    };
    AgentPfCollectionFormComponent.prototype.getAgentReceiptBooks = function (userId) {
        var _this = this;
        this.dataService
            .getAgentBooks(userId)
            .subscribe(function (data) {
            _this.agentReceiptBooks = data;
        });
    };
    AgentPfCollectionFormComponent.prototype.bookNoChange = function (value) {
        var _this = this;
        this.receiptGenerated = true;
        this.dataService
            .getNextReceiptNo(value)
            .subscribe(function (data) {
            debugger;
            if (data == -1) {
                _this.pfDetails.receiptNo = 0;
                _this.receiptGenerated = false;
            }
            else
                _this.pfDetails.receiptNo = data;
        });
    };
    AgentPfCollectionFormComponent.prototype.checkAgentDepositsPayInSlipsUploaded = function (userId) {
        var _this = this;
        this.dataService
            .isAgentAllDepositsPayInSlipsUploaded(userId)
            .subscribe(function (data) {
            debugger;
            _this.isAllDepositsPayInSlipsUploaded = data;
        });
    };
    AgentPfCollectionFormComponent.prototype.checkReceiptNoForAgentBook = function (eve, bookId) {
        var _this = this;
        this.dataService
            .checkReceiptNoForAgentBook(bookId, eve)
            .subscribe(function (data) {
            debugger;
            _this.receiptValue = data;
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentPfCollectionFormComponent.prototype, "successModal", void 0);
    AgentPfCollectionFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-agent-pf-collection-form',
            template: __webpack_require__(/*! ./agent-pf-collection-form.component.html */ "./src/app/claim/agent-pf-collection-form/agent-pf-collection-form.component.html"),
            styles: [__webpack_require__(/*! ./agent-pf-collection-form.component.css */ "./src/app/claim/agent-pf-collection-form/agent-pf-collection-form.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], AgentPfCollectionFormComponent);
    return AgentPfCollectionFormComponent;
}());



/***/ }),

/***/ "./src/app/claim/agent-pf-deposit/agent-pf-deposit.component.css":
/*!***********************************************************************!*\
  !*** ./src/app/claim/agent-pf-deposit/agent-pf-deposit.component.css ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/agent-pf-deposit/agent-pf-deposit.component.html":
/*!************************************************************************!*\
  !*** ./src/app/claim/agent-pf-deposit/agent-pf-deposit.component.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div id=\"content\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>PF Deposit </h2>\r\n                </header>\r\n                <div>\r\n\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n\r\n\r\n                        <form class=\"smart-form smart-form-main\">\r\n                            <header>Agent Details</header>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Agent Name: </strong>{{agentDetails?.userName}} </label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>RLO Office Name & Address: </strong>{{agentDetails?.agentRLOInformation?.rloOfficeName}} <br /> {{agentDetails?.agentRLOInformation?.addressLine1}} &nbsp; {{agentDetails?.agentRLOInformation?.addressLine2}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-12\">\r\n                                            <label><strong>Agent ARN No: </strong>{{agentDetails?.userCode}} </label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label>\r\n                                                <label><strong>Worker Type: </strong></label>\r\n                                            </label>\r\n                                            <label class=\"input\">\r\n                                                <select class=\"form-control\" id=\"ddlWorkerType\" name=\"workerType\" [(ngModel)]=\"workerTypeId\"\r\n                                                        (change)=\"workerTypeChange($event.target.value)\">\r\n                                                    <option value=\"0\" selected disabled>Choose an Option</option>\r\n                                                    <option value=\"{{type.workerTypeId}}\" *ngFor=\"let type of WorkerTypeList\">{{type.workerTypeName}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                            <div *ngIf=\"!workerTypeReq\">\r\n                                                <span style=\"color: red;\">Worker Type is required </span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"col col-5\">\r\n                                            <label>\r\n                                                <strong>Deposit Date: </strong><span [style.color]=\"!depositDateReq?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <label class=\"input\">\r\n                                                <i class=\"icon-append fa fa-calendar\"></i>\r\n                                                <input type=\"text\" name=\"depositDate\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                       [maxDate]=\"toDayDate\"\r\n                                                       placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"depositDate\"\r\n                                                       value=\"{{depositDate | date: 'dd/MM/yyyy' }}\" [ngClass]=\"{'invalid-data': (!depositDateReq), 'valid-data': depositDateReq}\"\r\n                                                       required>\r\n                                            </label>\r\n                                            <div *ngIf=\"!depositDateReq\">\r\n                                                <span style=\"color: red;\">Deposit Date is required </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isWorkerTypeSelected\">\r\n                                        <div class=\"col col-5\">\r\n                                            <label class=\"radio\">\r\n                                                <input type=\"radio\" name=\"radio-inline\" checked=\"checked\" (change)=\"radioChange(1)\" />\r\n                                                <i></i>Non Grips\r\n                                            </label>\r\n                                        </div>\r\n                                        <div class=\"col col-5\">\r\n                                            <label class=\"radio\">\r\n                                                <input type=\"radio\" name=\"radio-inline\" (change)=\"radioChange(2)\" />\r\n                                                <i></i>Grips\r\n                                            </label>\r\n                                        </div>\r\n                                        <div *ngIf=\"!gripsDeptCodeError\">\r\n                                            <span style=\"color: red;\">Grips is not configured for this worker type </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isWorkerTypeSelected\">\r\n                                        <div class=\"col col-6\" *ngIf=\"!isGrips\">\r\n                                            <label><strong>Deposit Bank: </strong><span [style.color]=\"!depositBankReq?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <select class=\"form-control\" id=\"ddlDepositBank\" name=\"depositBank\" [(ngModel)]=\"bankId\">\r\n                                                    <option value=\"0\" disabled>Choose an Option</option>\r\n                                                    <option value=\"{{bank.bankCode}}\" *ngFor=\"let bank of bankDetails\">{{bank.accountNumber}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                            <div *ngIf=\"!depositBankReq\">\r\n                                                <span style=\"color: red;\">Deposit Bank is required </span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"col col-5\">\r\n                                            <label><strong>Amount Pending for deposit: </strong>{{sumofAmount}}</label>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </section>\r\n                            </fieldset>\r\n                        </form>\r\n                        <form method=\"post\" #form1 id=\"form1\" name=\"form1\" style=\"display:none\">\r\n                            <input type=\"text\" name=\"ENCDATA\" id=\"ENCDATA\">\r\n                            <input type=\"text\" name=\"DEPT_CD\" id=\"DEPT_CD\">\r\n                            <button type=\"submit\" (click)=\"form1.submit()\">Submit</button>\r\n                        </form>\r\n                        <!--UAT-->\r\n                        <!--<form action=\"http://202.61.117.90/GRIPS/v1epay.do\" method=\"post\" #form1 id=\"form1\" name=\"form1\" style=\"display:none\">\r\n                            <input type=\"text\" name=\"ENCDATA\" id=\"ENCDATA\">\r\n                            <input type=\"text\" name=\"DEPT_CD\" id=\"DEPT_CD\">\r\n                            <button type=\"submit\" (click)=\"form1.submit()\">Submit</button>\r\n                        </form>-->\r\n                        <!--Live-->\r\n                        <!--<form action=\"https://wbifms.gov.in/GRIPS/v1epay.do\" method=\"post\" #form1 id=\"form1\" name=\"form1\" style=\"display:none\">\r\n                            <input type=\"text\" name=\"ENCDATA\" id=\"ENCDATA\">\r\n                            <input type=\"text\" name=\"DEPT_CD\" id=\"DEPT_CD\">\r\n                            <button type=\"submit\" (click)=\"form1.submit()\">Submit</button>\r\n                        </form>-->\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n                        <!--<table class=\"table table-striped\" [mfData]=\"PFCollectionDetails1\" #mf=\"mfDataTable\">-->\r\n                        <table id=\"datatable_fixed_column\" class=\"table table-striped table-bordered\"\r\n                               [mfData]=\"PFCollectionDetails1\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\" width=\"100%\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th><input type=\"checkbox\" [(ngModel)]=\"selectedAll\" (change)=\"selectAll();\"></th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"ssI_Number\">SSIN</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"benFullName\">Beneficiary Name</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"receiptNo\">Receipt No</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"bookNo\">Book No</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"collectionDateString\">Collection Date</mfDefaultSorter>\r\n                                    </th>\r\n\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"paidFromMonth\">Paid From</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"paidToMonth\">Paid To</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"collectionAmount\">Amount</mfDefaultSorter>\r\n                                    </th>\r\n\r\n\r\n\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let deposits of mf.data|grdFilter: {ssI_Number:searchText, benFullName: searchText, receiptNo: searchText, collectionDateString: searchText, bookNo: searchText, paidFromMonth: searchText,\r\n           paidToMonth: searchText, collectionAmount: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <input type=\"checkbox\" [(ngModel)]=\"deposits.selected\" (change)=\"checkIfAllSelected(deposits);\">\r\n                                    </td>\r\n                                    <td>{{deposits.ssI_Number}}</td>\r\n                                    <td>{{deposits.benFullName}}</td>\r\n                                    <td>{{deposits.receiptNo}}</td>\r\n                                    <td>{{deposits.bookName}}</td>\r\n                                    <td>{{deposits.collectionDateString}}</td>\r\n                                    <td>{{deposits.paidFromMonth}}</td>\r\n                                    <td>{{deposits.paidToMonth}}</td>\r\n                                    <td>{{deposits.collectionAmount}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"9\">\r\n                                        <div *ngIf=\"PFCollectionDetails1 != null && PFCollectionDetails1.length>0\">\r\n                                            <!--<ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>-->\r\n                                            <mfBootstrapPaginator></mfBootstrapPaginator>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                        <!--<table class=\"table table-striped\" [mfData]=\"PFCollectionDetails.results\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                                             <thead>\r\n                                                 <tr>\r\n                                                     <th><input type=\"checkbox\" [(ngModel)]=\"selectedAll\" (change)=\"selectAll();\"></th>\r\n                                                     <th>\r\n                                                         <mfDefaultSorter by=\"ssI_Number\">SSIN</mfDefaultSorter>\r\n                                                     </th>\r\n                                                     <th>\r\n                                                         <mfDefaultSorter by=\"benFullName\">Beneficiary Name</mfDefaultSorter>\r\n                                                     </th>\r\n                                                     <th>\r\n                                                         <mfDefaultSorter by=\"receiptNo\">Receipt No</mfDefaultSorter>\r\n\r\n                                                     </th>\r\n                                                     <th>\r\n                                                         <mfDefaultSorter by=\"bookNo\">Book No</mfDefaultSorter>\r\n\r\n                                                     </th>\r\n                                                     <th>\r\n                                                         <mfDefaultSorter by=\"collectionDateString\">Collection Date</mfDefaultSorter>\r\n                                                     </th>\r\n\r\n                                                     <th>\r\n                                                         <mfDefaultSorter by=\"paidFromMonth\">Paid From</mfDefaultSorter>\r\n                                                     </th>\r\n                                                     <th>\r\n                                                         <mfDefaultSorter by=\"paidToMonth\">Paid To</mfDefaultSorter>\r\n                                                     </th>\r\n                                                     <th>\r\n                                                         <mfDefaultSorter by=\"collectionAmount\">Amount</mfDefaultSorter>\r\n                                                     </th>\r\n\r\n\r\n\r\n                                                 </tr>\r\n                                             </thead>\r\n                                             <tbody>\r\n                                                 <tr *ngFor=\"let deposits of mf.data|grdFilter: {ssI_Number:searchText, benFullName: searchText, receiptNo: searchText, collectionDateString: searchText, bookNo: searchText, paidFromMonth: searchText,\r\n                        paidToMonth: searchText, collectionAmount: searchText}; let i=index;\">\r\n                                                     <td class=\"\">\r\n                                                         <input type=\"checkbox\" [(ngModel)]=\"deposits.selected\" (change)=\"checkIfAllSelected(deposits);\">\r\n                                                     </td>\r\n                                                     <td>{{deposits.ssI_Number}}</td>\r\n                                                     <td>{{deposits.benFullName}}</td>\r\n                                                     <td>{{deposits.receiptNo}}</td>\r\n                                                     <td>{{deposits.bookNo}}</td>\r\n                                                     <td>{{deposits.collectionDateString}}</td>\r\n                                                     <td>{{deposits.paidFromMonth}}</td>\r\n                                                     <td>{{deposits.paidToMonth}}</td>\r\n                                                     <td>{{deposits.collectionAmount}}</td>\r\n                                                 </tr>\r\n                                             </tbody>\r\n                                             <tfoot>\r\n                                                 <tr>\r\n                                                     <td colspan=\"9\">\r\n                                                         <div *ngIf=\"PFCollectionDetails.results.length>0\">\r\n                                                             <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                                         </div>\r\n                                                     </td>\r\n                                                 </tr>\r\n                                             </tfoot>\r\n                                         </table>-->\r\n                        <div class=\"row\" *ngIf=\"showErrorMessage\" style=\"margin-top:10px;\">\r\n                            <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                <label>Please select atleast one record to proceed.</label>\r\n                            </div>\r\n                        </div>\r\n                        <footer *ngIf=\"PFCollectionDetails1 != null && PFCollectionDetails1.length>0\">\r\n                            <div class=\"modal-footer\">\r\n                                <a id=\"btnPfCollect\" class=\"btn btn-primary\" (click)=\"submitPFDepositDetails(PFCollectionDetails1)\">Submit</a>\r\n\r\n                                <a id=\"btnGenerate\" class=\"btn btn-primary\" (click)=\"GenaratePdf()\" *ngIf=\"!isGrips\">Generate PayIn-Slip</a>\r\n                            </div>\r\n                        </footer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</div>\r\n\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p id=\"mesgSubmit\">{{successMessage}}</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #pdfModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">PayIn Slip Pdf</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                PayIn Slip generated, Please print or download.\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPdf('print')\">\r\n                    Print PayIn Slip\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPdf('download')\">\r\n                    Download PayIn Slip\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/agent-pf-deposit/agent-pf-deposit.component.ts":
/*!**********************************************************************!*\
  !*** ./src/app/claim/agent-pf-deposit/agent-pf-deposit.component.ts ***!
  \**********************************************************************/
/*! exports provided: AgentPfDepositComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgentPfDepositComponent", function() { return AgentPfDepositComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var AgentPfDepositComponent = /** @class */ (function () {
    function AgentPfDepositComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
        //PFCollectionDetails: PFCollectionDetails = {} as PFCollectionDetails;
        this.PFDepositDetails = {};
        //PFDepositDetailsObj: PFDepositDtlDetails = {} as PFDepositDtlDetails;
        this.depositDateReq = true;
        this.bankDetails = [];
        this.agentDetails = {};
        this.sumofAmount = 0;
        this.selectedCollectionsList = [];
        this.showErrorMessage = false;
        this.depositBankReq = true;
        this.workerTypeReq = true;
        this.generatePayInSlip = {};
        this.isGrips = false;
        this.isWorkerTypeSelected = false;
        this.gripsDeptCode = '';
        this.gripsDeptCodeError = true;
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        this.toDayDate = new Date();
    }
    AgentPfDepositComponent.prototype.ngOnInit = function () {
        this.userName = this.user.user.userName;
        this.userCode = this.user.user.userTypeName;
        //this.getPFPendingDepositItemsByAgent(this.user.user.deptUserid, PFDepositeStatus.pending,0, this.page, this.pageSize);
        this.getAgentDetailsForDeposit(this.user.user.deptUserid);
        this.getWorkerTypeDetails();
    };
    AgentPfDepositComponent.prototype.getAgentDetailsForDeposit = function (userId) {
        var _this = this;
        this.dataService
            .getAgentDetailsForDeposit(userId)
            .subscribe(function (data) {
            _this.agentDetails = data;
            if (_this.agentDetails != null) {
                if (_this.agentDetails.agentRLOInformation != null)
                    _this.rloOfficeId = _this.agentDetails.agentRLOInformation.rloOfficeId;
                //this.getSubDivRLOBankDetails(this.agentDetails.subDivId)
            }
        });
    };
    AgentPfDepositComponent.prototype.getPFPendingDepositItemsByAgent = function (userId, status, workerTypeId, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getPFDepositDetailsByAgentId(userId, 0, workerTypeId, pageNo, pageSize)
            .subscribe(function (data) {
            _this.PFCollectionDetails1 = data;
            //this.PFCollectionDetails = data;
            //this.totalRows = this.PFCollectionDetails.rowCount;
            if (_this.PFCollectionDetails1 != null && _this.PFCollectionDetails1.length > 0) {
                _this.selectedAll = true;
                _this.selectAll();
            }
            else {
                _this.selectedAll = false;
            }
        });
    };
    AgentPfDepositComponent.prototype.changepage = function (page) {
        //this.getPFPendingDepositItemsByAgent(this.user.user.deptUserid, PFDepositeStatus.pending, page, this.pageSize);
    };
    AgentPfDepositComponent.prototype.submitPFDepositDetails = function (DepositDetails) {
        var _this = this;
        debugger;
        if (this.validatePFDeposit()) {
            this.selectedCollections();
            this.showErrorMessage = false;
            if (this.selectedCollectionsList != null && this.selectedCollectionsList.length > 0) {
                this.PFDepositDetails.agentNo = this.user.user.deptUserid;
                this.PFDepositDetails.rloOfficeId = this.rloOfficeId;
                //this.PFDepositDetails.bankId = this.bankId;
                this.PFDepositDetails.lwcBankCode = this.bankId;
                this.PFDepositDetails.payinSlipNo = 0;
                this.PFDepositDetails.collectionIds = this.selectedCollectionsList;
                this.PFDepositDetails.workerTypeId = this.workerTypeId;
                this.PFDepositDetails.depositDate = this.depositDate;
                if (this.isGrips) {
                    if (confirm("Do you want to proceed with GRIPS")) {
                        this.PFDepositDetails.mode = "grips";
                        this.PFDepositDetails.lwcBankCode = 0;
                        this.dataService
                            .submitPFDepositDetails(this.PFDepositDetails)
                            .then(function (data) {
                            debugger;
                            if (data) {
                                _this.encData = data;
                                var input = document.getElementById('ENCDATA');
                                input.value = _this.encData;
                                var input1 = document.getElementById('DEPT_CD');
                                input1.value = _this.gripsDeptCode;
                                var myForm = document.getElementById('form1');
                                myForm.action = src_environments_environment__WEBPACK_IMPORTED_MODULE_7__["environment"].gripsurl;
                                myForm.submit();
                                //this.successMessage = "PF amount sucessfully deposited";
                            }
                            else {
                                _this.successMessage = "Invalid transaction";
                                _this.successModal.show();
                            }
                            //this.successModal.show();
                        });
                    }
                }
                else {
                    if (confirm("Are you sure to proceed")) {
                        this.PFDepositDetails.mode = "default";
                        this.dataService
                            .submitPFDepositDetails(this.PFDepositDetails)
                            .then(function (data) {
                            debugger;
                            if (data == "true") {
                                _this.successMessage = "PF amount sucessfully deposited";
                            }
                            else {
                                _this.successMessage = "Invalid transaction";
                            }
                            _this.successModal.show();
                        });
                    }
                }
            }
            else {
                this.showErrorMessage = true;
            }
        }
    };
    AgentPfDepositComponent.prototype.okClick = function () {
        this.getPFPendingDepositItemsByAgent(this.user.user.deptUserid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["PFDepositeStatus"].pending, 0, this.page, this.pageSize);
        this.depositDate = null;
        this.sumofAmount = 0;
        this.workerTypeId = 0;
        this.bankId = 0;
        this.successModal.hide();
    };
    AgentPfDepositComponent.prototype.getSubDivRLOBankDetails = function (id, workerTypeId) {
        var _this = this;
        this.dataService
            .getSubDivRLOBankDetails(id, workerTypeId)
            .subscribe(function (data) {
            _this.bankDetails = data;
        });
    };
    AgentPfDepositComponent.prototype.getLWCBankDetails = function (userId, workerTypeId) {
        var _this = this;
        this.dataService
            .getLWCBankDetails(userId, workerTypeId)
            .subscribe(function (data) {
            _this.bankDetails = data;
        });
    };
    AgentPfDepositComponent.prototype.selectAll = function () {
        debugger;
        this.sumofAmount = 0;
        for (var i = 0; i < this.PFCollectionDetails1.length; i++) {
            this.PFCollectionDetails1[i].selected = this.selectedAll;
            if (this.selectedAll) {
                this.sumofAmount += this.PFCollectionDetails1[i].collectionAmount;
            }
        }
    };
    AgentPfDepositComponent.prototype.checkIfAllSelected = function (itemData) {
        this.selectedAll = this.PFCollectionDetails1.every(function (item) {
            return item.selected == true;
        });
        if (itemData.selected == true) {
            this.sumofAmount += itemData.collectionAmount;
        }
        else {
            this.sumofAmount -= itemData.collectionAmount;
        }
    };
    AgentPfDepositComponent.prototype.selectedCollections = function () {
        var res = this.PFCollectionDetails1.filter(function (x) { return x.selected == true; });
        this.selectedCollectionsList = [];
        for (var i = 0; i < res.length; i++) {
            this.selectedCollectionsList.push(res[i].pfCollectionId);
        }
    };
    AgentPfDepositComponent.prototype.getWorkerTypeDetails = function () {
        var _this = this;
        this.dataService
            .getWorkerTypeMasterData()
            .subscribe(function (data) {
            _this.WorkerTypeList = data;
        });
    };
    AgentPfDepositComponent.prototype.workerTypeChange = function (typeId) {
        debugger;
        this.gripsDeptCodeError = true;
        this.selectedCollectionsList = [];
        this.sumofAmount = 0;
        this.showErrorMessage = false;
        //this.getSubDivRLOBankDetails(this.agentDetails.subDivId, typeId);
        this.getLWCBankDetails(this.user.user.deptUserid, typeId);
        this.getPFPendingDepositItemsByAgent(this.user.user.deptUserid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["PFDepositeStatus"].pending, typeId, this.page, this.pageSize);
        this.isWorkerTypeSelected = true;
        this.gripsDeptCode = this.WorkerTypeList.find(function (a) { return a.workerTypeId == typeId; }).gripsDeptCode;
        if (this.isGrips && (this.gripsDeptCode == '' || this.gripsDeptCode == undefined))
            this.gripsDeptCodeError = false;
    };
    AgentPfDepositComponent.prototype.validatePFDeposit = function () {
        debugger;
        var isValid = true;
        this.workerTypeReq = this.depositBankReq = this.depositDateReq = true;
        //this.showErrorMessage = false;
        if (this.depositDate == undefined || this.depositDate == null) {
            this.depositDateReq = isValid = false;
        }
        if (this.workerTypeId == undefined || this.workerTypeId == null) {
            this.workerTypeReq = isValid = false;
        }
        if (!this.isGrips) {
            if (this.bankId == undefined || this.bankId == null) {
                this.depositBankReq = isValid = false;
            }
        }
        else {
            if (this.gripsDeptCode == '' || this.gripsDeptCode == undefined) {
                this.gripsDeptCodeError = isValid = false;
            }
        }
        return isValid;
    };
    AgentPfDepositComponent.prototype.GenaratePdf = function () {
        if (this.validatePFDeposit())
            this.pdfModal.show();
    };
    AgentPfDepositComponent.prototype.downLoadPdf = function (type) {
        var _this = this;
        debugger;
        this.generatePayInSlip.depositDate = this.depositDate;
        this.generatePayInSlip.depositBankId = this.bankId;
        this.generatePayInSlip.agentName = this.userName;
        this.generatePayInSlip.agentCode = this.userCode;
        this.generatePayInSlip.totalAmount = this.sumofAmount;
        this.generatePayInSlip.deptUserId = this.user.user.deptUserid;
        this.dataService
            .genaratePdfPayInSlip(this.generatePayInSlip)
            .then(function (data) {
            debugger;
            var blob = new Blob([data.body], { type: 'application/pdf' });
            if (type == 'print') {
                var blobUrl = URL.createObjectURL(blob);
                var iframe = document.createElement('iframe');
                iframe.style.display = 'none';
                iframe.src = blobUrl;
                document.body.appendChild(iframe);
                iframe.contentWindow.print();
            }
            else {
                file_saver__WEBPACK_IMPORTED_MODULE_6__["saveAs"](blob, "PayIn-Slip.pdf");
            }
            _this.pdfModal.hide();
        });
    };
    AgentPfDepositComponent.prototype.radioChange = function (id) {
        this.gripsDeptCodeError = true;
        this.isGrips = (id == 1 ? false : true);
        if (this.isGrips && (this.gripsDeptCode == '' || this.gripsDeptCode == undefined))
            this.gripsDeptCodeError = false;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentPfDepositComponent.prototype, "successModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('pdfModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentPfDepositComponent.prototype, "pdfModal", void 0);
    AgentPfDepositComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-agent-pf-deposit',
            template: __webpack_require__(/*! ./agent-pf-deposit.component.html */ "./src/app/claim/agent-pf-deposit/agent-pf-deposit.component.html"),
            styles: [__webpack_require__(/*! ./agent-pf-deposit.component.css */ "./src/app/claim/agent-pf-deposit/agent-pf-deposit.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], AgentPfDepositComponent);
    return AgentPfDepositComponent;
}());



/***/ }),

/***/ "./src/app/claim/agent-pf-deposited-list/agent-pf-deposited-list.component.css":
/*!*************************************************************************************!*\
  !*** ./src/app/claim/agent-pf-deposited-list/agent-pf-deposited-list.component.css ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/agent-pf-deposited-list/agent-pf-deposited-list.component.html":
/*!**************************************************************************************!*\
  !*** ./src/app/claim/agent-pf-deposited-list/agent-pf-deposited-list.component.html ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div id=\"content\" >\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>PF Deposited </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n\r\n                        <p></p>\r\n\r\n                        <table class=\"table table-striped\" [mfData]=\"pFDepositDetails.results\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"pfDepositId\">DEPT_REF_NO</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"depositAmount\">Deposit Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"depositDateString\">Deposit Date</mfDefaultSorter>\r\n                                    </th>\r\n                                    <!--<th>\r\n                                        <mfDefaultSorter by=\"payinSlipNo\">Payin Slip No</mfDefaultSorter>\r\n\r\n                                    </th>-->\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"scrollNumber\">Scroll Number</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"bankDepositDateString\">BankDepositDate</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter>PayIn Slip</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"gRN\">GRN</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"paymentStatus\">Payment Status</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"isGrips\">Is Grips</mfDefaultSorter>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let deposits of mf.data|grdFilter: {depositAmount:searchText, depositDateString: searchText, payinSlipNo: searchText, scrollNumber: searchText, bankDepositDateString: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <a (click)=\"onRePayClick(deposits)\" title=\"RePay\" class=\"txt-color-red\" *ngIf=\"deposits.transactionStatus==3 && deposits.isGrips\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n                                        <a (click)=\"onVerifyClick(deposits)\" title=\"Verify\" class=\"txt-color-red\" *ngIf=\"(deposits.transactionStatus==2 || deposits.transactionStatus==0)&& deposits.isGrips\"><i class=\"fa fa-eye\"></i></a>\r\n                                        <a (click)=\"onPDFViewClick(deposits)\" title=\"PDF View\" class=\"txt-color-red\" *ngIf=\"deposits.isGrips\"><i class=\"fa fa-file-pdf-o\"></i></a>\r\n                                        <a (click)=\"getAttachments(deposits.pfDepositId)\" title=\"View Attachments\" class=\"txt-color-red\" *ngIf=\"deposits.isPayInSlipUploaded\"><i class=\"fa fa-file-o\"></i></a>\r\n                                    </td>\r\n                                    <td>{{deposits.pfDepositId}}</td>\r\n                                    <td>{{deposits.depositAmount}}</td>\r\n                                    <td>{{deposits.depositDateString}}</td>\r\n                                    <!--<td>{{deposits.payinSlipNo}}</td>-->\r\n                                    <td>{{deposits.scrollNumber}}</td>\r\n                                    <td>{{deposits.bankDepositDateString}}</td>\r\n                                    <td class=\"\">\r\n                                        <div *ngIf=\"!deposits.isPayInSlipUploaded\">\r\n                                            <a *ngIf=\"!deposits.isGrips\" (click)=\"upload(deposits)\" title=\"Upload\" class=\"txt-color-red\"><i class=\"fa fa-upload fa-lg\"></i></a>\r\n                                            <a *ngIf=\"deposits.isGrips && deposits.transactionStatus==1\" (click)=\"uploadGripsFormIV(deposits)\" title=\"Upload Form IV\" class=\"txt-color-red\"><i class=\"fa fa-upload fa-lg\"></i></a>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>{{deposits.grn}}</td>\r\n                                    <td>{{deposits.paymentStatus}}</td>\r\n                                    <td>{{deposits.isGrips}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"11\">\r\n                                        <div *ngIf=\"pFDepositDetails.results.length>0\">\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                            <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</div>\r\n<div>\r\n    <form method=\"post\" #form1 id=\"form1\" name=\"form1\" style=\"display:none\">\r\n        <input type=\"text\" name=\"xmlString\" id=\"xmlString\">\r\n        <input type=\"text\" name=\"Dept_Cd\" id=\"Dept_Cd\">\r\n        <button type=\"submit\" (click)=\"form1.submit()\">Submit</button>\r\n    </form>\r\n\r\n    <form method=\"post\" #form1 id=\"form2\" name=\"form2\" style=\"display:none\">\r\n        <input type=\"text\" name=\"ENCDATA\" id=\"ENCDATA\">\r\n        <input type=\"text\" name=\"DEPT_CD\" id=\"DEPT_CD\">\r\n        <button type=\"submit\" (click)=\"form2.submit()\">Submit</button>\r\n    </form>\r\n    <!--UAT-->\r\n    <!--<form action=\"http://202.61.117.90/GRIPS/DeptVarifyPayment.do\" method=\"post\" #form1 id=\"form1\" name=\"form1\" style=\"display:none\">\r\n        <input type=\"text\" name=\"xmlString\" id=\"xmlString\">\r\n        <input type=\"text\" name=\"Dept_Cd\" id=\"Dept_Cd\">\r\n        <button type=\"submit\" (click)=\"form1.submit()\">Submit</button>\r\n    </form>\r\n\r\n    <form action=\"http://202.61.117.90/GRIPS/v1epay.do\" method=\"post\" #form1 id=\"form2\" name=\"form2\" style=\"display:none\">\r\n        <input type=\"text\" name=\"ENCDATA\" id=\"ENCDATA\">\r\n        <input type=\"text\" name=\"DEPT_CD\" id=\"DEPT_CD\">\r\n        <button type=\"submit\" (click)=\"form2.submit()\">Submit</button>\r\n    </form>-->\r\n    <!--LIVE-->\r\n    <!--<form action=\"https://wbifms.gov.in/GRIPS/DeptVarifyPayment.do\" method=\"post\" #form1 id=\"form1\" name=\"form1\" style=\"display:none\">\r\n        <input type=\"text\" name=\"xmlString\" id=\"xmlString\">\r\n        <input type=\"text\" name=\"Dept_Cd\" id=\"Dept_Cd\">\r\n        <button type=\"submit\" (click)=\"form1.submit()\">Submit</button>\r\n    </form>\r\n\r\n    <form action=\"https://wbifms.gov.in/GRIPS/v1epay.do\" method=\"post\" #form1 id=\"form2\" name=\"form2\" style=\"display:none\">\r\n        <input type=\"text\" name=\"ENCDATA\" id=\"ENCDATA\">\r\n        <input type=\"text\" name=\"DEPT_CD\" id=\"DEPT_CD\">\r\n        <button type=\"submit\" (click)=\"form2.submit()\">Submit</button>\r\n    </form>-->\r\n</div>\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p id=\"mesgSubmit\">{{successMessage}}</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #payInSlipModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"payInSlipModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <fieldset id=\"divUploadPayInSlip\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <label>Bank Deposited Date <span [style.color]=\"!dateOfDepostValid?'red':''\"><b>*</b></span></label>\r\n                            <label class=\"input\">\r\n                                <!--<i class=\"icon-append fa fa-calendar\"></i>-->\r\n                                <input type=\"text\" name=\"depositDate\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                       placeholder=\"DD/MM/YYYY\"\r\n                                       #depositDate=\"ngModel\"\r\n                                       [maxDate]=\"toDayDate\"\r\n                                       [(ngModel)]=\"bankDepositDate\"\r\n                                       value=\"{{ depositedDate | date: 'dd/MM/yyyy' }}\"\r\n                                       [ngClass]=\"{'invalid-data':!dateOfDepostValid, 'valid-data': dateOfDepostValid}\"\r\n                                       required>\r\n                            </label>\r\n                            <div *ngIf=\"!dateOfDepostValid\">\r\n                                <span style=\"color: red;\">Deposited Date is required </span>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\">Scroll Number </label>  <!--<span [style.color]=\"!payInSlipNumberValid?'red':''\"><b>*</b></span>-->\r\n                                <input type=\"text\" class=\"form-control\" name=\"payInSlip\" numbersOnly [(ngModel)]=\"scrollNumber\" />\r\n                                <!--<div *ngIf=\"!payInSlipNumberValid\">\r\n                                    <span style=\"color: red;\">Scroll Number is required </span>\r\n                                </div>-->\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12 smart-form\">\r\n                            <section class=\"col col-6 top-5\">\r\n                                <label class=\"label\">PayIn Slip <span [style.color]=\"!payInSlipUploaded?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"onFileChanged($event, 'payinslip')\">Browse</span>\r\n                                    <input type=\"text\" readonly>\r\n                                </div>\r\n                                <div *ngIf=\"(!payInSlipUploaded) && (payInSlipCertificate.fileName =='' || payInSlipCertificate.fileName == undefined )\">\r\n                                    <span style=\"color: red;\">PayIn Slip is required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr>\r\n                                            <td>{{payInSlipCertificate.fileName}}</td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </section>\r\n                            <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <button type=\"button\" class=\"btn btn-primary\" (click)=\"GenaratePdf()\">\r\n                            Generate Form-IV\r\n                        </button>\r\n                        <div *ngIf=\"!isVisible && (!formIVUploaded) && (formIVCertificate.fileName =='' || formIVCertificate.fileName == undefined )\">\r\n                            <span style=\"color: red;\">Form - IV is required </span>\r\n                        </div>\r\n                        <!--<a class=\"btn btn-success\" (click)=\"GenaratePdf()\">Generate Form-IV</a>-->\r\n                    </div>\r\n                    <div class=\"row\" *ngIf=\"isVisible\">\r\n                        <div class=\"col-12 smart-form\">\r\n                            <section class=\"col col-6 top-5\">\r\n                                <label class=\"label\">Form - IV <span [style.color]=\"!formIVUploaded?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"onFileChanged($event, 'formIV')\">Browse</span>\r\n                                    <input type=\"text\" readonly>\r\n                                </div>\r\n                                <div *ngIf=\"(!formIVUploaded) && (formIVCertificate.fileName =='' || formIVCertificate.fileName == undefined )\">\r\n                                    <span style=\"color: red;\">Form - IV is required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr>\r\n                                            <td>{{formIVCertificate.fileName}}</td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </section>\r\n                            <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                        </div>\r\n                    </div>\r\n                    <!--<section>\r\n                        <div class=\"row\">\r\n                            <div class=\"col col-6\">\r\n                                <label class=\"label\">Form - IV <span [style.color]=\"!formIVUploaded?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\">\r\n                                        <input type=\"file\" id=\"file\">Browse\r\n                                    </span><input type=\"text\" readonly>\r\n                                </div>\r\n                                <div *ngIf=\"(!formIVUploaded) && (formIVCertificate.fileName =='' || formIVCertificate.fileName ==undefined )\">\r\n                                    <span style=\"color: red;\">Form - IV is required </span>\r\n                                </div>\r\n                                <div>\r\n                                    {{formIVCertificate.fileName}}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </section>-->\r\n                </fieldset>\r\n            </div>\r\n\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"savePaySlip()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #gripsFormIVModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"gripsFormIVModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <fieldset id=\"divUploadPayInSlip\">\r\n                    <div class=\"row\">\r\n                        <button type=\"button\" class=\"btn btn-primary\" (click)=\"GenarateGripsFormIV()\">\r\n                            Generate Form-IV\r\n                        </button>\r\n                        <div *ngIf=\"!isVisible && (!formIVUploaded) && (formIVCertificate.fileName =='' || formIVCertificate.fileName == undefined )\">\r\n                            <span style=\"color: red;\">Form - IV is required </span>\r\n                        </div>\r\n                        <!--<a class=\"btn btn-success\" (click)=\"GenaratePdf()\">Generate Form-IV</a>-->\r\n                    </div>\r\n                    <div class=\"row\" *ngIf=\"isVisible\">\r\n                        <div class=\"col-12 smart-form\">\r\n                            <section class=\"col col-6 top-5\">\r\n                                <label class=\"label\">Form - IV <span [style.color]=\"!formIVUploaded?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"onFileChanged($event, 'formIV')\">Browse</span>\r\n                                    <input type=\"text\" readonly>\r\n                                </div>\r\n                                <div *ngIf=\"(!formIVUploaded) && (formIVCertificate.fileName =='' || formIVCertificate.fileName == undefined )\">\r\n                                    <span style=\"color: red;\">Form - IV is required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr>\r\n                                            <td>{{formIVCertificate.fileName}}</td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </section>\r\n                            <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                        </div>\r\n                    </div>\r\n                    <!--<section>\r\n                        <div class=\"row\">\r\n                            <div class=\"col col-6\">\r\n                                <label class=\"label\">Form - IV <span [style.color]=\"!formIVUploaded?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\">\r\n                                        <input type=\"file\" id=\"file\">Browse\r\n                                    </span><input type=\"text\" readonly>\r\n                                </div>\r\n                                <div *ngIf=\"(!formIVUploaded) && (formIVCertificate.fileName =='' || formIVCertificate.fileName ==undefined )\">\r\n                                    <span style=\"color: red;\">Form - IV is required </span>\r\n                                </div>\r\n                                <div>\r\n                                    {{formIVCertificate.fileName}}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </section>-->\r\n                </fieldset>\r\n            </div>\r\n\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"saveGripsFormIV()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #pdfModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"pdfModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Form-IV Pdf</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                Form-IV generated, Please print or download.\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPdf('print')\">\r\n                    Print Form-IV\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPdf('download')\">\r\n                    Download Form-IV\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!--<div bsModal #repayModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"repayModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">RePay</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <div>\r\n                    <form action=\"http://202.61.117.90/GRIPS/DeptVarifyPayment.do\" method=\"post\" #form1 id=\"form1\" name=\"form1\" style=\"display:none\">\r\n                        <input type=\"text\" name=\"ENCDATA\" id=\"ENCDATA\">\r\n                        <input type=\"text\" name=\"DEPT_CD\" value=\"050\">\r\n                        <button type=\"submit\" (click)=\"form1.submit()\">Submit</button>\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    Are you sure to proceed\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"postData()\">\r\n                    Ok\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"repayModal.hide()\">\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>-->\r\n<div bsModal #pfDepositModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">PF Deposit Details Pdf</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                PF Deposit Details generated, Please print or download.\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPFDetailsPdf('print')\">\r\n                    Print PF Deposit Details\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPFDetailsPdf('download')\">\r\n                    Download PF Deposit Details\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #attachModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" backdrop=\"static\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"attachModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Attachment Details</h4>\r\n            </div>\r\n            <div class=\"modal-body\" style=\"max-height:500px\">\r\n                <div class=\"row\" style=\"display:inline-flex;width:100%\">\r\n                    <div style=\"width:100%;padding:5px;overflow:scroll;max-height:470px\">\r\n                        <accordion>\r\n                            <accordion-group heading=\"{{item?.fileName}}\" *ngFor=\"let item of attachments\">\r\n                                <div *ngIf=\"item?.fileName.split('.')[item?.fileName.split('.').length-1]!='pdf'\">\r\n                                    <img [src]=\"'data:image/'+item?.fileName.split('.')[item?.fileName.split('.').length-1]+';base64,'+ item.fileContent\" style=\"max-width:100%\" />\r\n                                </div>\r\n                                <div *ngIf=\"item?.fileName.split('.')[item?.fileName.split('.').length-1]=='pdf'\">\r\n                                    <object [attr.data]=\"item.attachmenturl\" style=\"width:100%;height:400px\" type=\"application/pdf\"></object>\r\n                                </div>\r\n                            </accordion-group>\r\n                        </accordion>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"attachModal.hide()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/agent-pf-deposited-list/agent-pf-deposited-list.component.ts":
/*!************************************************************************************!*\
  !*** ./src/app/claim/agent-pf-deposited-list/agent-pf-deposited-list.component.ts ***!
  \************************************************************************************/
/*! exports provided: AgentPfDepositedListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgentPfDepositedListComponent", function() { return AgentPfDepositedListComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var AgentPfDepositedListComponent = /** @class */ (function () {
    function AgentPfDepositedListComponent(router, route, dataService, user, httpClient, sanitizer) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.httpClient = httpClient;
        this.sanitizer = sanitizer;
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
        this.pFDepositDetails = {};
        this.payInSlipUploaded = true;
        this.dateOfDepostValid = true;
        this.data = {};
        this.payInSlipCertificate = {};
        //mainUpload: AttachmentModel;
        this.formIVCertificate = {};
        this.formIVUploaded = true;
        this.FormIVDetail = {};
        this.isVisible = false;
        this.attachments = [];
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        this.toDayDate = new Date();
    }
    AgentPfDepositedListComponent.prototype.ngOnInit = function () {
        this.userName = this.user.user.userName;
        this.userCode = this.user.user.userTypeName;
        this.getPFDepositedItemsByAgent(this.user.user.deptUserid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["PFDepositeStatus"].deposited, this.page, this.pageSize);
    };
    AgentPfDepositedListComponent.prototype.getPFDepositedItemsByAgent = function (userId, status, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getPFDepositStatusDetailsByAgentId(userId, status, pageNo, pageSize)
            .subscribe(function (data) {
            debugger;
            _this.pFDepositDetails = data;
            _this.totalRows = _this.pFDepositDetails.rowCount;
        });
    };
    AgentPfDepositedListComponent.prototype.changepage = function (page) {
        this.getPFDepositedItemsByAgent(this.user.user.deptUserid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["PFDepositeStatus"].deposited, page, this.pageSize);
    };
    AgentPfDepositedListComponent.prototype.onFileChanged = function (inputValue, attachmentType) {
        var _this = this;
        var file = inputValue.target.files[0];
        if (file.type === "application/pdf" || file.type.includes("image/")) {
            if (file.size > 2000000) {
                alert("File is too big!");
                return;
            }
            ;
            var myReader = new FileReader();
            myReader.onloadend = function (e) {
                var model = {};
                model.fileName = file.name;
                model.filePath = "test";
                model.fileContent = myReader.result.toString().split(',')[1];
                model.statusId = 1;
                model.attachmentType = attachmentType == "payinslip" ? _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["AttachmentType"].PayinSlip : _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["AttachmentType"].FormIV;
                model.pfDepositId = _this.depositId;
                model.createdBy = _this.user.user.deptUserid;
                //this.payInSlip = model;
                if (attachmentType == "payinslip")
                    _this.payInSlipCertificate = model;
                else
                    _this.formIVCertificate = model;
            };
            myReader.readAsDataURL(file);
        }
        else {
            alert("Only accept pdf and images");
        }
    };
    AgentPfDepositedListComponent.prototype.okClick = function () {
        this.successModal.hide();
        this.getPFDepositedItemsByAgent(this.user.user.deptUserid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["PFDepositeStatus"].deposited, this.page, this.pageSize);
    };
    AgentPfDepositedListComponent.prototype.upload = function (details) {
        this.depositId = details.pfDepositId;
        this.clearData();
        this.payInSlipModal.show();
    };
    AgentPfDepositedListComponent.prototype.uploadGripsFormIV = function (details) {
        this.depositId = details.pfDepositId;
        this.bankDepositDate = details.depositDate;
        this.isVisible = false;
        //this.clearData();
        this.payInSlipCertificate = {};
        this.formIVCertificate = {};
        this.gripsFormIVModal.show();
    };
    AgentPfDepositedListComponent.prototype.savePaySlip = function () {
        var _this = this;
        debugger;
        if (this.validatePayInSlip()) {
            this.data.bankDepositDate = this.bankDepositDate;
            this.data.scrollNumber = (this.scrollNumber == undefined || this.scrollNumber == null) ? 0 : this.scrollNumber;
            this.data.payInSlipAttachment = this.payInSlipCertificate;
            this.data.formIVAttachment = this.formIVCertificate;
            //this.payInSlipCertificate.bankDepositDate = this.bankDepositDate;
            //this.payInSlipCertificate.scrollNumber = this.scrollNumber;
            if (confirm("Are you sure to proceed ")) {
                this.dataService
                    .savePayInSlip(this.data)
                    .then(function (data) {
                    if (data) {
                        _this.successMessage = "PayIn Slip Uploaded successfully";
                    }
                    else {
                        _this.successMessage = "PayIn Slip Not Uploaded";
                    }
                    _this.payInSlipModal.hide();
                    _this.successModal.show();
                });
            }
        }
    };
    AgentPfDepositedListComponent.prototype.saveGripsFormIV = function () {
        var _this = this;
        debugger;
        if (this.validateForFormIV()) {
            this.data.bankDepositDate = this.bankDepositDate;
            this.data.scrollNumber = 0;
            this.data.payInSlipAttachment = null;
            this.data.formIVAttachment = this.formIVCertificate;
            //this.payInSlipCertificate.bankDepositDate = this.bankDepositDate;
            //this.payInSlipCertificate.scrollNumber = this.scrollNumber;
            if (confirm("Are you sure to proceed ")) {
                this.dataService
                    .savePayInSlip(this.data)
                    .then(function (data) {
                    if (data) {
                        _this.successMessage = "Form IV Uploaded successfully";
                    }
                    else {
                        _this.successMessage = "Form IV Not Uploaded";
                    }
                    _this.gripsFormIVModal.hide();
                    _this.successModal.show();
                });
            }
        }
    };
    AgentPfDepositedListComponent.prototype.validatePayInSlip = function () {
        debugger;
        var isValid = this.dateOfDepostValid = this.payInSlipUploaded = this.formIVUploaded = true; //this.payInSlipNumberValid =
        if (this.bankDepositDate == null && this.bankDepositDate == undefined) {
            isValid = this.dateOfDepostValid = false;
        }
        // if (this.scrollNumber == null && this.scrollNumber == undefined) { isValid = this.payInSlipNumberValid = false; }
        if (this.payInSlipCertificate.fileName == null && this.payInSlipCertificate.fileName == undefined) {
            isValid = this.payInSlipUploaded = false;
        }
        if (this.formIVCertificate.fileName == null && this.formIVCertificate.fileName == undefined) {
            isValid = this.formIVUploaded = false;
        }
        return isValid;
    };
    AgentPfDepositedListComponent.prototype.validateForFormIV = function () {
        debugger;
        var isValid = true; //this.payInSlipNumberValid = 
        if (this.formIVCertificate.fileName == null && this.formIVCertificate.fileName == undefined) {
            isValid = this.formIVUploaded = false;
        }
        return isValid;
    };
    AgentPfDepositedListComponent.prototype.clearData = function () {
        this.bankDepositDate = null;
        this.scrollNumber = null;
        this.isVisible = false;
        this.payInSlipCertificate = {};
        this.formIVCertificate = {};
    };
    AgentPfDepositedListComponent.prototype.GenaratePdf = function () {
        this.dateOfDepostValid = true;
        if (this.bankDepositDate == null && this.bankDepositDate == undefined) {
            this.dateOfDepostValid = false;
        }
        else
            this.pdfModal.show();
    };
    AgentPfDepositedListComponent.prototype.GenarateGripsFormIV = function () {
        this.pdfModal.show();
    };
    AgentPfDepositedListComponent.prototype.downLoadPdf = function (type) {
        var _this = this;
        debugger;
        this.FormIVDetail.lwfccode = this.userName;
        this.FormIVDetail.bankdepositdate = this.bankDepositDate;
        this.FormIVDetail.scrollno = (this.scrollNumber == null || this.scrollNumber == undefined ? 0 : this.scrollNumber);
        this.FormIVDetail.depositId = this.depositId;
        this.dataService
            .genaratePdfFormIV(this.FormIVDetail)
            .then(function (data) {
            debugger;
            var blob = new Blob([data.body], { type: 'application/pdf' });
            if (type == 'print') {
                var blobUrl = URL.createObjectURL(blob);
                var iframe = document.createElement('iframe');
                iframe.style.display = 'none';
                iframe.src = blobUrl;
                document.body.appendChild(iframe);
                iframe.contentWindow.print();
            }
            else {
                file_saver__WEBPACK_IMPORTED_MODULE_6__["saveAs"](blob, "Form-IV.pdf");
            }
            _this.pdfModal.hide();
            _this.isVisible = true;
        });
    };
    AgentPfDepositedListComponent.prototype.onRePayClick = function (item) {
        var _this = this;
        debugger;
        if (confirm("Are you sure to proceed ")) {
            this.dataService
                .repayToGrips(item.pfDepositId)
                .subscribe(function (data) {
                debugger;
                if (data) {
                    _this.encData = data;
                    var input = document.getElementById('ENCDATA');
                    input.value = _this.encData;
                    var input1 = document.getElementById('DEPT_CD');
                    input1.value = item.gripsDeptCode;
                    var myForm = document.getElementById('form2');
                    myForm.action = src_environments_environment__WEBPACK_IMPORTED_MODULE_9__["environment"].gripsurl;
                    myForm.submit();
                    //this.successMessage = "PF amount sucessfully deposited";
                }
                else {
                    _this.successMessage = "Invalid transaction";
                    _this.successModal.show();
                }
                //this.successModal.show();
            });
        }
        //this.repayModal.show();
    };
    AgentPfDepositedListComponent.prototype.postData = function () {
        var myForm = document.getElementById('form1');
        myForm.submit();
    };
    AgentPfDepositedListComponent.prototype.onVerifyClick = function (item) {
        var _this = this;
        if (confirm("Are you sure to proceed ")) {
            this.dataService
                .postDoubleVerificationGrips(item.pfDepositId)
                .subscribe(function (data) {
                debugger;
                if (data) {
                    _this.encData = data;
                    var input = document.getElementById('xmlString');
                    input.value = _this.encData;
                    var input1 = document.getElementById('Dept_Cd');
                    input1.value = item.gripsDeptCode;
                    var myForm = document.getElementById('form1');
                    myForm.action = src_environments_environment__WEBPACK_IMPORTED_MODULE_9__["environment"].gripsverifyurl;
                    myForm.submit();
                }
                else {
                    _this.successMessage = "Invalid transaction";
                    _this.successModal.show();
                }
            });
        }
    };
    AgentPfDepositedListComponent.prototype.onPDFViewClick = function (item) {
        debugger;
        this.pfDepositId = item.pfDepositId;
        this.pfDepositModal.show();
    };
    AgentPfDepositedListComponent.prototype.downLoadPFDetailsPdf = function (type) {
        var _this = this;
        debugger;
        this.dataService
            .downloadPFDepositDetails(this.pfDepositId)
            .then(function (data) {
            var blob = new Blob([data.body], { type: 'application/pdf' });
            if (type == 'print') {
                var blobUrl = URL.createObjectURL(blob);
                var iframe = document.createElement('iframe');
                iframe.style.display = 'none';
                iframe.src = blobUrl;
                document.body.appendChild(iframe);
                iframe.contentWindow.print();
            }
            else {
                file_saver__WEBPACK_IMPORTED_MODULE_6__["saveAs"](blob, "PFDepositDetails.pdf");
            }
            _this.pfDepositModal.hide();
        });
    };
    AgentPfDepositedListComponent.prototype.getAttachments = function (pfdepositId) {
        var _this = this;
        debugger;
        //this.isVisible = true;
        this.dataService.getPFDepositAttachments(pfdepositId)
            .subscribe(function (data) {
            if (data) {
                _this.attachments = data;
                if (_this.attachments != null && _this.attachments.length > 0) {
                    for (var j = 0; j < _this.attachments.length; j++) {
                        //let attachment = this.claim.educationDetails.educationDetailList[i].attachmentDetailsList[j];
                        if (_this.attachments[j].fileName.split('.')[_this.attachments[j].fileName.split('.').length - 1] == 'pdf') {
                            _this.attachments[j].attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + _this.attachments[j].fileContent);
                        }
                    }
                    //this.attachments = payInSlip;
                }
                _this.attachModal.show();
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('payInSlipModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentPfDepositedListComponent.prototype, "payInSlipModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentPfDepositedListComponent.prototype, "successModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('pdfModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentPfDepositedListComponent.prototype, "pdfModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('pfDepositModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentPfDepositedListComponent.prototype, "pfDepositModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('gripsFormIVModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentPfDepositedListComponent.prototype, "gripsFormIVModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('attachModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], AgentPfDepositedListComponent.prototype, "attachModal", void 0);
    AgentPfDepositedListComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-agent-pf-deposited-list',
            template: __webpack_require__(/*! ./agent-pf-deposited-list.component.html */ "./src/app/claim/agent-pf-deposited-list/agent-pf-deposited-list.component.html"),
            styles: [__webpack_require__(/*! ./agent-pf-deposited-list.component.css */ "./src/app/claim/agent-pf-deposited-list/agent-pf-deposited-list.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"], _angular_common_http__WEBPACK_IMPORTED_MODULE_7__["HttpClient"], _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__["DomSanitizer"]])
    ], AgentPfDepositedListComponent);
    return AgentPfDepositedListComponent;
}());



/***/ }),

/***/ "./src/app/claim/agent-referrall/agent-referrall.component.css":
/*!*********************************************************************!*\
  !*** ./src/app/claim/agent-referrall/agent-referrall.component.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/agent-referrall/agent-referrall.component.html":
/*!**********************************************************************!*\
  !*** ./src/app/claim/agent-referrall/agent-referrall.component.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>Refer Claims</h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <!--<div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>-->\r\n                        <div class=\"ssv-search\">\r\n                            <input type=\"text\" [(ngModel)]=\"ssinSearchText\" placeholder=\"SSIN Search..\" class=\"advancedSearchTextbox\" NumbersOnly>\r\n                            <input type=\"text\" [(ngModel)]=\"claimReferenceNoText\" placeholder=\"Claim Reference No Search..\" class=\"advancedSearchTextbox\" NumbersOnly minlength=\"12\" maxlength=\"12\">\r\n                            <button (click)=\"GetResults()\"><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n                        <p></p>\r\n\r\n                        <table class=\"table table-striped\" [mfData]=\"claimsData\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"ssin\">SSIN</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"benName\">Beneficiary Name</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimRefernceNo\">Claim Reference No</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"submittedDate\">Submission Date</mfDefaultSorter>\r\n                                    </th>\r\n\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimAmount\">Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"statusName\">Status</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"lastActionDateString\">Last Action</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let claims of mf.data|grdFilter: {ssin:searchText,benName:searchText, claimRefernceNo: searchText,submittedDateString: searchText, claimAmount: searchText, claimType: searchText,\r\n           statusName: searchText, lastActionDateString: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <a (click)=\"onEditClaimClick(claims)\" *ngIf=\"claims.isEdit\" title=\"Edit\" class=\"txt-color-red\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n                                        <a (click)=\"onViewClaimClick(claims)\" *ngIf=\"!claims.isEdit\" title=\"View\" class=\"txt-color-red\"><i class=\"fa fa-eye\"></i></a>\r\n                                        <a (click)=\"downloadRecept(claims)\" title=\"Receipt\" class=\"txt-color-red\"><i class=\"fa fa-file-pdf-o\"></i></a>\r\n                                        <a (click)=\"onTrackClaimClick(claims)\" title=\"Track\" class=\"txt-color-red\"><i class=\"fa fa-recycle\"></i></a>\r\n                                    </td>\r\n                                    <td>{{claims.ssin}}</td>\r\n                                    <td>{{claims.benName}}</td>\r\n                                    <td>{{claims.claimRefernceNo}}</td>\r\n                                    <td>{{claims.submittedDateString}}</td>\r\n                                    <td>{{claims.claimAmount}}</td>\r\n                                    <td>{{claims.statusName}}</td>\r\n                                    <td>{{claims.lastActionDateString}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n\r\n\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"9\">\r\n                                        <div *ngIf=\"claimsData.length>0\">\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                            <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</section>"

/***/ }),

/***/ "./src/app/claim/agent-referrall/agent-referrall.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/claim/agent-referrall/agent-referrall.component.ts ***!
  \********************************************************************/
/*! exports provided: AgentReferrallComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgentReferrallComponent", function() { return AgentReferrallComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var AgentReferrallComponent = /** @class */ (function () {
    function AgentReferrallComponent(router, dataService, userService) {
        this.router = router;
        this.dataService = dataService;
        this.userService = userService;
        this.claimsData = [];
        this.p = 1;
        this.order = 'description';
        this.reverse = false;
        //Paging props start
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
    }
    AgentReferrallComponent.prototype.setOrder = function (value) {
        if (this.order === value) {
            this.reverse = !this.reverse;
        }
    };
    AgentReferrallComponent.prototype.ngOnInit = function () {
        if (this.userService.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["UserType"].CA.toString())
            this.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].CA;
        else if (this.userService.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["UserType"].Lwfc.toString())
            this.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Lwfc;
        else
            this.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Agent;
        this.getReferralClaimsByAgentID(this.userService.user.deptUserid, this.entryPoint, "0", "0", this.page, this.pageSize);
    };
    AgentReferrallComponent.prototype.onChangePage = function (pageOfItems) {
        // update current page of items
        this.pageOfItems = pageOfItems;
    };
    AgentReferrallComponent.prototype.getReferralClaimsByAgentID = function (id, entrypoint, ssin, claimRefNo, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getAllReferralClaimsByAgent(id, entrypoint, ssin, claimRefNo, pageNo, pageSize)
            .subscribe(function (data) {
            _this.claimsData = data.results;
            _this.totalRows = data.rowCount;
        });
    };
    AgentReferrallComponent.prototype.getDate = function (datestring) {
        return new Date(datestring).toLocaleDateString();
    };
    AgentReferrallComponent.prototype.trackClaim = function (item) {
        this.router.navigate(['claim/ClaimTrack'], { skipLocationChange: true });
    };
    AgentReferrallComponent.prototype.onEditClaimClick = function (item) {
        this.router.navigate(['claim/agentclaimentry', { claimId: item.claimId, mode: "referal", claimStatus: item.statusId, tranctionType: item.claimType }], { skipLocationChange: true });
    };
    AgentReferrallComponent.prototype.onViewClaimClick = function (item) {
        this.router.navigate(['claim/ClaimView', { claimId: item.claimId, tranctionType: item.claimType, transactionId: item.transactionId, mode: "referal", workflowId: _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["WorkflowTrans"].workflowreferral }], { skipLocationChange: true });
    };
    AgentReferrallComponent.prototype.onTrackClaimClick = function (item) {
        this.router.navigate(['claim/ClaimTrack', { transactionId: item.transactionId, tranctionType: item.claimType, mode: "agentreferal", workflowId: _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["WorkflowTrans"].workflowreferral }], { skipLocationChange: true });
    };
    AgentReferrallComponent.prototype.getTypeName = function (claimType) {
        if (_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["ClaimConstants"][claimType] == 2) {
            return "Health & Family";
        }
        return claimType;
    };
    AgentReferrallComponent.prototype.downloadRecept = function (claim) {
        this.dataService
            .downloadReceipt(claim.benName, claim.ssin, claim.claimRefernceNo, claim.claimAmount, this.getTypeName(claim.claimType))
            .then(function (data) {
            var dd = data;
            var url = window.URL.createObjectURL(data);
            window.open(url);
        });
    };
    AgentReferrallComponent.prototype.changepage = function (page) {
        this.getReferralClaimsByAgentID(this.userService.user.deptUserid, this.entryPoint, "0", "0", this.page, this.pageSize);
    };
    AgentReferrallComponent.prototype.GetResults = function () {
        if ((this.ssinSearchText != null && this.ssinSearchText != undefined) || (this.claimReferenceNoText != null && this.claimReferenceNoText != undefined)) {
            if (this.ssinSearchText != null && this.ssinSearchText != undefined && this.ssinSearchText != "")
                this.strSSIN = this.ssinSearchText.trim();
            else
                this.strSSIN = "0";
            if (this.claimReferenceNoText != null && this.claimReferenceNoText != undefined && this.claimReferenceNoText != "")
                this.strClaimRefNo = this.claimReferenceNoText.trim();
            else
                this.strClaimRefNo = "0";
            //this.dataService
            //    .getSearchAllReferralClaimsByAgent(this.userService.user.deptUserid, this.entryPoint, this.strSSIN, this.strClaimRefNo, pagination.pageNo, pagination.pageSize)
            //    .subscribe((data: any) => {
            //        this.claimsData = data.results;
            //        this.totalRows = data.rowCount;
            //    });
            this.getReferralClaimsByAgentID(this.userService.user.deptUserid, this.entryPoint, this.strSSIN, this.strClaimRefNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize);
        }
    };
    AgentReferrallComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-agent-referrall',
            template: __webpack_require__(/*! ./agent-referrall.component.html */ "./src/app/claim/agent-referrall/agent-referrall.component.html"),
            styles: [__webpack_require__(/*! ./agent-referrall.component.css */ "./src/app/claim/agent-referrall/agent-referrall.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], AgentReferrallComponent);
    return AgentReferrallComponent;
}());



/***/ }),

/***/ "./src/app/claim/ben-pf-details/ben-pf-details.component.css":
/*!*******************************************************************!*\
  !*** ./src/app/claim/ben-pf-details/ben-pf-details.component.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/ben-pf-details/ben-pf-details.component.html":
/*!********************************************************************!*\
  !*** ./src/app/claim/ben-pf-details/ben-pf-details.component.html ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div id=\"content\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>Beneficiary PF Details </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <form class=\"smart-form \">\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">SSIN/PF No.: <span [style.color]=\"!ssnNoValid?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <i class=\"icon-append fa fa-search\" (click)=\"searchSSINNo(ssin)\"></i>\r\n                                                <input type=\"text\" name=\"benSno\" class=\"form-control\" [(ngModel)]=\"ssin\" placeholder=\"Enter SSIN/PF No.\"\r\n                                                       (change)=\"searchSSINNo($event.target.value)\"\r\n                                                       (keydown.enter)=\"searchSSINNo($event.target.value)\" NumbersOnly maxlength=\"50\"\r\n                                                       #benSno=\"ngModel\"\r\n                                                       [ngClass]=\"{'invalid-data': benSno.invalid && (!ssnNoValid || benSno.touched), 'valid-data': benSno.valid && ssnNoValid}\"\r\n                                                       required>\r\n                                            </label>\r\n                                            <div *ngIf=\"benSno.invalid && (!ssnNoValid ||benSno.touched)\">\r\n                                                <span style=\"color: red;\">SSIN/PF No. is required </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\" *ngIf=\"isMessageVisible \">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>SSIN/PF No. is not exists.</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                    <p></p>\r\n                                    <div class=\"row\" *ngIf=\"isVisibleBenPFDetails\">\r\n                                        <table class=\"table table-striped\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <!--<th>\r\n                                Beneficiary Name\r\n                            </th>\r\n                            <th>\r\n                                SSIN No.\r\n                            </th>\r\n                            <th>\r\n                                PF Account Id\r\n                            </th>-->\r\n                                                    <th>\r\n                                                        Month\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Year\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Date\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Amount\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Description\r\n                                                    </th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr *ngFor=\"let pf of benPFDetails\">\r\n                                                    <!--<td>{{pf.benFullName}}</td>\r\n                            <td>{{pf.ssI_Number}}</td>\r\n                            <td>{{pf.benPFAccountId}}</td>-->\r\n                                                    <td>{{pf.monthName}}</td>\r\n                                                    <td>{{pf.financialYearString}}</td>\r\n                                                    <td>{{pf.collectionDateString}}</td>\r\n                                                    <td>{{pf.collectionAmount}}</td>\r\n                                                    <td>{{pf.description}}</td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                            <tfoot>\r\n                                                <tr>\r\n                                                    <td colspan=\"5\">\r\n                                                        <div *ngIf=\"benPFDetails.length>0\">\r\n                                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changePage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tfoot>\r\n                                        </table>\r\n                                    </div>\r\n                                    <footer class=\"modal-footer\">\r\n                                        <a class=\"btn btn-danger\" (click)=\"cancelClick()\"> Cancel</a>\r\n                                    </footer>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/claim/ben-pf-details/ben-pf-details.component.ts":
/*!******************************************************************!*\
  !*** ./src/app/claim/ben-pf-details/ben-pf-details.component.ts ***!
  \******************************************************************/
/*! exports provided: BenPfDetailsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BenPfDetailsComponent", function() { return BenPfDetailsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var BenPfDetailsComponent = /** @class */ (function () {
    function BenPfDetailsComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.benPFDetails = [];
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
        this.ssnNoValid = true;
        this.isVisibleBenPFDetails = false;
        this.isMessageVisible = false;
    }
    BenPfDetailsComponent.prototype.ngOnInit = function () {
    };
    BenPfDetailsComponent.prototype.searchSSINNo = function (id) {
        if (id != undefined && id.trim() != "") {
            this.getBeneficiaryPFDetails(id, this.page, this.pageSize);
        }
        else
            this.ssnNoValid = false;
    };
    BenPfDetailsComponent.prototype.getBeneficiaryPFDetails = function (id, page, pageSize) {
        var _this = this;
        this.dataService
            .getBeneficiaryPFDetails(id.trim(), page, pageSize)
            .subscribe(function (data) {
            debugger;
            if (data != null && (data.rowCount > 0)) {
                _this.isVisibleBenPFDetails = true;
                _this.benPFDetails = data.results;
                _this.totalRows = data.rowCount;
                _this.isMessageVisible = false;
            }
            else {
                _this.isVisibleBenPFDetails = false;
                _this.isMessageVisible = true;
            }
        });
    };
    BenPfDetailsComponent.prototype.changePage = function (page) {
        debugger;
        this.getBeneficiaryPFDetails(this.ssin, page, this.pageSize);
    };
    BenPfDetailsComponent.prototype.cancelClick = function () {
        debugger;
        if (this.user.user.userTpe == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["UserType"].Beneficiary.toString())
            // this.router.navigate(['pfconfig/receiptbooklist'], { skipLocationChange: true });
            window.location.href = "Home/Dashboard";
        else
            window.location.href = "Home/DeptDashboard";
    };
    BenPfDetailsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-ben-pf-details',
            template: __webpack_require__(/*! ./ben-pf-details.component.html */ "./src/app/claim/ben-pf-details/ben-pf-details.component.html"),
            styles: [__webpack_require__(/*! ./ben-pf-details.component.css */ "./src/app/claim/ben-pf-details/ben-pf-details.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_3__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_2__["UserService"]])
    ], BenPfDetailsComponent);
    return BenPfDetailsComponent;
}());



/***/ }),

/***/ "./src/app/claim/bulkpfdeposit/bulkpfdeposit.component.css":
/*!*****************************************************************!*\
  !*** ./src/app/claim/bulkpfdeposit/bulkpfdeposit.component.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/bulkpfdeposit/bulkpfdeposit.component.html":
/*!******************************************************************!*\
  !*** ./src/app/claim/bulkpfdeposit/bulkpfdeposit.component.html ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-sm-12 col-md-12 col-lg-12 nocollapse\">\r\n\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n\r\n                <header>\r\n                    <h2>Legacy PF Data Entry</h2>\r\n                </header>\r\n\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <!-- widget edit box -->\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <form class=\"smart-form \">\r\n                            <!--smart-form-main-->\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <section class=\"col col-4\" *ngIf=\"isDepartmentUser\">\r\n                                            <label class=\"input\">\r\n                                                <strong>ARN Number: </strong><span [style.color]=\"!ARNReq?'red':''\"><b>*</b></span>\r\n                                                <select class=\"form-control select\" name=\"agentName\" id=\"ddlAgentName\" [(ngModel)]=\"agentUserId\"\r\n                                                        (change)=\"agentChange($event.target.value)\">\r\n                                                    <option value=\"0\" selected disabled>Choose ARN</option>\r\n                                                    <option value=\"{{agent.userid}}\" *ngFor=\"let agent of agentList\">{{agent.userCode}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                            <div *ngIf=\"!ARNReq\">\r\n                                                <span style=\"color: red;\">ARN Number is required </span>\r\n                                            </div>\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Agent Name: </strong>{{agentName}}</label>\r\n                                        </section>\r\n\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Location Name: </strong>{{locationName}}</label>\r\n                                        </section>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Worker Type: </strong><span [style.color]=\"!workerTypeReq?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <select class=\"form-control\" id=\"ddlWorkerType\" name=\"workerType\" [(ngModel)]=\"workerTypeId\"\r\n                                                        (change)=\"workerTypeChange($event.target.value)\">\r\n                                                    <option value=\"0\" selected disabled>Choose an Option</option>\r\n                                                    <option value=\"{{type.workerTypeId}}\" *ngFor=\"let type of WorkerTypeList\">{{type.workerTypeName}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                            <div *ngIf=\"!workerTypeReq\">\r\n                                                <span style=\"color: red;\">Worker Type is required </span>\r\n                                            </div>\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label>\r\n                                                <strong>Deposit Date: </strong><span [style.color]=\"!depositDateReq?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <label class=\"input\">\r\n                                                <i class=\"icon-append fa fa-calendar\"></i>\r\n                                                <input type=\"text\" name=\"depositedDate\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                       [maxDate]=\"toDayDate\" (bsValueChange)=\"depositDateChange($event)\"\r\n                                                       placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"depositDate\"\r\n                                                       value=\"{{depositDate | date: 'dd/MM/yyyy' }}\">\r\n                                            </label>\r\n                                            <div *ngIf=\"!depositDateReq\">\r\n                                                <span style=\"color: red;\">Deposit Date is required </span>\r\n                                            </div>\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Deposit A/c Number: </strong><span [style.color]=\"!depositBankValid?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <select class=\"form-control\" id=\"ddlDepositBank\" name=\"depositBank\" [(ngModel)]=\"bankId\"\r\n                                                        (change)=\"bankChange($event.target.value)\">\r\n                                                    <option value=\"0\" selected disabled>Choose an Option</option>\r\n                                                    <option value=\"{{bank.rloOfficeBankId}}\" *ngFor=\"let bank of bankDetails\">{{bank.bankAccountNo}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                            <div *ngIf=\"!depositBankValid\">\r\n                                                <span style=\"color: red;\">Deposit A/c Number is required </span>\r\n                                            </div>\r\n                                        </section>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Deposit Amount: </strong><span [style.color]=\"!depositedAmountReq?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <input type=\"text\" class=\"form-control\" name=\"depositedAmount\" placeholder=\"Deposit Amount\" [(ngModel)]=\"depositedAmount\"\r\n                                                       (change)=\"depositedAmountChange($event.target.value)\" (keydown.enter)=\"depositedAmountChange($event.target.value)\" NumbersOnly min=\"=1\" />\r\n                                            </label>\r\n                                            <div *ngIf=\"!depositedAmountReq\">\r\n                                                <span style=\"color: red;\">Deposit Amount is required </span>\r\n                                            </div>\r\n                                            <!--<div *ngIf=\"agentDepositAmountValidation\">\r\n                                                <span style=\"color: red;\">Deposit amount allow only {{pfMasterConfig.agentCollectionLimit}} </span>\r\n                                            </div>-->\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Payin Slip: </strong></label>\r\n                                            <label class=\"input\">\r\n                                                <input type=\"text\" class=\"form-control\" name=\"payinSlip\" placeholder=\"Payin Slip\" [(ngModel)]=\"payinSlip\" />\r\n                                            </label>\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Upload PayIn Slip: </strong> <span [style.color]=\"!payInSlipUploaded?'red':''\"><b>*</b></span></label>\r\n                                            <div class=\"input input-file\">\r\n                                                <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"onFileChanged($event)\">Browse</span>\r\n                                                <input type=\"text\" readonly>\r\n\r\n                                            </div>\r\n                                            <div *ngIf=\"(!payInSlipUploaded) && (payInSlipCertificate.fileName =='' || payInSlipCertificate.fileName == undefined )\">\r\n                                                <span style=\"color: red;\">Upload PayIn Slip is required </span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <table>\r\n                                                    <tr>\r\n                                                        <td>{{payInSlipCertificate.fileName}}</td>\r\n                                                    </tr>\r\n                                                </table>\r\n                                            </div>\r\n                                            <label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                        </section>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <!--<div class=\"row\">\r\n        <a class=\"btn btn-primary\" (click)=\"openModel()\" style=\"width :55px;height:30px;padding:5px;\"> Add </a>\r\n    </div>-->\r\n                                    <div class=\"modal-footer\" *ngIf=\"isDepartmentUser\">\r\n                                        <div class=\"row\">\r\n                                            <button type=\"button\" class=\"btn btn-primary\" (click)=\"addReceiptBook()\">\r\n                                                Add Receipt Book\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <table class=\"table table-striped table-bordered\" width=\"100%\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>\r\n                                                        SSIN/PF No\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Beneficiary Name\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Beneficiary SSIN/PF No\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Collection Date\r\n                                                    </th>\r\n                                                    <th width=\"300\">\r\n                                                        Month\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Amount\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Book No\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Receipt No\r\n                                                    </th>\r\n                                                    <th>Action</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr *ngFor=\"let field of pfCollectionDetailsList; let i = index\">\r\n                                                    <td>\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <!--<input [(ngModel)]=\"field.ssI_Number\" class=\"form-control\" type=\"text\" name=\"{{field.ssI_Number}}\" />-->\r\n                                                                <span>{{field.ssI_Number}}</span>\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <input type=\"text\" id=\"benSno\" name=\"{{field.ssI_Number}}\" [(ngModel)]=\"field.ssI_Number\" placeholder=\"Beneficiary SSIN\"\r\n                                                                       (change)=\"searchSSINNo($event.target.value)\" (keydown.enter)=\"searchSSINNo($event.target.value)\" maxlength=\"50\"\r\n                                                                       [ngClass]=\"{'invalid-data':!ssinValid, 'valid-data': ssinValid}\"\r\n                                                                       required>\r\n                                                            </label>\r\n                                                            <div *ngIf=\"(!ssinValid )\">\r\n                                                                <span style=\"color: red;\">Beneficiary SSIN is required </span>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"(!validPFNo )\">\r\n                                                                <span style=\"color: red;\">Beneficiary doesn't have PF Account NO. </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <span>{{field.benFullName}}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <span>{{field.benSSINOrPFAccountNo}}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <!--<input [(ngModel)]=\"field.collectionDate\" class=\"form-control\" type=\"text\" value=\"{{field.collectionDate | date: 'dd/MM/yyyy' }}\" />-->\r\n                                                                {{field.collectionDate | date: 'dd/MM/yyyy' }}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <input type=\"text\" name=\"{{field.collectionDate}}\" autocomplete=\"off\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                                       [maxDate]=\"collectionMinDt\" [minDate]=\"minDt\" [disabled]=\"disableCollectionDate\" (bsValueChange)=\"collectionDateChange($event)\"\r\n                                                                       placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"field.collectionDate\"\r\n                                                                       value=\"{{field.collectionDate | date: 'dd/MM/yyyy' }}\" [ngClass]=\"{'invalid-data': (!collectionDateReq), 'valid-data': collectionDateReq}\"\r\n                                                                       readonly required>\r\n                                                            </label>\r\n                                                            <div *ngIf=\"!collectionDateReq\">\r\n                                                                <span style=\"color: red;\">Collection Date is required </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td width=\"230\" style=\"padding-right:3%\">\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <!--<input [(ngModel)]=\"field.monthName\" class=\"form-control\" type=\"text\" name=\"{{field.monthName}}\" />-->\r\n                                                                {{field.monthName}}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <ng-multiselect-dropdown name=\"editMonths\" [placeholder]=\"'All'\"\r\n                                                                                     [data]=\"pfMonths\"\r\n                                                                                     [(ngModel)]=\"field.selectedMonths\"\r\n                                                                                     [settings]=\"monthSettings\"\r\n                                                                                     (onSelect)=\"onItemSelect($event, field)\"\r\n                                                                                     style=\"height:36%\">\r\n                                                            </ng-multiselect-dropdown>\r\n                                                            <div *ngIf=\"!pfMonthIsValid\">\r\n                                                                <span style=\"color: red;\">Month is required </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <!--<input [(ngModel)]=\"field.collectionAmount\" class=\"form-control\" type=\"text\" name=\"{{field.collectionAmount}}\" />-->\r\n                                                                {{field.collectionAmount}}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <input type=\"text\" name=\"{{field.collectionAmount}}\" placeholder=\"Amount\" [(ngModel)]=\"field.collectionAmount\" NumbersOnly\r\n                                                                      required />\r\n                                                            </label>\r\n                                                            <div *ngIf=\"!amountReq\">\r\n                                                                <span style=\"color: red;\">Amount is required </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <!--<input [(ngModel)]=\"field.bookName\" class=\"form-control\" type=\"text\" name=\"{{field.bookName}}\" />-->\r\n                                                                {{field.bookName}}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <select name=\"{{field.bookNo}}\" [(ngModel)]=\"field.bookNo\"\r\n                                                                        [ngClass]=\"{'invalid-data': !bookNoIsValid, 'valid-data': bookNoIsValid }\"\r\n                                                                        required (change)=\"bookChange($event)\">\r\n                                                                    <option value=\"0\" selected disabled>Choose book</option>\r\n                                                                    <option value=\"{{book.id}}\" *ngFor=\"let book of agentReceiptBooks\">{{book.bookNo}}</option>\r\n                                                                </select>\r\n                                                            </label>\r\n                                                            <div *ngIf=\"!bookNoIsValid\">\r\n                                                                <span style=\"color: red;\">Book No. is required </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <!--<input [(ngModel)]=\"field.receiptNo\" class=\"form-control\" type=\"text\" name=\"{{field.receiptNo}}\" />-->\r\n                                                                {{field.receiptNo}}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <input type=\"text\" name=\"{{field.receiptNo}}\" placeholder=\"Receipt No\" [(ngModel)]=\"field.receiptNo\" NumbersOnly maxlength=\"6\"\r\n                                                                       (change)=\"receiptNoChange(field.bookNo, $event.target.value)\" (keydown.enter)=\"receiptNoChange(field.bookNo,$event.target.value)\"\r\n                                                                       [ngClass]=\"{'invalid-data':!receiptNoIsValid, 'valid-data':receiptNoIsValid}\"\r\n                                                                       required />\r\n                                                            </label>\r\n                                                            <div *ngIf=\"!receiptNoIsValid\">\r\n                                                                <span style=\"color: red;\">Receipt No. is required </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <a *ngIf=\"!field.isEdit\" (click)=\"editFieldValue(i,field)\" title=\"Edit\" class=\"txt-color-red\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n                                                        <a *ngIf=\"field.isEdit\" (click)=\"saveFieldValue(i,field)\" title=\"Save\" class=\"txt-color-blue\"><i class=\"glyphicon glyphicon-save\"></i></a>\r\n                                                        <a (click)=\"deleteFieldValue(i,field)\" title=\"Delete\" class=\"txt-color-red\"><i class=\"glyphicon glyphicon-trash\"></i></a>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr *ngIf=\"showAddRow\">\r\n                                                    <td>\r\n                                                        <label class=\"input\">\r\n                                                            <!--<span [style.color]=\"!ssinValid?'red':''\"><b>*</b></span>-->\r\n                                                            <input type=\"text\" id=\"benSno\" name=\"benSno\" [(ngModel)]=\"newAttribute.ssI_Number\" placeholder=\"Beneficiary SSIN/PF No.\"\r\n                                                                   (change)=\"searchSSINNo($event.target.value)\" (keydown.enter)=\"searchSSINNo($event.target.value)\" maxlength=\"50\"\r\n                                                                   #benSno=\"ngModel\" [ngClass]=\"{'invalid-data':!ssinValid, 'valid-data': ssinValid}\"\r\n                                                                   required>\r\n                                                        </label>\r\n                                                        <div *ngIf=\"(!ssinValid )\">\r\n                                                            <span style=\"color: red;\">Beneficiary SSIN is required </span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"(!validPFNo )\">\r\n                                                            <span style=\"color: red;\">Beneficiary doesn't have PF Account NO. </span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"beneficiary.benSno==0\">\r\n                                                            <span style=\"color: red;\">{{beneficiary.errorMessage}}</span>\r\n                                                        </div>\r\n                                                        <!--<input class=\"form-control\" type=\"text\" id=\"newAttributeCode\" [(ngModel)]=\"newAttribute.ssI_Number\" name=\"newAttributeCode\" />-->\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <span>{{beneficiary.benFullName}}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <span>{{beneficiary.benSSINOrPFAccountNo}}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <label class=\"input\">\r\n                                                            <input type=\"text\" name=\"collectionDate\" autocomplete=\"off\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                                   [maxDate]=\"collectionMinDt\" [minDate]=\"minDt\" [disabled]=\"disableCollectionDate\" (bsValueChange)=\"collectionDateChange($event)\"\r\n                                                                   placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"newAttribute.collectionDate\"\r\n                                                                   value=\"{{newAttribute.collectionDate | date: 'dd/MM/yyyy' }}\" [ngClass]=\"{'invalid-data': (!collectionDateReq), 'valid-data': collectionDateReq}\"\r\n                                                                   readonly required>\r\n                                                        </label>\r\n                                                        <div *ngIf=\"!collectionDateReq\">\r\n                                                            <span style=\"color: red;\">Collection Date is required </span>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                    <td width=\"230\" style=\"padding-right:3%\">\r\n\r\n                                                        <ng-multiselect-dropdown name=\"pfselectionmonth\" [placeholder]=\"'All'\"\r\n                                                                                 [data]=\"pfMonths\"\r\n                                                                                 [(ngModel)]=\"newAttribute.selectedMonths\"\r\n                                                                                 [settings]=\"monthSettings\"\r\n                                                                                 (onSelect)=\"onItemSelect($event, newAttribute)\"\r\n                                                                                 style=\"height:36%\">\r\n                                                        </ng-multiselect-dropdown>\r\n                                                        <div *ngIf=\"!pfMonthIsValid\">\r\n                                                            <span style=\"color: red;\">Month is required </span>\r\n                                                        </div>\r\n                                                        <!--<input class=\"form-control\" type=\"text\" id=\"newAttributeName\" [(ngModel)]=\"newAttribute.monthName\" name=\"newAttributeName\" />-->\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <label class=\"input\">\r\n                                                            <input type=\"text\" name=\"amount\" placeholder=\"Amount\" [(ngModel)]=\"newAttribute.collectionAmount\" NumbersOnly\r\n                                                                   #amount=\"ngModel\" required />\r\n                                                        </label>\r\n                                                        <div *ngIf=\"!amountReq\">\r\n                                                            <span style=\"color: red;\">Amount is required </span>\r\n                                                        </div>\r\n                                                        <!--<input class=\"form-control\" type=\"text\" id=\"newAttributePrice\" [(ngModel)]=\"newAttribute.collectionAmount\" name=\"newAttributePrice\" />-->\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <label class=\"input\">\r\n                                                            <select name=\"bookNo\" [(ngModel)]=\"newAttribute.bookNo\"\r\n                                                                    #bookNo=\"ngModel\" [ngClass]=\"{'invalid-data': !bookNoIsValid, 'valid-data': bookNoIsValid }\"\r\n                                                                    required (change)=\"bookChange($event)\">\r\n                                                                <option value=\"0\" selected disabled>Choose book</option>\r\n                                                                <option value=\"{{book.id}}\" *ngFor=\"let book of agentReceiptBooks\">{{book.bookNo}}</option>\r\n                                                            </select>\r\n                                                        </label>\r\n                                                        <div *ngIf=\"!bookNoIsValid\">\r\n                                                            <span style=\"color: red;\">Book No. is required </span>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <label class=\"input\">\r\n                                                            <input type=\"text\" name=\"ReceiptNo\" placeholder=\"Receipt No\" [(ngModel)]=\"newAttribute.receiptNo\" NumbersOnly maxlength=\"6\"\r\n                                                                   #ReceiptNo=\"ngModel\" (change)=\"receiptNoChange(newAttribute.bookNo, $event.target.value)\" (keydown.enter)=\"receiptNoChange(newAttribute.bookNo,$event.target.value)\"\r\n                                                                   [ngClass]=\"{'invalid-data':!receiptNoIsValid, 'valid-data':receiptNoIsValid}\"\r\n                                                                   required />\r\n                                                        </label>\r\n                                                        <div *ngIf=\"!receiptNoIsValid\">\r\n                                                            <span style=\"color: red;\">Receipt No. is required </span>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <a (click)=\"addFieldValue()\" title=\"Add\" class=\"txt-color-green\"><i class=\"glyphicon glyphicon-plus\"></i></a>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"!noRecords\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Add atleast one entry</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isReceiptNoRange\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Receipt No. not in the range</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <section class=\"col col-4\">\r\n                                            <label>\r\n                                                <strong>Remaining Amount: </strong>{{remainingAmount}}\r\n                                            </label>\r\n                                        </section>\r\n                                        <section class=\"col col-4\"> <label><strong>Total: </strong>{{total}}</label></section>\r\n                                    </div>\r\n                                    <!--<div class=\"row\">\r\n        <div *ngIf=\"agentPfValidation\">\r\n            <span style=\"color: red;\">Collection amount exceeds</span>\r\n        </div>\r\n    </div>-->                                  \r\n                                </section>\r\n                            </fieldset>\r\n                            <footer>\r\n                                <button type=\"button\" [disabled]=\"!(pfCollectionDetailsList.length>0 && total==depositedAmount)\" name=\"submit\" class=\"btn btn-success\" (click)=\"saveLegacyPFDetails(pfCollectionDetailsList,2)\">\r\n                                    Submit\r\n                                </button>\r\n                                <!--<a *ngIf=\"pfCollectionDetailsList.length>0 && total==depositedAmount\" name=\"save\" class=\"btn btn-success\" (click)=\"saveLegacyPFDetails(pfCollectionDetailsList,2)\">Submit</a>-->\r\n                                <a class=\"btn btn-danger\" (click)=\"cancleClick()\">Cancel</a>\r\n                                <a class=\"btn btn-warning\">Verify</a>\r\n                                <!--<a *ngIf=\"pfCollectionDetailsList.length>0\" class=\"btn btn-primary\" (click)=\"saveLegacyPFDetails(pfCollectionDetailsList,1)\">Save as Draft</a>-->\r\n                                <button type=\"button\" [disabled]=\"pfCollectionDetailsList.length<=0\" name=\"save\" class=\"btn btn-primary\" (click)=\"saveLegacyPFDetails(pfCollectionDetailsList,1)\">\r\n                                    Save as Draft\r\n                                </button>\r\n                            </footer>\r\n                        </form>\r\n\r\n                    </div>\r\n                    <!-- end widget content -->\r\n\r\n                </div>\r\n                <!-- end widget div -->\r\n\r\n            </div>\r\n            <!-- end widget -->\r\n\r\n        </article>\r\n        <!-- WIDGET END -->\r\n\r\n    </div>\r\n</section>\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p id=\"mesgSubmit\">{{successMessage}}</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/bulkpfdeposit/bulkpfdeposit.component.ts":
/*!****************************************************************!*\
  !*** ./src/app/claim/bulkpfdeposit/bulkpfdeposit.component.ts ***!
  \****************************************************************/
/*! exports provided: BulkpfdepositComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkpfdepositComponent", function() { return BulkpfdepositComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var _models_pf_months_model__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/pf.months.model */ "./src/app/claim/models/pf.months.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var BulkpfdepositComponent = /** @class */ (function () {
    function BulkpfdepositComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.agentList = [];
        this.depositDateReq = true;
        this.months = _models_pf_months_model__WEBPACK_IMPORTED_MODULE_6__["Months"];
        this.rowIndex = -1;
        this.ssinValid = true;
        this.pfMonthIsValid = true;
        this.pfAmountIsValid = true;
        this.collectionDateReq = true;
        this.receiptNoIsValid = true;
        this.bookNoIsValid = true;
        this.benficiaryInactive = false;
        this.beneficiary = {};
        this.pfMonths = [];
        this.pfSelectedMonths = [];
        this.pfMasterConfig = {};
        this.pfCollectionDtlInfo = {};
        this.pfCollectionDetailsList = [];
        this.pfCollectionDetails = {};
        this.pfCollectionMaster = {};
        this.pfCollectionMasterList = [];
        this.pfCollectionDtlDetails = {};
        this.bankDetails = [];
        this.agentReceiptBooks = [];
        this.isValidSave = true;
        this.isMonthEnable = true;
        this.fieldArray = [];
        this.newAttribute = {};
        this.remainingAmount = 0;
        this.total = 0;
        this.depositedAmountReq = true;
        this.depositBankValid = true;
        this.ARNReq = true;
        //agentPfValidation: boolean = false;
        this.workerTypeValid = false;
        //agentDepositAmountValidation: boolean = false;
        this.monthSettings = {};
        this.selectedMonthIds = [];
        //editedselectedMonthIds: Array<any> = [];
        // sMon: Array<PfMonths> = [];
        this.sMon = [];
        this.pfmonth1 = {};
        this.disableCollectionDate = true;
        this.isValidMonth = true;
        this.amountReq = true;
        this.payInSlipUploaded = true;
        this.payInSlipCertificate = {};
        this.noRecords = true;
        this.bulkPFDeposit = {};
        this.activeYear = {};
        this.isDepartmentUser = true;
        this.isReceiptNoRange = false;
        this.collectionYear = {};
        this.validPFNo = true;
        this.showAddRow = true;
        this.workerTypeReq = true;
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        this.toDayDate = new Date();
        this.currentyear = new Date().getFullYear();
        var currentMonth = new Date().getMonth();
        if (currentMonth <= 3) {
            this.fStartYear = this.currentyear - 1;
            this.fEndYear = this.currentyear;
        }
        else {
            this.fStartYear = this.currentyear;
            this.fEndYear = this.currentyear + 1;
        }
        this.currentyear = this.fStartYear + '-' + this.fEndYear;
    }
    BulkpfdepositComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.getActiveFinancialYear();
        this.pfMonths = this.months;
        this.getWorkerTypeDetails();
        this.getPFMasterConfigDetails();
        //-------------------
        this.monthSettings = {
            singleSelection: false,
            idField: 'monthId',
            textField: 'monthName',
            enableCheckAll: false,
            itemsShowLimit: 2,
        };
        if (Number(this.user.user.userTpe) == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__["UserType"].ServiceProvider || Number(this.user.user.userTpe) == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__["UserType"].Others) {
            this.isDepartmentUser = false;
            this.dataService
                .getUserDetails(this.user.user.deptUserid)
                .subscribe(function (data) {
                _this.userDetails = data;
                if (_this.userDetails != null) {
                    _this.agentUserId = _this.user.user.deptUserid;
                    _this.agentName = _this.user.user.userName;
                    _this.locationName = _this.userDetails.locationName;
                    _this.agentSubDivId = _this.userDetails.subDivId;
                    //Get subdiv wise rlo bank details
                    // this.getSubDivRLOBankDetails(this.agentSubDivId);
                    //this.getAgentReceiptBooks(this.agentUserId);
                    _this.getAgentLegacyPfDetails(_this.agentUserId);
                }
            });
        }
        else {
            this.getAgentList();
        }
    };
    BulkpfdepositComponent.prototype.addFieldValue = function () {
        var _this = this;
        if (this.validatePFCollectionDtl(this.newAttribute)) {
            debugger;
            if (this.isValidMonth) {
                this.monthSelection(this.newAttribute);
                var str = "";
                var newString = "";
                this.newAttribute.pfCollectionDtlList = [];
                var _loop_1 = function (i) {
                    if (this_1.pfCollectionDetailsList.findIndex(function (x) { return x.benSno == _this.beneficiary.benSno && x.month == _this.newAttribute.selectedMonths[i].monthId && x.year == _this.newAttribute.selectedMonths[i].year; }) == -1 && this_1.rowIndex == -1) {
                        //this.newAttribute.monthName = "";
                        //this.newAttribute.month = this.pfSelectedMonths[i].monthId;
                        //this.newAttribute.year = this.pfSelectedMonths[i].year;
                        newString += this_1.newAttribute.selectedMonths[i].monthName + ",";
                        debugger;
                        this_1.newAttribute.pfCollectionDtlList.push({ monthPaid: this_1.newAttribute.selectedMonths[i].monthId, yearPaid: this_1.newAttribute.selectedMonths[i].year, amount: this_1.newAttribute.selectedMonths[i].amount });
                        //this.newAttribute.monthList.push(this.pfSelectedMonths[i].monthId);
                        //this.newAttribute.selectedMonths = this.pfSelectedMonths;
                    }
                    else if (this_1.pfCollectionDetailsList.findIndex(function (x) { return x.benSno == _this.beneficiary.benSno && x.month == _this.newAttribute.selectedMonths[i].monthId && x.year == _this.newAttribute.selectedMonths[i].year; }) != -1 && this_1.rowIndex == -1) {
                        str = "already " + this_1.newAttribute.selectedMonths[i].monthName + " this month is added to ssin";
                        alert(str);
                        return { value: void 0 };
                    }
                };
                var this_1 = this;
                //this.newAttribute.monthList = [];
                for (var i = 0; i < this.newAttribute.selectedMonths.length; i++) {
                    var state_1 = _loop_1(i);
                    if (typeof state_1 === "object")
                        return state_1.value;
                }
                if (str == "") {
                    if (this.pfCollectionDetailsList.findIndex(function (x) { return x.bookNo == _this.newAttribute.bookNo && x.receiptNo == _this.newAttribute.receiptNo; }) == -1) {
                        this.newAttribute.benSno = this.beneficiary.benSno;
                        this.newAttribute.benFullName = this.beneficiary.benFullName;
                        this.newAttribute.benSSINOrPFAccountNo = this.beneficiary.benSSINOrPFAccountNo;
                        this.newAttribute.benPFAccountId = this.beneficiary.benPFAccountId;
                        //this.newAttribute.year = this.pfSelectedMonths[0].year;
                        this.newAttribute.monthName = newString.substr(0, newString.length - 1);
                        this.newAttribute.bookName = this.agentReceiptBooks.find(function (x) { return x.id == _this.newAttribute.bookNo; }).bookNo;
                        this.remainingAmount = this.remainingAmount - Number(this.newAttribute.collectionAmount);
                        this.total = this.total + Number(this.newAttribute.collectionAmount);
                        //this.newAttribute.selectedMonths = this.pfSelectedMonths;
                        ////------------------------
                        //debugger;
                        //this.newAttribute.pfCollectionDtlList = [];
                        //this.newAttribute.monthName = "";
                        //for (let i = 0; i < this.pfSelectedMonths.length; i++) {
                        //    this.newAttribute.year = this.pfSelectedMonths[i].year;
                        //    this.newAttribute.monthName += this.pfSelectedMonths[i].monthName + ",";
                        //    this.newAttribute.pfCollectionDtlList.push({ monthPaid: this.pfSelectedMonths[i].monthId, yearPaid: this.pfSelectedMonths[i].year, amount: this.pfSelectedMonths[i].amount });
                        //}
                        ////----------------------------
                        this.pfCollectionDetailsList.push(this.newAttribute);
                        this.newAttribute = {};
                        this.selectedMonthIds = [];
                        if (this.total > 0 && this.total == this.depositedAmount)
                            this.showAddRow = false;
                        else
                            this.showAddRow = true;
                    }
                    else {
                        alert("already this receipt is generated");
                        return;
                    }
                }
                this.beneficiary.benFullName = '';
                this.beneficiary.benSSINOrPFAccountNo = '';
            }
        }
    };
    BulkpfdepositComponent.prototype.editFieldValue = function (index, field) {
        var _this = this;
        debugger;
        field.isEdit = true;
        this.remainingAmount = Number(this.remainingAmount) + Number(field.collectionAmount);
        this.total = Number(this.total) - Number(field.collectionAmount);
        if (field.collectionDate != null && field.collectionDate != undefined)
            field.collectionDate = new Date(field.collectionDate);
        if (this.agentReceiptBooks != null) {
            this.agentReceiptBooks.forEach(function (x) {
                if (x.id == field.bookNo) {
                    _this.minDt = new Date(x.date);
                }
            });
        }
    };
    BulkpfdepositComponent.prototype.saveFieldValue = function (index, field) {
        if (this.validatePFCollectionDtl(field)) {
            field.isEdit = false;
            var newString = '';
            for (var i = 0; i < field.selectedMonths.length; i++) {
                newString += field.selectedMonths[i].monthName + ",";
                //field.monthList.push(field.selectedMonths[i].monthId);
            }
            field.monthName = newString.substr(0, newString.length - 1);
            this.pfCollectionDetailsList.splice(index, 1);
            this.pfCollectionDetailsList.push(field);
            this.remainingAmount = Number(this.remainingAmount) - Number(field.collectionAmount);
            this.total = Number(this.total) + Number(field.collectionAmount);
            if (this.total > 0 && this.total == this.depositedAmount)
                this.showAddRow = false;
            else
                this.showAddRow = true;
        }
    };
    BulkpfdepositComponent.prototype.deleteFieldValue = function (index, field) {
        this.pfCollectionDetailsList.splice(index, 1);
        this.remainingAmount = Number(this.remainingAmount) + Number(field.collectionAmount);
        this.total = Number(this.total) - Number(field.collectionAmount);
        if (this.total > 0 && this.total == this.depositedAmount)
            this.showAddRow = false;
        else
            this.showAddRow = true;
    };
    BulkpfdepositComponent.prototype.getAgentList = function () {
        var _this = this;
        this.dataService
            .getAgentLocationWise(Number(this.user.user.userTpe), this.user.user.deptUserid)
            .subscribe(function (data) {
            _this.agentList = data;
        });
    };
    BulkpfdepositComponent.prototype.agentChange = function (eve) {
        this.agentUserId = eve;
        this.agentName = this.agentList.find(function (x) { return x.userid == eve; }).userName;
        this.locationName = this.agentList.find(function (x) { return x.userid == eve; }).locationName;
        this.agentSubDivId = this.agentList.find(function (x) { return x.userid == eve; }).subDivId;
        // this.getAgentReceiptBooks(eve);
        this.getAgentLegacyPfDetails(eve);
    };
    BulkpfdepositComponent.prototype.workerTypeChange = function (eve) {
        //Get subdiv wise rlo bank details
        this.getSubDivRLOBankDetails(this.agentSubDivId, eve);
    };
    BulkpfdepositComponent.prototype.getPFMasterConfigDetails = function () {
        var _this = this;
        this.dataService
            .getPFMasterConfigDetails()
            .subscribe(function (data) {
            _this.pfMasterConfig = data;
        });
    };
    BulkpfdepositComponent.prototype.getSubDivRLOBankDetails = function (id, workerTypeId) {
        var _this = this;
        this.dataService
            .getSubDivRLOBankDetails(id, workerTypeId)
            .subscribe(function (data) {
            _this.bankDetails = data;
        });
    };
    BulkpfdepositComponent.prototype.bankChange = function (eve) {
        this.rloOfficeId = this.bankDetails.find(function (x) { return x.rloOfficeBankId == eve; }).rloOfficeId;
    };
    BulkpfdepositComponent.prototype.getAgentReceiptBooks = function (userId) {
        var _this = this;
        this.agentReceiptBooks = [];
        debugger;
        if (this.collectionDate != undefined && this.depositDate != undefined) {
            this.dataService
                .getAgentCollectionBooks(userId, new Date(this.collectionDate), new Date(this.depositDate))
                .subscribe(function (data) {
                debugger;
                _this.agentReceiptBooks = data;
            });
        }
    };
    BulkpfdepositComponent.prototype.getAgentLegacyPfDetails = function (userId) {
        var _this = this;
        debugger;
        var collectionAmount = 0;
        this.dataService
            .getAgentLegacyPfDetails(userId)
            .subscribe(function (data) {
            _this.pfCollectionDetailsList = data;
            if (_this.pfCollectionDetailsList != null && _this.pfCollectionDetailsList.length > 0) {
                var _loop_2 = function (i) {
                    _this.pfCollectionDetailsList[i].monthList = [];
                    if (_this.pfCollectionDetailsList[i].depositPayInSlipDocument != null) {
                        debugger;
                        _this.payInSlipCertificate = _this.pfCollectionDetailsList[i].depositPayInSlipDocument;
                    }
                    //this.payInSlipCertificate.fileName = this.pfCollectionDetailsList[i].depositPayInSlipDocumentFileName;
                    _this.workerTypeId = _this.pfCollectionDetailsList[i].workerTypeId;
                    _this.depositDate = new Date(_this.pfCollectionDetailsList[i].depositDate);
                    _this.bankId = _this.pfCollectionDetailsList[i].bankId;
                    _this.depositedAmount = _this.remainingAmount = _this.pfCollectionDetailsList[i].depositAmount;
                    _this.payinSlip = _this.pfCollectionDetailsList[i].payinSlipNo;
                    _this.rloOfficeId = _this.bankDetails.find(function (x) { return x.rloOfficeBankId == _this.pfCollectionDetailsList[i].bankId; }).rloOfficeId;
                    _this.pfCollectionDetailsList[i].bookName = _this.agentReceiptBooks.find(function (x) { return x.id == _this.pfCollectionDetailsList[i].bookNo; }).bookNo;
                    var newString = _this.getSelectedMonths(_this.pfCollectionDetailsList[i].pfCollectionDtlList);
                    _this.pfCollectionDetailsList[i].monthName = newString.substr(0, newString.length - 1);
                    debugger;
                    _this.pfCollectionDetailsList[i].monthList = _this.getSelectedMonthList(_this.pfCollectionDetailsList[i].pfCollectionDtlList);
                    collectionAmount += _this.pfCollectionDetailsList[i].collectionAmount;
                    _this.pfCollectionDetailsList[i].selectedMonths = _this.getSelectedMonthArray(_this.pfCollectionDetailsList[i].pfCollectionDtlList);
                    _this.getSubDivRLOBankDetails(_this.agentSubDivId, _this.workerTypeId);
                };
                for (var i = 0; i < _this.pfCollectionDetailsList.length; i++) {
                    _loop_2(i);
                }
                _this.remainingAmount = _this.remainingAmount - collectionAmount;
                _this.total = _this.total + collectionAmount;
            }
        });
    };
    BulkpfdepositComponent.prototype.getSelectedMonthList = function (pfCollectionDtlList) {
        var monthList = [];
        var _loop_3 = function (i) {
            var id = this_2.months.find(function (x) { return x.monthId == pfCollectionDtlList[i].monthPaid; }).Id;
            var m = this_2.months.filter(function (x) { return x.Id == id; });
            monthList.push(m[0].monthId);
        };
        var this_2 = this;
        for (var i = 0; i < pfCollectionDtlList.length; i++) {
            _loop_3(i);
        }
        return monthList;
    };
    BulkpfdepositComponent.prototype.getSelectedMonths = function (pfCollectionDtlList) {
        var monName = "";
        var _loop_4 = function (i) {
            var id = this_3.months.find(function (x) { return x.monthId == pfCollectionDtlList[i].monthPaid; }).Id;
            var m = this_3.months.filter(function (x) { return x.Id == id; });
            monName += m[0].monthName + ",";
        };
        var this_3 = this;
        for (var i = 0; i < pfCollectionDtlList.length; i++) {
            _loop_4(i);
        }
        return monName;
    };
    BulkpfdepositComponent.prototype.getSelectedMonthArray = function (pfCollectionDtlList) {
        var monthsSelected = [];
        var _loop_5 = function (i) {
            var id = this_4.months.find(function (x) { return x.monthId == pfCollectionDtlList[i].monthPaid; }).Id;
            var m = this_4.months.filter(function (x) { return x.Id == id; });
            this_4.pfmonth1 = {};
            this_4.pfmonth1.Id = m[0].Id;
            this_4.pfmonth1.monthId = m[0].monthId;
            this_4.pfmonth1.monthName = m[0].monthName;
            monthsSelected.push(this_4.pfmonth1);
        };
        var this_4 = this;
        for (var i = 0; i < pfCollectionDtlList.length; i++) {
            _loop_5(i);
        }
        return monthsSelected;
    };
    BulkpfdepositComponent.prototype.saveLegacyPFDetails = function (depositDetails, type) {
        var _this = this;
        debugger;
        if (this.validateDetails(depositDetails, type)) {
            var _loop_6 = function (i) {
                this_5.pfCollectionMaster = {};
                debugger;
                this_5.pfCollectionMaster.pfCollectionId = depositDetails[i].pfCollectionId;
                this_5.pfCollectionMaster.agentNo = this_5.agentUserId;
                this_5.pfCollectionMaster.collectionAmount = depositDetails[i].collectionAmount;
                this_5.pfCollectionMaster.benPFAccountId = depositDetails[i].benPFAccountId;
                this_5.pfCollectionMaster.benSno = depositDetails[i].benSno;
                this_5.pfCollectionMaster.collectionDate = depositDetails[i].collectionDate;
                this_5.pfCollectionMaster.bookNo = depositDetails[i].bookNo;
                this_5.pfCollectionMaster.receiptNo = depositDetails[i].receiptNo;
                this_5.pfCollectionMaster.rloOfficeId = this_5.rloOfficeId;
                this_5.pfCollectionMaster.depositDate = new Date(this_5.depositDate);
                this_5.pfCollectionMaster.bankId = this_5.bankId;
                this_5.pfCollectionMaster.payinSlipNo = this_5.payinSlip;
                this_5.pfCollectionMaster.depositAmount = this_5.depositedAmount;
                this_5.pfCollectionMaster.month = depositDetails[i].month;
                this_5.pfCollectionMaster.year = new Date(depositDetails[i].collectionDate).getFullYear(); //depositDetails[i].year;
                this_5.pfCollectionMaster.workerTypeId = this_5.workerTypeId;
                this_5.pfCollectionMaster.isSaveDraft = type;
                //--------------------------
                if (depositDetails[i].selectedMonths != null && depositDetails[i].selectedMonths.length > 0) {
                    this_5.pfCollectionMaster.pfCollectionDtlList = [];
                    var _loop_7 = function (j) {
                        this_5.pfCollectionDtlDetails = {};
                        this_5.pfCollectionDtlDetails.monthPaid = depositDetails[i].selectedMonths[j].monthId;
                        var id = this_5.months.find(function (x) { return x.monthId == depositDetails[i].selectedMonths[j].monthId; }).Id;
                        if (id >= 10)
                            this_5.pfCollectionDtlDetails.yearPaid = this_5.fEndYear;
                        else
                            this_5.pfCollectionDtlDetails.yearPaid = this_5.fStartYear;
                        this_5.pfCollectionDtlDetails.amount = this_5.pfMasterConfig.beneficiaryPFContribution;
                        this_5.pfCollectionMaster.pfCollectionDtlList.push(this_5.pfCollectionDtlDetails);
                    };
                    for (var j = 0; j < depositDetails[i].selectedMonths.length; j++) {
                        _loop_7(j);
                    }
                }
                //if (depositDetails[i].pfCollectionDtlList != null && depositDetails[i].pfCollectionDtlList.length > 0) {
                //    this.pfCollectionMaster.pfCollectionDtlList = [];
                //    for (let j = 0; j < depositDetails[i].pfCollectionDtlList.length; j++) {
                //        this.pfCollectionDtlDetails = {} as PFCollectionDtlDetails;
                //        this.pfCollectionDtlDetails.monthPaid = depositDetails[i].pfCollectionDtlList[j].monthPaid;
                //        this.pfCollectionDtlDetails.yearPaid = depositDetails[i].pfCollectionDtlList[j].yearPaid;
                //        this.pfCollectionDtlDetails.amount = depositDetails[i].pfCollectionDtlList[j].amount;
                //        this.pfCollectionMaster.pfCollectionDtlList.push(this.pfCollectionDtlDetails);
                //    }
                //}
                //--------------------------
                this_5.pfCollectionMasterList.push(this_5.pfCollectionMaster);
            };
            var this_5 = this;
            for (var i = 0; i < depositDetails.length; i++) {
                _loop_6(i);
            }
            this.bulkPFDeposit.collectionMasterList = this.pfCollectionMasterList;
            this.bulkPFDeposit.payInSlipCertificate = this.payInSlipCertificate;
            debugger;
            if (confirm("Are you sure to proceed ")) {
                this.dataService
                    .submitLegacyPFDetails(this.bulkPFDeposit)
                    .then(function (data) {
                    if (data) {
                        if (type == 1)
                            _this.successMessage = "Saved sucessfully";
                        else
                            _this.successMessage = "PF amount sucessfully deposited";
                    }
                    else {
                        _this.successMessage = "Invalid transaction";
                    }
                    _this.successModal.show();
                });
            }
        }
    };
    BulkpfdepositComponent.prototype.validateDetails = function (depositDetails, id) {
        var isValid = true;
        this.ARNReq = this.depositDateReq = this.depositBankValid = this.depositedAmountReq = this.payInSlipUploaded = this.workerTypeReq = true;
        if (this.agentUserId == undefined || this.agentUserId == 0) {
            this.ARNReq = isValid = false;
        }
        if (this.depositDate == undefined || this.depositDate == null) {
            this.depositDateReq = isValid = false;
        }
        if (this.bankId == undefined || this.bankId == 0) {
            this.depositBankValid = isValid = false;
        }
        if (this.depositedAmount == undefined || this.depositedAmount == null) {
            this.depositedAmountReq = isValid = false;
        }
        if (depositDetails == null || (depositDetails != null && depositDetails.length == 0)) {
            this.noRecords = isValid = false;
        }
        if (this.workerTypeId == undefined || this.workerTypeId == 0) {
            this.workerTypeReq = isValid = false;
        }
        if (id == 2)
            if (this.payInSlipCertificate.fileName == null && this.payInSlipCertificate.fileName == undefined) {
                isValid = this.payInSlipUploaded = false;
            }
        return isValid;
    };
    BulkpfdepositComponent.prototype.monthSelection = function (pfDetails) {
        var _this = this;
        if (pfDetails.selectedMonths != null && pfDetails.selectedMonths != undefined && pfDetails.selectedMonths.length > 0) {
            pfDetails.selectedMonths.filter(function (x) { return x.amount = _this.pfMasterConfig.beneficiaryPFContribution; });
            pfDetails.selectedMonths.filter(function (x) { return x.year = (x.Id >= 10 ? _this.fEndYear : _this.fStartYear); });
        }
    };
    BulkpfdepositComponent.prototype.onItemSelect = function (eve, pfDetails) {
        var _this = this;
        debugger;
        this.pfSelectedMonth = eve;
        this.getPFMasterConfigDetails();
        this.pfTotalAmount = 0;
        var s = null;
        var id = this.months.find(function (x) { return x.monthId == eve.monthId; }).Id;
        if (id >= 10) {
            pfDetails.selectedMonths.find(function (x) { return x.monthId == eve.monthId; }).year = this.fEndYear;
        }
        else
            pfDetails.selectedMonths.find(function (x) { return x.monthId == eve.monthId; }).year = this.fStartYear;
        //let m = this.months.filter(x => x.Id == id);
        //s = m;
        //if (s != null && s != undefined) {
        //    this.pfSelectedMonths = s;
        pfDetails.selectedMonths.filter(function (x) { return x.year = (x.Id >= 10 ? _this.fEndYear : _this.fStartYear); });
        //}
        debugger;
        this.dataService
            .isValidMonthSubmitted(this.beneficiary.benSno, eve.monthId, pfDetails.selectedMonths.find(function (x) { return x.monthId == eve.monthId; }).year)
            .subscribe(function (data) {
            if (data) {
                _this.isValidMonth = false;
                alert("already added please select another month");
            }
            else {
                _this.isValidMonth = true;
            }
        });
    };
    BulkpfdepositComponent.prototype.pfMonthChange = function (value) {
        var _this = this;
        this.pfSelectedMonth = value;
        this.getPFMasterConfigDetails();
        this.pfTotalAmount = 0;
        var s = null;
        var id = this.months.find(function (x) { return x.monthId == value; }).Id;
        var m = this.months.filter(function (x) { return x.Id == id; });
        s = m;
        if (s != null && s != undefined) {
            this.pfSelectedMonths = s;
            this.pfSelectedMonths.filter(function (x) { return x.year = (x.Id >= 10 ? _this.fEndYear : _this.fStartYear); });
        }
        this.dataService
            .isValidMonthSubmitted(this.beneficiary.benSno, this.pfSelectedMonths[0].monthId, this.pfSelectedMonths[0].year)
            .subscribe(function (data) {
            if (data) {
                alert("already added please select another month");
            }
        });
    };
    BulkpfdepositComponent.prototype.receiptNoChange = function (bookNo, receiptNo) {
        var _this = this;
        this.dataService
            .isValidBookReceipt(bookNo, receiptNo)
            .subscribe(function (data) {
            if (data) {
                alert("already added please select another book and receipt");
            }
            else {
                if (receiptNo < _this.receiptNoFrom || receiptNo > _this.receiptNoTo) {
                    _this.isReceiptNoRange = true;
                }
                else {
                    _this.isReceiptNoRange = false;
                }
            }
        });
    };
    BulkpfdepositComponent.prototype.validatePFCollectionDtl = function (pfDetails) {
        var isValid = true;
        debugger;
        //if (this.agentUserId == undefined || this.agentUserId == null) { this.ARNReq = isValid = false; }
        //if (this.depositDate == undefined || this.depositDate == null) { this.depositDateReq = isValid = false; }
        //if (this.bankId == undefined || this.bankId == null) { this.depositBankValid = isValid = false; }
        if (pfDetails.ssI_Number == undefined || pfDetails.ssI_Number == "") {
            this.ssinValid = isValid = false;
        }
        //if (this.pfSelectedMonths == undefined || this.pfSelectedMonths.length == 0) { this.pfMonthIsValid = isValid = false; }
        if (pfDetails.selectedMonths == undefined || pfDetails.selectedMonths.length == 0) {
            this.pfMonthIsValid = isValid = false;
        }
        //if (this.selectedMonthIds == undefined || this.selectedMonthIds.length == 0) { this.pfMonthIsValid = isValid = false; }
        if (pfDetails.bookNo == undefined || pfDetails.bookNo == null) {
            this.bookNoIsValid = isValid = false;
        }
        if (pfDetails.receiptNo == undefined || pfDetails.receiptNo == null || pfDetails.receiptNo.toString() == "") {
            this.receiptNoIsValid = isValid = false;
        }
        if (pfDetails.collectionDate == undefined || pfDetails.collectionDate == null) {
            this.collectionDateReq = isValid = false;
        }
        if (pfDetails.collectionAmount == undefined || pfDetails.collectionAmount == null || pfDetails.collectionAmount.toString() == "") {
            this.amountReq = isValid = false;
        }
        if (this.depositedAmount == undefined || this.depositedAmount == 0 || this.depositedAmount == null) {
            this.depositedAmountReq = isValid = false;
        }
        if (this.isReceiptNoRange) {
            isValid = false;
        }
        debugger;
        //case 1 - if depositedAmount < collectionAmount
        if ((this.depositedAmount != undefined || this.depositedAmount != 0 || this.depositedAmount != null) && (pfDetails.collectionAmount != undefined || pfDetails.collectionAmount != null)) {
            if (Number(this.depositedAmount) < Number(pfDetails.collectionAmount)) {
                alert("Collection Amount exceeds Deposit Amount");
                isValid = false;
            }
        }
        //if (this.depositedAmount > this.pfMasterConfig.agentCollectionLimit) {
        //    this.agentDepositAmountValidation = true;
        //    isValid = false;
        //}
        //else {
        //    this.agentDepositAmountValidation = false;
        //}
        //if (this.total > this.pfMasterConfig.agentCollectionLimit || pfDetails.collectionAmount > this.pfMasterConfig.agentCollectionLimit || this.remainingAmount < 0) {
        //if ((this.total + Number(pfDetails.collectionAmount)) > this.pfMasterConfig.agentCollectionLimit || this.remainingAmount < 0) {
        //    this.agentPfValidation = true;
        //    isValid = false;
        //}
        //else {
        //    this.agentPfValidation = false;
        //}
        return isValid;
    };
    BulkpfdepositComponent.prototype.searchSSINNo = function (ssnNo) {
        var _this = this;
        this.isValidSave = this.isMonthEnable = true;
        this.benficiaryInactive = false;
        if (ssnNo != undefined && ssnNo.trim() != "") {
            this.clearValues();
            this.dataService
                .getBeneficiaryDetailsBySearch1(ssnNo.trim(), true)
                .subscribe(function (data) {
                _this.beneficiary = data;
                if (_this.beneficiary != null) {
                    _this.isValidSave = true;
                    if (_this.beneficiary.isActive && _this.beneficiary.status == 1) {
                        //this.ssinValid = true;
                        _this.isValidSave = false;
                        _this.isMonthEnable = false;
                        if (_this.beneficiary.benSSINOrPFAccountNo == "")
                            _this.validPFNo = false;
                        else
                            _this.validPFNo = true;
                    }
                    //else {
                    //    this.ssinValid = false;
                    //}
                }
                //else {
                //    this.ssinValid = false;
                //}
            });
        }
        else {
            this.beneficiary = {};
            this.ssinValid = true;
        }
    };
    BulkpfdepositComponent.prototype.clearValues = function () {
        this.beneficiary = {};
        this.pfSelectedMonths = [];
        this.collectionDateReq = true;
        this.ssinValid = true;
        this.receiptNoIsValid = true;
        this.bookNoIsValid = true;
        this.pfMonthIsValid = true;
        this.depositedAmountReq = true;
        this.depositBankValid = true;
        this.ARNReq = true;
        this.amountReq = true;
        this.workerTypeReq = true;
    };
    BulkpfdepositComponent.prototype.okClick = function () {
        this.successModal.hide();
        // window.location.href = "claim/bulkpfdeposit";
        this.clearValues();
        this.pfCollectionDtlInfo = {};
        this.pfCollectionDetailsList = [];
        this.pfCollectionDetails = {};
        this.pfCollectionMaster = {};
        this.pfCollectionMasterList = [];
        this.pfCollectionDtlDetails = {};
        this.payInSlipCertificate = {};
        //this.agentUserCode = "";
        //this.location = null;
        //this.locationName = "";
        this.depositDate = null;
        this.payinSlip = null;
        this.depositedAmount = null;
        this.remainingAmount = 0;
        this.total = 0;
        this.agentUserId = 0;
        this.workerTypeId = 0;
        this.bankId = 0;
        this.showAddRow = true;
    };
    BulkpfdepositComponent.prototype.addReceiptBook = function () {
        window.location.href = "pfconfig/receiptbook";
    };
    BulkpfdepositComponent.prototype.cancleClick = function () {
        if (Number(this.user.user.userTpe) == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__["UserType"].ServiceProvider || Number(this.user.user.userTpe) == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__["UserType"].Others) {
            window.location.href = "Agent/AgentDashboard";
        }
        else
            window.location.href = "Home/DeptDashboard";
    };
    BulkpfdepositComponent.prototype.depositedAmountChange = function (amount) {
        if (this.total == 0)
            this.remainingAmount = amount;
        else
            this.remainingAmount = amount - this.total;
        //if (amount > this.pfMasterConfig.agentCollectionLimit) {
        //    this.agentDepositAmountValidation = true;
        //}
        //else {
        //    this.agentDepositAmountValidation = false;
        //}
    };
    BulkpfdepositComponent.prototype.getWorkerTypeDetails = function () {
        var _this = this;
        this.dataService
            .getWorkerTypeMasterData()
            .subscribe(function (data) {
            _this.WorkerTypeList = data;
        });
    };
    BulkpfdepositComponent.prototype.depositDateChange = function (eve) {
        this.disableCollectionDate = false;
        this.collectionMinDt = eve;
        //this.getAgentReceiptBooks(this.agentUserId);
    };
    BulkpfdepositComponent.prototype.bookChange = function (args) {
        var _this = this;
        debugger;
        if (this.agentReceiptBooks != null) {
            this.agentReceiptBooks.forEach(function (x) {
                if (x.id == args.target.value) {
                    _this.minDt = new Date(x.date);
                    _this.receiptNoFrom = x.receiptNoFrom;
                    _this.receiptNoTo = x.receiptNoTo;
                }
            });
        }
    };
    BulkpfdepositComponent.prototype.onFileChanged = function (inputValue) {
        var _this = this;
        var file = inputValue.target.files[0];
        if (file.type === "application/pdf" || file.type.includes("image/")) {
            if (file.size > 2000000) {
                alert("File is too big!");
                return;
            }
            ;
            var myReader = new FileReader();
            myReader.onloadend = function (e) {
                var model = {};
                model.fileName = file.name;
                model.filePath = "test";
                model.fileContent = myReader.result.toString().split(',')[1];
                model.statusId = 1;
                model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__["AttachmentType"].PayinSlip;
                //model.pfDepositId = this.depositId;
                model.createdBy = _this.user.user.deptUserid;
                //this.payInSlip = model;
                _this.payInSlipCertificate = model;
            };
            myReader.readAsDataURL(file);
        }
        else {
            alert("Only accept pdf and images");
        }
    };
    BulkpfdepositComponent.prototype.getActiveFinancialYear = function () {
        var _this = this;
        this.dataService
            .getActiveFinancialYear()
            .subscribe(function (data) {
            _this.activeYear = data;
            //this.minDt = new Date(this.activeYear.startDate);
            //this.maxDt = new Date(this.activeYear.endDate);
        });
    };
    BulkpfdepositComponent.prototype.collectionDateChange = function (eve) {
        var _this = this;
        debugger;
        this.collectionDate = new Date(eve);
        this.dataService
            .getCollectionFinancialYear(new Date(eve))
            .subscribe(function (data) {
            _this.collectionYear = data;
            if (_this.collectionYear != null) {
                debugger;
                _this.currentyear = new Date(eve).getFullYear();
                var currentMonth = new Date(eve).getMonth();
                if (currentMonth <= 3) {
                    _this.fStartYear = _this.currentyear - 1;
                    _this.fEndYear = _this.currentyear;
                }
                else {
                    _this.fStartYear = _this.currentyear;
                    _this.fEndYear = _this.currentyear + 1;
                }
            }
            debugger;
            _this.getAgentReceiptBooks(_this.agentUserId);
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_1__["ModalDirective"])
    ], BulkpfdepositComponent.prototype, "successModal", void 0);
    BulkpfdepositComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-bulkpfdeposit',
            template: __webpack_require__(/*! ./bulkpfdeposit.component.html */ "./src/app/claim/bulkpfdeposit/bulkpfdeposit.component.html"),
            styles: [__webpack_require__(/*! ./bulkpfdeposit.component.css */ "./src/app/claim/bulkpfdeposit/bulkpfdeposit.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_3__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_4__["UserService"]])
    ], BulkpfdepositComponent);
    return BulkpfdepositComponent;
}());



/***/ }),

/***/ "./src/app/claim/bulkpfdepositcollection-list/bulkpfdepositcollection-list.component.css":
/*!***********************************************************************************************!*\
  !*** ./src/app/claim/bulkpfdepositcollection-list/bulkpfdepositcollection-list.component.css ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/bulkpfdepositcollection-list/bulkpfdepositcollection-list.component.html":
/*!************************************************************************************************!*\
  !*** ./src/app/claim/bulkpfdepositcollection-list/bulkpfdepositcollection-list.component.html ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"content\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>PF Legacy Collections </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n\r\n                        <p></p>\r\n\r\n                        <table id=\"datatable_fixed_column\" class=\"table table-striped table-bordered\"\r\n                               [mfData]=\"pfCollectionDetails\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\" width=\"100%\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"ssI_Number\">SSIN</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"benFullName\">Beneficiary Name</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"receiptNo\">Receipt No</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"bookNo\">Book No</mfDefaultSorter>\r\n\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"collectionDateString\">Collection Date</mfDefaultSorter>\r\n                                    </th>\r\n\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"paidFromMonth\">Paid From</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"paidToMonth\">Paid To</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"collectionAmount\">Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let col of mf.data; let i=index;\">\r\n                                    <td>{{col.ssI_Number}}</td>\r\n                                    <td>{{col.benFullName}}</td>\r\n                                    <td>{{col.receiptNo}}</td>\r\n                                    <td>{{col.bookName}}</td>\r\n                                    <td>{{col.collectionDateString}}</td>\r\n                                    <td>{{col.paidFromMonth}}</td>\r\n                                    <td>{{col.paidToMonth}}</td>\r\n                                    <td>{{col.amountPaid}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"8\">\r\n                                        <div>\r\n                                            <mfBootstrapPaginator></mfBootstrapPaginator>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                        <footer class=\"modal-footer\">\r\n                            <a class=\"btn btn-danger\" (click)=\"cancelClick()\"> Cancel</a>\r\n                        </footer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/bulkpfdepositcollection-list/bulkpfdepositcollection-list.component.ts":
/*!**********************************************************************************************!*\
  !*** ./src/app/claim/bulkpfdepositcollection-list/bulkpfdepositcollection-list.component.ts ***!
  \**********************************************************************************************/
/*! exports provided: BulkpfdepositcollectionListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkpfdepositcollectionListComponent", function() { return BulkpfdepositcollectionListComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var BulkpfdepositcollectionListComponent = /** @class */ (function () {
    function BulkpfdepositcollectionListComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.pfCollectionDetails1 = [];
        this.pfCollectionDetails = [];
    }
    BulkpfdepositcollectionListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.route$ = this.route.params.subscribe(function (params) {
            _this.pfDepositId = params["pfLegacyMasterId"];
        });
        this.viewCollections();
    };
    BulkpfdepositcollectionListComponent.prototype.viewCollections = function () {
        var _this = this;
        this.dataService
            .getLegacyPFCollections(this.pfDepositId)
            .subscribe(function (data) {
            debugger;
            _this.pfCollectionDetails = data;
        });
    };
    BulkpfdepositcollectionListComponent.prototype.viewCollections1 = function () {
        var _this = this;
        this.dataService
            .getCollections(this.pfDepositId)
            .subscribe(function (data) {
            debugger;
            _this.pfCollectionDetails1 = data;
        });
    };
    BulkpfdepositcollectionListComponent.prototype.cancelClick = function () {
        window.location.href = "Agent/submittedlegacypfdetails";
    };
    BulkpfdepositcollectionListComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-bulkpfdepositcollection-list',
            template: __webpack_require__(/*! ./bulkpfdepositcollection-list.component.html */ "./src/app/claim/bulkpfdepositcollection-list/bulkpfdepositcollection-list.component.html"),
            styles: [__webpack_require__(/*! ./bulkpfdepositcollection-list.component.css */ "./src/app/claim/bulkpfdepositcollection-list/bulkpfdepositcollection-list.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], BulkpfdepositcollectionListComponent);
    return BulkpfdepositcollectionListComponent;
}());



/***/ }),

/***/ "./src/app/claim/bulkpfdepositlist/bulkpfdepositlist.component.css":
/*!*************************************************************************!*\
  !*** ./src/app/claim/bulkpfdepositlist/bulkpfdepositlist.component.css ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/bulkpfdepositlist/bulkpfdepositlist.component.html":
/*!**************************************************************************!*\
  !*** ./src/app/claim/bulkpfdepositlist/bulkpfdepositlist.component.html ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div id=\"content\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>PF Deposited </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n\r\n                        <p></p>\r\n\r\n                        <table class=\"table table-striped\" [mfData]=\"pfDepositDetails\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"legacyNo\">Legacy No</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"payinSlipNo\">Payin Slip No</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"depositAmount\">Deposit Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"depositDateString\">Deposit Date</mfDefaultSorter>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let deposits of mf.data|grdFilter: {depositAmount:searchText, depositDateString: searchText, payinSlipNo: searchText, scrollNumber: searchText, bankDepositDateString: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <a (click)=\"onEditCollection(deposits.pfLegacyMasterId)\" *ngIf=\"deposits.isEdit\" title=\"Edit\" class=\"txt-color-red\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n                                        <!--<a (click)=\"viewCollections(deposits.pfLegacyMasterId)\" *ngIf=\"!deposits.isEdit\" title=\"View Collections\" class=\"txt-color-red\"><i class=\"fa fa-eye\"></i></a>-->\r\n                                    </td>\r\n                                    <td>{{deposits.pfLegacyMasterId}}</td>\r\n                                    <td>{{deposits.payinSlipNo}}</td>\r\n                                    <td>{{deposits.depositAmount}}</td>\r\n                                    <td>{{deposits.depositDateString}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"5\">\r\n                                        <div>\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                            <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</div>\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p id=\"mesgSubmit\">{{successMessage}}</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #payInSlipModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"payInSlipModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <fieldset id=\"divUploadPayInSlip\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <label>Bank Deposited Date <span [style.color]=\"!dateOfDepostValid?'red':''\"><b>*</b></span></label>\r\n                            <label class=\"input\">\r\n                                <!--<i class=\"icon-append fa fa-calendar\"></i>-->\r\n                                <input type=\"text\" name=\"depositDate\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                       placeholder=\"DD/MM/YYYY\"\r\n                                       #depositDate=\"ngModel\"\r\n                                       [maxDate]=\"toDayDate\"\r\n                                       [(ngModel)]=\"bankDepositDate\" readonly\r\n                                       value=\"{{ depositedDate | date: 'dd/MM/yyyy' }}\"\r\n                                       [ngClass]=\"{'invalid-data':!dateOfDepostValid, 'valid-data': dateOfDepostValid}\"\r\n                                       required>\r\n                            </label>\r\n                            <div *ngIf=\"!dateOfDepostValid\">\r\n                                <span style=\"color: red;\">Deposited Date is required </span>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\">Scroll Number <span [style.color]=\"!payInSlipNumberValid?'red':''\"><b>*</b></span> </label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"payInSlip\" numbersOnly [(ngModel)]=\"scrollNumber\" />\r\n                                <div *ngIf=\"!payInSlipNumberValid\">\r\n                                    <span style=\"color: red;\">Scroll Number is required </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12 smart-form\">\r\n                            <section class=\"col col-6 top-5\">\r\n                                <label class=\"label\">PayIn Slip <span [style.color]=\"!payInSlipUploaded?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"onFileChanged($event, deposits)\">Browse</span>\r\n                                    <input type=\"text\" readonly>\r\n                                </div>\r\n                                <div *ngIf=\"(!payInSlipUploaded) && (payInSlipCertificate.fileName =='' || payInSlipCertificate.fileName == undefined )\">\r\n                                    <span style=\"color: red;\">PayIn Slip is required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr>\r\n                                            <td>{{payInSlipCertificate.fileName}}</td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </section>\r\n                            <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!--<div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label class=\"label\">PayIn Slip <span [style.color]=\"!payInSlipUploaded?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"onFileChanged($event, deposits)\">Browse</span><input type=\"text\" readonly>\r\n                                    <label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                </div>\r\n                                <div *ngIf=\"(!payInSlipUploaded) && (payInSlipCertificate.fileName =='' || payInSlipCertificate.fileName == undefined )\">\r\n                                    <span style=\"color: red;\">PayIn Slip is required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr>\r\n                                            <td>{{payInSlipCertificate.fileName}}</td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>-->\r\n                </fieldset>\r\n            </div>\r\n\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"savePaySlip()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #collectionsModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"collectionsModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <!--<div class=\"widget-body no-padding\">-->\r\n                    <!--<table id=\"datatable_fixed_column\" class=\"table table-striped table-bordered\"\r\n                           [mfData]=\"pfCollectionDetails\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\" width=\"100%\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"ssI_Number\">SSIN</mfDefaultSorter>\r\n                                </th>\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"benFullName\">Beneficiary Name</mfDefaultSorter>\r\n                                </th>\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"receiptNo\">Receipt No</mfDefaultSorter>\r\n\r\n                                </th>\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"bookNo\">Book No</mfDefaultSorter>\r\n\r\n                                </th>\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"collectionDateString\">Collection Date</mfDefaultSorter>\r\n                                </th>\r\n\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"paidFromMonth\">Paid From</mfDefaultSorter>\r\n                                </th>\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"paidToMonth\">Paid To</mfDefaultSorter>\r\n                                </th>\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"collectionAmount\">Amount</mfDefaultSorter>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let col of mf.data; let i=index;\">\r\n                                <td>{{col.ssI_Number}}</td>\r\n                                <td>{{col.benFullName}}</td>\r\n                                <td>{{col.receiptNo}}</td>\r\n                                <td>{{col.bookNo}}</td>\r\n                                <td>{{col.collectionDateString}}</td>\r\n                                <td>{{col.paidFromMonth}}</td>\r\n                                <td>{{col.paidToMonth}}</td>\r\n                                <td>{{col.collectionAmount}}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td colspan=\"8\">\r\n                                    <div>\r\n                                        <mfBootstrapPaginator></mfBootstrapPaginator>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                    </table>-->\r\n                <!--</div>-->\r\n            </div>\r\n\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"savePaySlip()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/claim/bulkpfdepositlist/bulkpfdepositlist.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/claim/bulkpfdepositlist/bulkpfdepositlist.component.ts ***!
  \************************************************************************/
/*! exports provided: BulkpfdepositlistComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkpfdepositlistComponent", function() { return BulkpfdepositlistComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var BulkpfdepositlistComponent = /** @class */ (function () {
    function BulkpfdepositlistComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
        // pfDepositDetails: PFDepositDetails = {} as PFDepositDetails;
        this.pfCollectionDetails = [];
        this.payInSlipUploaded = true;
        this.dateOfDepostValid = true;
        this.payInSlipNumberValid = true;
        this.payInSlipCertificate = {};
        this.pfDepositDetails = [];
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        this.toDayDate = new Date();
    }
    BulkpfdepositlistComponent.prototype.ngOnInit = function () {
        this.userName = this.user.user.userName;
        this.userCode = this.user.user.userTypeName;
        this.getLegacyPFDetails(this.user.user.deptUserid, this.page, this.pageSize);
        //this.getPFDeposits(this.user.user.deptUserid, Number(this.user.user.userTpe), PFDepositeStatus.deposited, this.page, this.pageSize);
    };
    BulkpfdepositlistComponent.prototype.getLegacyPFDetails = function (userId, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getLegacyPFDetails(userId, pageNo, pageSize)
            .subscribe(function (data) {
            debugger;
            _this.pfDepositDetails = data.results;
            _this.totalRows = data.rowCount;
        });
    };
    BulkpfdepositlistComponent.prototype.getPFDeposits = function (userId, userType, status, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getPFDeposits(userId, userType, status, pageNo, pageSize)
            .subscribe(function (data) {
            debugger;
            _this.pfDepositDetails = data.results;
            _this.totalRows = data.rowCount;
            //this.viewCollections(0);
        });
    };
    BulkpfdepositlistComponent.prototype.changepage = function (page) {
        // this.getPFDeposits(this.user.user.deptUserid, Number(this.user.user.userTpe), PFDepositeStatus.deposited, this.page, this.pageSize);
        this.getLegacyPFDetails(this.user.user.deptUserid, this.page, this.pageSize);
    };
    BulkpfdepositlistComponent.prototype.onFileChanged = function (inputValue) {
        var _this = this;
        var file = inputValue.target.files[0];
        if (file.type === "application/pdf" || file.type.includes("image/")) {
            if (file.size > 2000000) {
                alert("File is too big!");
                return;
            }
            ;
            var myReader = new FileReader();
            myReader.onloadend = function (e) {
                var model = {};
                model.fileName = file.name;
                model.filePath = "test";
                model.fileContent = myReader.result.toString().split(',')[1];
                model.statusId = 1;
                model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["AttachmentType"].PayinSlip;
                model.pfDepositId = _this.depositId;
                model.createdBy = _this.user.user.deptUserid;
                //this.payInSlip = model;
                _this.payInSlipCertificate = model;
            };
            myReader.readAsDataURL(file);
        }
        else {
            alert("Only accept pdf and images");
        }
    };
    BulkpfdepositlistComponent.prototype.okClick = function () {
        this.getPFDeposits(this.user.user.deptUserid, Number(this.user.user.userTpe), _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["PFDepositeStatus"].deposited, this.page, this.pageSize);
    };
    BulkpfdepositlistComponent.prototype.upload = function (details) {
        this.depositId = details.pfDepositId;
        this.payInSlipModal.show();
    };
    BulkpfdepositlistComponent.prototype.savePaySlip = function () {
        var _this = this;
        if (this.validatePayInSlip()) {
            this.payInSlipCertificate.bankDepositDate = this.bankDepositDate;
            this.payInSlipCertificate.scrollNumber = this.scrollNumber;
            if (confirm("Are you sure to proceed ")) {
                this.dataService
                    .savePayInSlip(this.payInSlipCertificate)
                    .then(function (data) {
                    if (data) {
                        _this.successMessage = "PayIn Slip Uploaded successfully";
                    }
                    else {
                        _this.successMessage = "PayIn Slip Not Uploaded";
                    }
                    _this.payInSlipModal.hide();
                });
            }
        }
    };
    BulkpfdepositlistComponent.prototype.validatePayInSlip = function () {
        var isValid = true;
        if (this.bankDepositDate == null && this.bankDepositDate == undefined) {
            isValid = this.dateOfDepostValid = false;
        }
        if (this.scrollNumber == null && this.scrollNumber == undefined) {
            isValid = this.payInSlipNumberValid = false;
        }
        if (this.payInSlipCertificate.fileName == null && this.payInSlipCertificate.fileName == undefined) {
            isValid = this.payInSlipUploaded = false;
        }
        return isValid;
    };
    //viewCollections(pfLegacyMasterId: number) {
    //    this.router.navigate(['claim/bulkpfdepositcollectionlist', { pfLegacyMasterId: pfLegacyMasterId }], { skipLocationChange: true });
    //}
    BulkpfdepositlistComponent.prototype.onEditCollection = function (pfLegacyMasterId) {
        this.router.navigate(['claim/bulkpfdeposit', { pfLegacyMasterId: pfLegacyMasterId }], { skipLocationChange: true });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('payInSlipModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], BulkpfdepositlistComponent.prototype, "payInSlipModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('collectionsModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], BulkpfdepositlistComponent.prototype, "collectionsModal", void 0);
    BulkpfdepositlistComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-bulkpfdepositlist',
            template: __webpack_require__(/*! ./bulkpfdepositlist.component.html */ "./src/app/claim/bulkpfdepositlist/bulkpfdepositlist.component.html"),
            styles: [__webpack_require__(/*! ./bulkpfdepositlist.component.css */ "./src/app/claim/bulkpfdepositlist/bulkpfdepositlist.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], BulkpfdepositlistComponent);
    return BulkpfdepositlistComponent;
}());



/***/ }),

/***/ "./src/app/claim/claim-draft/claim-draft.component.css":
/*!*************************************************************!*\
  !*** ./src/app/claim/claim-draft/claim-draft.component.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/claim-draft/claim-draft.component.html":
/*!**************************************************************!*\
  !*** ./src/app/claim/claim-draft/claim-draft.component.html ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>Draft Claims </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n                        <p></p>\r\n                        <table class=\"table table-striped\" [mfData]=\"claimsData\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimRefernceNo\">Claim Reference No</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"submittedDate\">Submission Date</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"entryPointName\">Mode</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimType\">Category</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimAmount\">Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"statusName\">Status</mfDefaultSorter>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let claims of mf.data|grdFilter: {entryPointName:searchText, claimRefernceNo: searchText,submittedDateString: searchText, claimAmount: searchText, claimType: searchText,\r\n           statusName: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <a (click)=\"onEditClaimClick(claims)\" title=\"Edit\" class=\"txt-color-red\" *ngIf=\"claims.statusName=='Saved'\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n                                        <a (click)=\"onDeleteClaimClick(claims)\" title=\"Delete\" class=\"txt-color-red\"><i class=\"fa fa-trash-o fa-lg\"></i></a>\r\n\r\n                                    </td>\r\n                                    <td>{{claims.claimRefernceNo}}</td>\r\n                                    <td>{{claims.submittedDateString}}</td>\r\n                                    <td>{{claims.entryPointName}}</td>\r\n                                    <td>{{claims.claimType}}</td>\r\n                                    <td>{{claims.claimAmount}}</td>\r\n                                    <td>{{claims.statusName}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n\r\n\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"9\">\r\n                                        <div *ngIf=\"claimsData.length>0\">\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                            <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</section>\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"successModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Success Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p id=\"mesgSubmit\">{{successMessage}}</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/claim-draft/claim-draft.component.ts":
/*!************************************************************!*\
  !*** ./src/app/claim/claim-draft/claim-draft.component.ts ***!
  \************************************************************/
/*! exports provided: ClaimDraftComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimDraftComponent", function() { return ClaimDraftComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var ClaimDraftComponent = /** @class */ (function () {
    //Paging props end
    function ClaimDraftComponent(router, dataService, userService) {
        this.router = router;
        this.dataService = dataService;
        this.userService = userService;
        this.p = 1;
        this.order = 'description';
        this.reverse = false;
        this.deleteStatus = false;
        // claimsData: any = [];
        this.claimsData = [];
        //Paging props start
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
    }
    ClaimDraftComponent.prototype.setOrder = function (value) {
        if (this.order === value) {
            this.reverse = !this.reverse;
        }
    };
    ClaimDraftComponent.prototype.okClick = function () {
        this.successModal.hide();
        this.getClaimsByBenID(this.userService.user.userid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Beneficiary, this.userService.user.userTpe, "0");
    };
    ClaimDraftComponent.prototype.getDate = function (datestring) {
        return new Date(datestring).toLocaleDateString();
    };
    ClaimDraftComponent.prototype.ngOnInit = function () {
        this.getClaimsByBenID(this.userService.user.userid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Beneficiary, this.userService.user.userTpe, this.page, this.pageSize);
    };
    ClaimDraftComponent.prototype.onChangePage = function (pageOfItems) {
        // update current page of items
        this.pageOfItems = pageOfItems;
    };
    ClaimDraftComponent.prototype.getClaimsByBenID = function (id, entrypoint, userType, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getAllDraftClaimsByBen(id, entrypoint, userType, pageNo, pageSize)
            .subscribe(function (data) {
            _this.claimsData = data.results;
            _this.totalRows = data.rowCount;
        });
    };
    ClaimDraftComponent.prototype.onEditClaimClick = function (item) {
        this.router.navigate(['claim/Entry', { claimId: item.claimId, mode: "draft", claimStatus: item.statusId }], { skipLocationChange: true });
    };
    ClaimDraftComponent.prototype.onViewClaimClick = function (item) {
        this.router.navigate(['claim/ClaimView', { claimId: item.claimId }], { skipLocationChange: true });
    };
    ClaimDraftComponent.prototype.downloadRecept = function (claim) {
        this.dataService
            .downloadReceipt(claim.benName, claim.ssin, claim.claimRefernceNo, claim.claimAmount, claim.claimType)
            .then(function (data) {
            var dd = data;
            var url = window.URL.createObjectURL(data);
            window.open(url);
        });
    };
    ClaimDraftComponent.prototype.onDeleteClaimClick = function (item) {
        var _this = this;
        if (confirm("Are you sure to proceed ")) {
            this.dataService.deleteClaimById(item.claimId)
                .subscribe(function (data) {
                _this.deleteStatus = data;
                if (_this.deleteStatus) {
                    _this.successMessage = "Your claim was deleted successfully";
                }
                else {
                    _this.successMessage = "Invalid transaction";
                }
                _this.successModal.show();
            });
        }
    };
    ClaimDraftComponent.prototype.changepage = function (page) {
        this.getClaimsByBenID(this.userService.user.userid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Beneficiary, this.userService.user.userTpe, this.page, this.pageSize);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], ClaimDraftComponent.prototype, "successModal", void 0);
    ClaimDraftComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-claim-draft',
            template: __webpack_require__(/*! ./claim-draft.component.html */ "./src/app/claim/claim-draft/claim-draft.component.html"),
            styles: [__webpack_require__(/*! ./claim-draft.component.css */ "./src/app/claim/claim-draft/claim-draft.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], ClaimDraftComponent);
    return ClaimDraftComponent;
}());



/***/ }),

/***/ "./src/app/claim/claim-entry/claim-entry.component.css":
/*!*************************************************************!*\
  !*** ./src/app/claim/claim-entry/claim-entry.component.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".invalid-data {\r\n    border: 1px solid red;\r\n}\r\n\r\n.valid-data {\r\n    border: 1px solid rgb(19, 92, 4);\r\n}\r\n"

/***/ }),

/***/ "./src/app/claim/claim-entry/claim-entry.component.html":
/*!**************************************************************!*\
  !*** ./src/app/claim/claim-entry/claim-entry.component.html ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-sm-12 col-md-12 col-lg-12 nocollapse\">\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n                <header>\r\n                    <h2>Claim Entry</h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n                    <!-- widget edit box -->\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n                    </div>\r\n                    <!-- end widget edit box -->\r\n                    <!-- widget content -->\r\n                    <div class=\"widget-body no-padding\">\r\n                        <!-- Success states for elements -->\r\n                        <form class=\"smart-form\">\r\n                            <header>Beneficiary Details</header>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\" *ngIf=\"benficiaryInactive \">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Your registration application is in Inactive/Sent Back/Pending status and you are not eligible to this feature.</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"validateDependent\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Please add atleast one claim to proceed</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"noDependents\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>No dependents available for the given SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"maxLimitExceeded\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Maximum claims limit has been reached for this year</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"maxHelathClaimLimitExceeded\">\r\n                                        <div class=\"col col-12\" style=\"color:red\">\r\n                                            <label>Maximum claims limit for health has been reached for this year</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"pfExsits\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>No pf available for the given SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isPFSubmitted\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>PF claim already submitted for the given SSIN number</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isBenNomineeSubmittedClaim\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Claims are entered through the nominee/agent with the reason of death, till it is resolved you are not allowed to submit the claim</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isBenDeath\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>The given SSIN is in Death status.</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isClaimEffectiveDate\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Can not raise/submit claims before {{claimEffectiveDate | date: 'dd/MM/yyyy'}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\"><strong>Beneficiary Name: </strong>{{beneficiary.benFirstName}} {{beneficiary.benMiddleName}} {{beneficiary.benLastName}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\"><strong>SSIN: </strong>{{beneficiary.ssI_Number}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\"><strong>Bank Name: </strong>{{beneficiary.benBankName}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\"><strong>Account No: </strong>{{beneficiary.benBankAccNo}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\"><strong>IFSC Code: </strong>{{beneficiary.benBankIfscCode}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\"><strong>Branch: </strong>{{beneficiary.benBankBranch}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <div class=\"row\" id=\"CheckBoxList\">\r\n                                    <div class=\"col col-3\">\r\n                                        <label class=\"checkbox state-success\"><input name=\"pf\" [disabled]=\"beneficiary.benFirstName == undefined || !beneficiary.isActive || disablePFCheckbox \" type=\"checkbox\" [checked]=\"viewPf\" (change)=\"pfChange($event)\"><i></i>PF(Provident Fund)</label>\r\n                                        <!--<label class=\"checkbox state-success\"><input disabled=\"disabled\" type=\"checkbox\" [checked]=\"viewPf\" (change)=\"pfChange($event)\"><i></i>PF(Provident Fund)</label>-->\r\n                                    </div>\r\n                                    <div class=\"col col-3\">\r\n                                        <label class=\"checkbox state-success\"><input [disabled]=\"beneficiary.benFirstName == undefined || !beneficiary.isActive || disableHealthCheckbox\" type=\"checkbox\" name=\"health\" [checked]=\"viewHealth\" (change)=\"healthChange($event)\"><i></i>Health & Family</label>\r\n                                    </div>\r\n                                    <div class=\"col col-3\">\r\n                                        <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"checkbox2\" [disabled]=\"beneficiary.benFirstName == undefined || !beneficiary.isActive  || disableDisabilityCheckbox\" [checked]=\"viewDeath\" (change)=\"deathChange($event)\"><i></i>Disability</label>\r\n                                        <!--<label class=\"checkbox state-success\"><input disabled=\"disabled\" type=\"checkbox\" [checked]=\"viewDeath\" (change)=\"deathChange($event)\"><i></i>Disability</label>-->\r\n                                    </div>\r\n                                    <div class=\"col col-3\">\r\n                                        <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"checkbox1\" [disabled]=\"beneficiary.benFirstName == undefined || !beneficiary.isActive  || disableEducationCheckbox\" [checked]=\"viewEducation\" (change)=\"educationChange($event)\"><i></i>Education</label>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                            <fieldset id=\"form-pf\" *ngIf=\"viewPf\">\r\n                                <header>Provident Fund</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    PF No. {{beneficiary.regNumber}}\r\n                                                </label>\r\n                                                <!--removed as per 17th discussions, in future this has to be open-->\r\n                                                <!--<input type=\"text\" class=\"form-control\" name=\"pFNO\" placeholder=\" PF Number\" [(ngModel)]=\"claim.providentFundDetails.pFNO\">-->\r\n                                            </div>\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    Claim Amount {{pfClaimAmount}} /-\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    Date of Maturity {{benMaturityDate  | date: 'dd/MM/yyyy'}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    Locking Period Up-to  {{pfLockingPeriod  | date: 'dd/MM/yyyy'}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label class=\"label\">\r\n                                                    Type of Claim <span [style.color]=\"!pfTypeOfClaimValid?'red':''\"><b>*</b></span>\r\n                                                </label>\r\n                                                <select class=\"form-control select\" name=\"pfTypeOfClaim\" id=\"selclaim\"\r\n                                                        (change)=\"pfTypeOfClaimChange($event.target.value)\"\r\n                                                        [(ngModel)]=\"claim.providentFundDetails.typeOfClaim\"\r\n                                                        #pfTypeOfClaim=\"ngModel\"\r\n                                                        [ngClass]=\"{'invalid-data': pfTypeOfClaim.invalid && ( !pfTypeOfClaimValid || pfTypeOfClaim.touched ),\r\n                                                        'valid-data': pfTypeOfClaimValid && pfTypeOfClaim.valid  }\"\r\n                                                        required>\r\n                                                    <option value=\"0\" disabled>Choose an Option</option>\r\n                                                    <option value=\"{{pf.claimConfigId}}\" *ngFor=\"let pf of pfConfig\">\r\n                                                        {{pf.claimConfigOptionName}}\r\n                                                    </option>\r\n                                                </select><i></i>\r\n                                                <div *ngIf=\"pfTypeOfClaim.invalid && (!pfTypeOfClaimValid || pfTypeOfClaim.touched)\">\r\n                                                    <span style=\"color: red;\">Select a Type of Claim </span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col col-6 \" *ngIf=\"isPrematureClaim\">\r\n                                                <label class=\"label\">\r\n                                                    Reason for Preclosure<span [style.color]=\"!reasonForPreclosureValid?'red':''\"><b>*</b></span>\r\n                                                </label>\r\n                                                <label class=\"textarea textarea-resizable\">\r\n                                                    <textarea rows=\"3\" class=\"custom-scroll\" name=\"reasonForPreclosure\" placeholder=\"Reason for Preclosure\"\r\n                                                              [(ngModel)]=\"claim.providentFundDetails.reasonForPreClosure\" #reasonForPreclosure=\"ngModel\"\r\n                                                              [ngClass]=\"{'invalid-data': reasonForPreclosure.invalid && ( !reasonForPreclosureValid || reasonForPreclosure.touched ),\r\n                                                        'valid-data': reasonForPreclosureValid && reasonForPreclosure.valid  }\"\r\n                                                              required></textarea>\r\n                                                </label>\r\n                                                <div *ngIf=\"reasonForPreclosure.invalid && (!reasonForPreclosureValid || reasonForPreclosure.touched)\">\r\n                                                    <span style=\"color: red;\">Reason For Preclosure is required </span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </fieldset>\r\n                            <fieldset id=\"health-family\" *ngIf=\"viewHealth\">\r\n                                <header>Health & Family</header>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Type of Claim<span [style.color]=\"!typeOfClaimValid?'red':''\"><b>*</b></span></label>\r\n                                        <select class=\"form-control select\" name=\"typeOfClaim\" id=\"selclaim\" (change)=\"typeOfClaimChange($event.target.value)\" [(ngModel)]=\"claim.healthFamilyDetails.typeOfClaim\"\r\n                                                #typeOfClaim=\"ngModel\"\r\n                                                [ngClass]=\"{'invalid-data': typeOfClaim.invalid && ( !typeOfClaimValid || typeOfClaim.touched ),\r\n                                        'valid-data': typeOfClaimValid && typeOfClaim.valid  }\"\r\n                                                required>\r\n                                            <option value=\"0\" disabled>Choose a Type of Claim</option>\r\n                                            <option value=\"{{health.claimConfigId\r\n                                                }}\" *ngFor=\"let health of healthConfig\">\r\n                                                {{health.claimConfigOptionName}}\r\n                                            </option>\r\n                                        </select> <i></i>\r\n                                        <div *ngIf=\"typeOfClaim.invalid && (!typeOfClaimValid || typeOfClaim.touched)\">\r\n                                            <span style=\"color: red;\">Select a Type of Claim </span>\r\n                                        </div>\r\n\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Hospital <span [style.color]=\"!hospital?'red':''\"><b>*</b></span></label>\r\n\r\n                                        <select class=\"form-control select\" name=\"hospitalId\" id=\"ddlhospital\" [(ngModel)]=\"claim.healthFamilyDetails.hospitalId\"\r\n                                                #hospitalId=\"ngModel\" (change)=\"hospitalChange($event.target.value)\"\r\n                                                [ngClass]=\"{'invalid-data': hospitalId.invalid && ( !hospital || hospitalId.touched ),\r\n                                        'valid-data': hospital && hospitalId.valid  }\"\r\n                                                required>\r\n                                            <option value=\"0\" disabled>Choose a Hospital</option>\r\n                                            <option value=\"{{hospital.hospitalId}}\" *ngFor=\"let hospital of hospotalList\">{{hospital.hospitalName}}</option>\r\n                                        </select> <i></i>\r\n\r\n                                        <div *ngIf=\"hospitalId.invalid && (!hospital || hospitalId.touched)\">\r\n                                            <span style=\"color: red;\">Select a Hospital </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"isOtherHospital\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Govt./Municipal Hospital <span [style.color]=\"!otherHospitalValid?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"otherHospital\" placeholder=\"Govt./Municipal Hospital\" [(ngModel)]=\"claim.healthFamilyDetails.otherHospital\"\r\n                                                   maxlength=\"150\" #otherHospital=\"ngModel\" [ngClass]=\"{'invalid-data': otherHospital.invalid && ( !otherHospitalValid || otherHospital.touched ),\r\n                                                        'valid-data': otherHospitalValid && otherHospital.valid  }\" required>\r\n                                        </label>\r\n                                        <div *ngIf=\"otherHospital.invalid && (!otherHospitalValid || otherHospital.touched)\">\r\n                                            <span style=\"color: red;\">Govt./Municipal Hospital is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\" id=\"inoutward\">\r\n                                        <label class=\"label\">Hospitalization/OPD <span [style.color]=\"!hospitalization?'red':''\"><b>*</b></span></label>\r\n\r\n                                        <select class=\"form-control select\" name=\"typeOfHospitalization\" id=\"ddinward\" (change)=\"hospitalizationChange($event.target.value)\"\r\n                                                [(ngModel)]=\"claim.healthFamilyDetails.typeOfHospitalization\"\r\n                                                #typeOfHospitalization=\"ngModel\"\r\n                                                [ngClass]=\"{'invalid-data': typeOfHospitalization.invalid && (!hospitalization || typeOfHospitalization.touched ),\r\n                                        'valid-data': hospitalization && typeOfHospitalization.valid  }\"\r\n                                                required>\r\n                                            <option value=\"0\" disabled>Choose an Option</option>\r\n                                            <option value=\"{{hosp.lovDtlId}}\" *ngFor=\"let hosp of hospitalizationLov\">{{hosp.optionName}}</option>\r\n                                        </select><i></i>\r\n\r\n                                        <div *ngIf=\"typeOfHospitalization.invalid && (!hospitalization || typeOfHospitalization.touched)\">\r\n                                            <span style=\"color: red;\">Select Hospitalization/OPD </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Patient Id </label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"patientId\" placeholder=\"Patient Id\" [(ngModel)]=\"claim.healthFamilyDetails.patientId\" maxlength=\"50\">\r\n                                        </label>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"viewDateOfFirstAppointment\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Name of Disease </label>\r\n\r\n                                        <select class=\"form-control select\" name=\"nameOfDisease\" id=\"ddinward\" (change)=\"nameOfDiseaseChange($event.target.value)\"\r\n                                                [(ngModel)]=\"claim.healthFamilyDetails.nameOfTheDisease\">\r\n                                            <option value=\"0\" disabled>Choose an Option</option>\r\n                                            <option value=\"{{dise.lovDtlId}}\" *ngFor=\"let dise of diseasesLov\">{{dise.optionName}}</option>\r\n                                        </select><i></i>\r\n                                    </section>\r\n                                    <section class=\"col col-6 selectContainer\" *ngIf=\"viewNameOfClinicalTest\">\r\n                                        <label class=\"label\">Name of clinical test </label>\r\n                                        <ng-multiselect-dropdown name=\"nameOfClinicalTest\" [placeholder]=\"'All'\"\r\n                                                                 [data]=\"clinicalTestLov\"\r\n                                                                 [(ngModel)]=\"nameOfClinicalTestIds\"\r\n                                                                 [settings]=\"clinicalTestSettings\"\r\n                                                                 (onSelect)=\"onItemSelect($event)\"\r\n                                                                 (onSelectAll)=\"onSelectAll($event)\">\r\n                                        </ng-multiselect-dropdown>\r\n                                        <!--<select class=\"form-control select\" name=\"nameOfClinicalTest\" id=\"ddinward\"\r\n                                                [(ngModel)]=\"claim.healthFamilyDetails.nameOfClinicalTest\">\r\n                                            <option value=\"0\" disabled>Choose an Option</option>\r\n                                            <option value=\"{{clin.lovDtlId}}\" *ngFor=\"let clin of clinicalTestLov\">{{clin.optionName}}</option>\r\n\r\n                                        </select><i></i>-->\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section id=\"chkAccident\" class=\"col col-6\" *ngIf=\"viewMetWithAnAccident\">\r\n                                        <label class=\"label\">Met with an Accident?</label>\r\n                                        <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"isAccident\" id=\"chkAcc\" (change)=\"chkAccidentChange($event,claim.healthFamilyDetails.isAccident)\" [(ngModel)]=\"claim.healthFamilyDetails.isAccident\"><i></i>Yes</label>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" id=\"secFirstApp\" *ngIf=\"viewDateOfFirstAppointment\">\r\n                                        <label class=\"label\">Date of First Appointment <span [style.color]=\"!dateofAppointment?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <input type=\"text\" name=\"firstAppointmentDate\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                   [maxDate]=\"maxAdmitDate\" placeholder=\"DD/MM/YYYY\" value=\"{{ claim.healthFamilyDetails.firstAppointmentDate | date: 'dd/MM/yyyy' }}\"\r\n                                                   [(ngModel)]=\"claim.healthFamilyDetails.firstAppointmentDate\" readonly\r\n                                                   #firstAppointmentDate=\"ngModel\"\r\n                                                   [ngClass]=\"{'invalid-data':firstAppointmentDate.invalid && (!dateofAppointment), 'valid-data': firstAppointmentDate.valid && dateofAppointment}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"firstAppointmentDate.invalid && (!dateofAppointment)\">\r\n                                            <span style=\"color: red;\">Date of First Appointment is required </span>\r\n                                        </div>\r\n\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"viewDateOfAdmit\">\r\n                                    <section class=\"col col-6\" id=\"secAdmit\">\r\n                                        <label class=\"label\">Date of Admission to Hospital <span [style.color]=\"!dateofAdmin?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <!--<input type=\"text\" name=\"dateofAdmit\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\" placeholder=\"DD/MM/YYYY\" value=\"{{ claim.healthFamilyDetails.admittedDate | date: 'dd/MM/yyyy' }}\" [(ngModel)]=\"claim.healthFamilyDetails.admittedDate\" (bsValueChange)=\"dateofadminchange($event)\" readonly>-->\r\n                                            <input type=\"text\" name=\"admittedDate\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                   [maxDate]=\"maxAdmitDate\"\r\n                                                   #admittedDate=\"ngModel\"\r\n                                                   placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"claim.healthFamilyDetails.admittedDate\"\r\n                                                   value=\"{{ claim.healthFamilyDetails.admittedDate | date: 'dd/MM/yyyy' }}\"\r\n                                                   (bsValueChange)=\"dateofadminchange($event)\" readonly\r\n                                                   [ngClass]=\"{'invalid-data':admittedDate.invalid && (!dateofAdmin), 'valid-data':admittedDate.valid && dateofAdmin}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"admittedDate.invalid && (!dateofAdmin)\">\r\n                                            <span style=\"color: red;\">Date of Admission to Hospital is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" id=\"secDischarge\">\r\n                                        <label class=\"label\">Date of Discharge <span [style.color]=\"!dateofDischargeValid?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <!--<input type=\"text\" name=\"dateofDischarge\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\" [minDate]=\"dischargeMinDt\" [disabled]=\"disableDischarge\" placeholder=\"DD/MM/YYYY\" value=\"claim.healthFamilyDetails.dischargeDate | date: 'dd/MM/yyyy'\" [(ngModel)]=\"claim.healthFamilyDetails.dischargeDate\" (bsValueChange)=\"dateofdischargechange($event)\" readonly>-->\r\n                                            <input type=\"text\" name=\"dischargeDate\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                   [maxDate]=\"maxAdmitDate\"\r\n                                                   [minDate]=\"dischargeMinDt\" [disabled]=\"disableDischarge\" placeholder=\"DD/MM/YYYY\"\r\n                                                   #dischargeDate=\"ngModel\"\r\n                                                   [(ngModel)]=\"claim.healthFamilyDetails.dischargeDate\"\r\n                                                   value=\"{{claim.healthFamilyDetails.dischargeDate | date: 'dd/MM/yyyy'}}\"\r\n                                                   (bsValueChange)=\"dateofdischargechange($event)\" readonly\r\n                                                   [ngClass]=\"{'invalid-data':dischargeDate.invalid && (!dateofDischargeValid), 'valid-data':dischargeDate.valid && dateofDischargeValid}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"dischargeDate.invalid && (!dateofDischargeValid)\">\r\n                                            <span style=\"color: red;\">Date of discharge is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Cost of Clinical Test </label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"costOfClinicalTest\" placeholder=\"Cost of Clinical Test\" NumbersOnly [(ngModel)]=\"claim.healthFamilyDetails.costOfClinicalTest\" [disabled]=\"disableCost\">\r\n                                        </label>\r\n                                    </section>\r\n\r\n                                    <section class=\"col col-6\">\r\n\r\n                                        <label class=\"label\">Cost of Medicine </label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"costOfMedicine\" placeholder=\"Cost of Medicine\" NumbersOnly [(ngModel)]=\"claim.healthFamilyDetails.costOfMedicine\" [disabled]=\"disableCost\">\r\n                                        </label>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Claim for <span [style.color]=\"!claimForValid?'red':''\"><b>*</b></span></label>\r\n\r\n                                        <select class=\"form-control select\" name=\"claimFor\" id=\"claimFor\" (change)=\"claimForChange($event)\"\r\n                                                [(ngModel)]=\"claim.healthFamilyDetails.claimFor\"\r\n                                                #claimFor=\"ngModel\"\r\n                                                [ngClass]=\"{'invalid-data':claimFor.invalid && (!claimForValid ||  claimFor.touched ), 'valid-data': claimFor.valid && claimForValid}\"\r\n                                                required>\r\n                                            <option value=\"0\" disabled>Choose an Option</option>\r\n                                            <option value=\"{{htype.lovDtlId}}\" *ngFor=\"let htype of healthtypeofClaim\">{{htype.optionName}}</option>\r\n                                        </select> <i></i>\r\n\r\n\r\n                                        <div *ngIf=\"claimFor.invalid && (!claimForValid ||  claimFor.touched)\">\r\n                                            <span style=\"color: red;\">Claim for is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" *ngIf=\"viewDateOfAdmit\">\r\n                                        <label class=\"label\">Cost of Hospitalization </label>\r\n                                        <label class=\"input\">\r\n                                            <input type=\"text\" name=\"costOfHospitalization\" NumbersOnly placeholder=\"Cost of Hospitalization\" [(ngModel)]=\"claim.healthFamilyDetails.costOfHospitalization\">\r\n                                        </label>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" id=\"family\" *ngIf=\"viewFamily\">\r\n                                        <label class=\"label\">Family Member <span [style.color]=\"!familyMember?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"select\">\r\n                                            <select class=\"form-control select\" name=\"familyMemberId\" [(ngModel)]=\"claim.healthFamilyDetails.familyMemberId\"\r\n                                                    #familyMemberId=\"ngModel\"\r\n                                                    [ngClass]=\"{'invalid-data':familyMemberId.invalid && (!familyMember ||  familyMemberId.touched), 'valid-data': familyMemberId.valid && familyMember}\"\r\n                                                    required>\r\n                                                <option value=\"0\" disabled>Choose an Option</option>\r\n                                                <option value=\"{{benf.benFamilyMemSno}}\" *ngFor=\"let benf of benficiaryFamilybyHealth\">{{benf.benDependentName}} - {{benf.benDependentRelation}}</option>\r\n                                            </select> <i></i>\r\n                                        </label>\r\n                                        <div *ngIf=\"familyMemberId.invalid && (!familyMember ||  familyMemberId.touched)\">\r\n                                            <span style=\"color: red;\">Family Member is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\" *ngIf=\"enableReasonForDelaySubmissionInHealth\">\r\n                                        <label class=\"label\">Reason for Delay Submission <span [style.color]=\"!reasonForHealthDelayValid?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <textarea name=\"reasonForHealthDelay\" rows=\"4\" cols=\"72\" [(ngModel)]=\"claim.healthFamilyDetails.reasonForDelaySubmission\" placeholder=\"Reason for Delay Submission\"></textarea>\r\n                                        </label>\r\n                                        <div *ngIf=\"!reasonForHealthDelayValid\">\r\n                                            <span style=\"color: red;\">Reason for Delay Submission is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row top-10\" id=\"lossOfEmployment\" *ngIf=\"viewSelf\">\r\n                                    <section class=\"col col-12\" style=\"margin-bottom: 0;\">\r\n                                        <label class=\"label\"><strong>Loss of Employment</strong></label>\r\n                                        <hr />\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row top-10\" id=\"daterangeloe\" *ngIf=\"viewSelf\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">From Date<span [style.color]=\"!loeFromDate?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <input type=\"text\" name=\"lossOfEmploymentFromDate\" autocomplete=\"off\" class=\"form-control\"\r\n                                                   [disabled]=\"true\" placeholder=\"DD/MM/YYYY\"\r\n                                                   [ngModel]=\"claim.healthFamilyDetails.loeFromDate | date: 'dd/MM/yyyy'\" readonly\r\n                                                   #lossOfEmploymentFromDate=\"ngModel\"\r\n                                                   [ngClass]=\"{'invalid-data':lossOfEmploymentFromDate.invalid && (!loeFromDate ||  lossOfEmploymentFromDate.touched), 'valid-data': lossOfEmploymentFromDate.valid && loeFromDate}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"lossOfEmploymentFromDate.invalid && (!loeFromDate ||  lossOfEmploymentFromDate.touched)\">\r\n                                            <span style=\"color: red;\">Form Date is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">To Date<span [style.color]=\"!loeToDate?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <input type=\"text\" name=\"lossOfEmploymentToDate\" autocomplete=\"off\" class=\"form-control\"\r\n                                                   [disabled]=\"true\" placeholder=\"DD/MM/YYYY\"\r\n                                                   [ngModel]=\"claim.healthFamilyDetails.loeToDate | date: 'dd/MM/yyyy'\" readonly\r\n                                                   #lossOfEmploymentToDate=\"ngModel\"\r\n                                                   [ngClass]=\"{'invalid-data':lossOfEmploymentToDate.invalid && (!loeToDate ||  lossOfEmploymentToDate.touched), 'valid-data': lossOfEmploymentToDate.valid && loeToDate}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"lossOfEmploymentToDate.invalid && (!loeToDate ||  lossOfEmploymentToDate.touched)\">\r\n                                            <span style=\"color: red;\">To Date is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" *ngIf=\"viewLOEAmount\">\r\n                                        <label class=\"label\" style=\"margin-top:30px;\">Loss of Employment Benefit: {{lossOfEmploymentAmount}}/- </label>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"><strong>Packages</strong> </label><br>\r\n                                        <hr />\r\n                                    </section>\r\n\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <a (click)=\"viewPackages()\" class=\"smart-form-link\">View All Packages</a>\r\n                                    </section>\r\n\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"selectedPackages.length>0\">\r\n                                    <table class=\"table table-striped\" [mfData]=\"selectedPackages\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th><mfDefaultSorter by=\"packageName\">Package Name</mfDefaultSorter></th>\r\n                                                <th><mfDefaultSorter by=\"packageCode\">Package Code</mfDefaultSorter></th>\r\n                                                <th><mfDefaultSorter by=\"ailmentName\">Ailment Name</mfDefaultSorter></th>\r\n                                                <th><mfDefaultSorter by=\"amount\">Amount</mfDefaultSorter></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr *ngFor=\"let pak of mf.data;\">\r\n                                                <td>{{pak.packageName}}</td>\r\n                                                <td>{{pak.packageCode}}</td>\r\n                                                <td>{{pak.ailmentName}}</td>\r\n                                                <td>{{pak.amount}}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                        <tfoot><tr><td colspan=\"4\"><mfBootstrapPaginator></mfBootstrapPaginator></td></tr></tfoot>\r\n                                    </table>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"><strong>Upload Documents</strong> </label><br>\r\n                                        <hr />\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"showDisCertUpload\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">\r\n                                            Discharge Certificate from Govt./Empanelled Hospital\r\n                                            <span [style.color]=\"!dischargeCertificate?'red':''\"><b>*</b></span>\r\n                                        </label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'dischargeCertificate')\">Browse</span>\r\n                                            <input type=\"text\" readonly>\r\n                                        </div>\r\n\r\n                                        <div *ngIf=\"(!dischargeCertificate) && (healthDischargeCertificate.fileName =='' || healthDischargeCertificate.fileName ==undefined )\">\r\n                                            <span style=\"color: red;\">Discharge certificate is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthDischargeCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Original Vouchers </label>  <!--<span [style.color]=\"!originalVoucher?'red':''\"><b>*</b></span>-->\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" accept=\"image/*,.pdf\" (change)=\"changeCertificate($event,'originalVoucher')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <!--<div *ngIf=\"(!originalVoucher) && (healthOriginalVoucher.fileName =='' || healthOriginalVoucher.fileName ==undefined)\">\r\n                <span style=\"color: red;\">Original vouchers is required </span>\r\n            </div>-->\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthOriginalVoucher.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Self attested copy of doctor's last prescription <span [style.color]=\"!hospitalselfAttested?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'healthselfAttest')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div *ngIf=\"(!hospitalselfAttested) && (healthSelfAttached.fileName =='' || healthSelfAttached.fileName ==undefined )\">\r\n                                            <span style=\"color: red;\">Self attested is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthSelfAttached.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Expenses Sheet </label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'healthExpensesSheet')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <!--<div *ngIf=\"(!hospitalselfAttested) && (healthSelfAttached.fileName =='' || healthSelfAttached.fileName ==undefined )\">\r\n                <span style=\"color: red;\">Self attested is required </span>\r\n            </div>-->\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthExpensesSheet.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"enableReasonForDelaySubmissionInHealth\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Condonation certificate  <span [style.color]=\"!healthCondolationCertificateUploaded?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"healthCondolationCertificate\" (change)=\"changeCertificate($event,'healthCondolationCertificate')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div *ngIf=\"(!healthCondolationCertificateUploaded) && (healthCondolationCertificate.fileName =='' || healthCondolationCertificate.fileName == undefined )\">\r\n                                            <span style=\"color: red;\">Condonation certificate is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{healthCondolationCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isCertifynotESI\" [(ngModel)]=\"claim.healthFamilyDetails.isCertifynotESI\"\r\n                                                       #isCertifynotESI=\"ngModel\"\r\n                                                       [ngClass]=\"{'invalid-data':isCertifynotESI.invalid && (!rigisterESI ||  isCertifynotESI.touched), 'valid-data': isCertifynotESI.valid && rigisterESI}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that\r\n                                                I am not registered under ESI Act, 1948 or RSBY or Swasthya Sathi or WBTWSSS\r\n                                                <span [style.color]=\"!rigisterESI?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isCertifynotESI.invalid && (!rigisterESI ||  isCertifynotESI.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of ESI Act is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                            </fieldset>\r\n                            <fieldset id=\"death-diasability\" *ngIf=\"viewDeath\">\r\n                                <header>Disability</header>\r\n                                <div class=\"row\" id=\"divdisability1\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Date of release from hospital/Accident <span [style.color]=\"!dateofrelease?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <i class=\"icon-append fa fa-calendar\"></i>\r\n                                            <!--<input type=\"text\" name=\"request\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\" placeholder=\"DD/MM/YYYY\" [(bsValue)]=\"claim.disabilityDetails.dateofrelease\" readonly>-->\r\n                                            <!--<input type=\"date\" name=\"request\" placeholder=\"06/09/2018\" class=\"form-control\" data-dateformat='dd/mm/yy' [(ngModel)]=\"claim.disabilityDetails.dateofrelease\">(bsValueChange)=\"dateofadminchange($event)\"-->\r\n                                            <input type=\"text\" name=\"request1\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxAdmitDate\"\r\n                                                   placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"claim.disabilityDetails.dateofRelease\" (bsValueChange)=\"disabilityDateofReleaseChange($event)\"\r\n                                                   value=\"{{ claim.disabilityDetails.dateofRelease | date: 'dd/MM/yyyy' }}\"\r\n                                                   #request1=\"ngModel\" readonly\r\n                                                   [ngClass]=\"{'invalid-data':request1.invalid && (!dateofrelease), 'valid-data':request1.valid && dateofrelease}\"\r\n                                                   required>\r\n                                        </label>\r\n                                        <div *ngIf=\"request1.invalid && (!dateofrelease)\">\r\n                                            <span style=\"color: red;\">Date of release from hospital/Accident is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Nature of Disability <span [style.color]=\"!natureOfDisability?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"select\">\r\n                                            <select name=\"gender\" id=\"natureOfDisabilityDropdown\" (change)=\"disabilityChange($event.target.value)\" [(ngModel)]=\"claim.disabilityDetails.natureOfDisability\"\r\n                                                    #natureOfDisabilityDropdown=\"ngModel\" [ngClass]=\"{'invalid-data': natureOfDisabilityDropdown.invalid && ( !natureOfDisability || natureOfDisabilityDropdown.touched ),\r\n                                                    'valid-data': natureOfDisability && natureOfDisabilityDropdown.valid  }\" required>\r\n                                                <option value=\"0\">Choose an Option</option>\r\n                                                <option value=\"{{dis.claimConfigId}}\" *ngFor=\"let dis of disabilityConfig\">{{dis.claimConfigOptionName}}</option>\r\n                                            </select> <i></i>\r\n                                        </label>\r\n                                        <div *ngIf=\"!checkNatureOfDisability\">\r\n                                            <span style=\"color: red;\">Claim has been already submitted with this nature of disability </span>\r\n                                        </div>\r\n                                        <div *ngIf=\"natureOfDisabilityDropdown.invalid && (!natureOfDisability || natureOfDisabilityDropdown.touched)\">\r\n                                            <span style=\"color: red;\">Select Nature of Disability </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" id=\"divdisability2\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\"> Details of Disability</label>\r\n                                        <label class=\"input\">\r\n                                            <textarea name=\"request\" rows=\"4\" cols=\"72\" [(ngModel)]=\"claim.disabilityDetails.detailsOfDisability\" placeholder=\"Details of disability\"></textarea>\r\n                                        </label>\r\n                                    </section>\r\n                                    <section class=\"col col-6\" *ngIf=\"enableReasonForDelaySubmission\">\r\n                                        <label class=\"label\"> Reason for Delay Submission <span [style.color]=\"!reasonForDelayValid?'red':''\"><b>*</b></span></label>\r\n                                        <label class=\"input\">\r\n                                            <textarea name=\"reasonForDelay\" rows=\"4\" cols=\"72\" [(ngModel)]=\"claim.disabilityDetails.reasonForDelaySubmission\" placeholder=\"Reason for Delay Submission\"></textarea>\r\n                                        </label>\r\n                                        <div *ngIf=\"!reasonForDelayValid\">\r\n                                            <span style=\"color: red;\">Reason for Delay Submission is required </span>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"enableDeatheligibility\">\r\n                                    <section class=\"col col-6\" id=\"eligibleAmount\">\r\n\r\n                                        <!--<div class=\"col col-6\">\r\n                                            <label class=\"label\"><strong>Eligible Amount:</strong>{{disableEligibility}}</label>\r\n                                        </div>-->\r\n                                        <label class=\"label\">Eligible Amount: {{disableEligibility}} </label>\r\n                                    </section>\r\n                                </div>\r\n\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n\r\n                                        <label class=\"label\"><strong>Upload Documents</strong> </label><br>\r\n                                        <hr />\r\n                                    </section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Certificate of disability from the competent authority <span [style.color]=\"!disabilityCertificateUploaded?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'disablityCertificate')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div *ngIf=\"(!disabilityCertificateUploaded) && (disabilityCertificate.fileName =='' || disabilityCertificate.fileName ==undefined )\">\r\n                                            <span style=\"color: red;\">Discharge certificate is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{disabilityCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                    <!--<section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Certificate of disability from the competent authority <span [style.color]=\"!disabilityCertificateUploaded?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'disablityCertificate')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{disabilityCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>-->\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"enableReasonForDelaySubmission\">\r\n                                    <section class=\"col col-6 top-5\">\r\n                                        <label class=\"label\">Condolation certificate  <span [style.color]=\"!condolationCertificateUploaded?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'condolationCertificate')\">Browse</span><input type=\"text\" readonly>\r\n                                        </div>\r\n                                        <div *ngIf=\"(!condolationCertificateUploaded) && (condolationCertificate.fileName =='' || condolationCertificate.fileName == undefined )\">\r\n                                            <span style=\"color: red;\">Condolation certificate is required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr>\r\n                                                    <td>{{condolationCertificate.fileName}}</td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section style=\"padding-top:30px\" class=\"col col-6\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isDeathorpermanentdisabilitynotcausedbyintentional\" [(ngModel)]=\"claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyintentional\"\r\n                                                       #isDeathorpermanentdisabilitynotcausedbyintentional=\"ngModel\" [ngClass]=\"{'invalid-data':isDeathorpermanentdisabilitynotcausedbyintentional.invalid && (!isDeathorpermanent1 ||  isDeathorpermanentdisabilitynotcausedbyintentional.touched), 'valid-data': isDeathorpermanentdisabilitynotcausedbyintentional.valid && isDeathorpermanent1}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that\r\n                                                permanent disability not caused by intentional self injury, suicide or attempted suicide, insanity or immorality or under influence of intoxicating liquor, drug or narcotic\r\n                                                <span [style.color]=\"!isDeathorpermanent1?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isDeathorpermanentdisabilitynotcausedbyintentional.invalid && (!isDeathorpermanent1 ||  isDeathorpermanentdisabilitynotcausedbyintentional.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of permanent disability not caused by intentional self injury is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isDeathorpermanentdisabilitynotcausedbyinjuries\" [(ngModel)]=\"claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyinjuries\"\r\n                                                       #isDeathorpermanentdisabilitynotcausedbyinjuries=\"ngModel\" [ngClass]=\"{'invalid-data':isDeathorpermanentdisabilitynotcausedbyinjuries.invalid && (!isDeathorpermanent2 ||  isDeathorpermanentdisabilitynotcausedbyinjuries.touched), 'valid-data': isDeathorpermanentdisabilitynotcausedbyinjuries.valid && isDeathorpermanent2}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that permanent disability not caused by injuries resulting from riots, civil commotions, or racing of any kind\r\n                                                <span [style.color]=\"!isDeathorpermanent2?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isDeathorpermanentdisabilitynotcausedbyinjuries.invalid && (!isDeathorpermanent2 ||  isDeathorpermanentdisabilitynotcausedbyinjuries.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of permanent disability not caused by injuries is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isOtherFinancialAssistance\" [(ngModel)]=\"claim.disabilityDetails.isOtherFinancialAssistance\"\r\n                                                       #isOtherFinancialAssistance=\"ngModel\" [ngClass]=\"{'invalid-data':isOtherFinancialAssistance.invalid && (!isDeathorpermanent3 ||  isOtherFinancialAssistance.touched), 'valid-data': isOtherFinancialAssistance.valid && isDeathorpermanent3}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that I am not in receipt of any financial assistance of similar nature from the government\r\n                                                <span [style.color]=\"!isDeathorpermanent3?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isOtherFinancialAssistance.invalid && (!isDeathorpermanent3 ||  isOtherFinancialAssistance.touched)\">\r\n                                                <span style=\"color: red;\">Declaration of not in receipt of any financial assistance is required</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <!--<section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isDeathorpermanentdisabilitynotcausedbyintentional\" [(ngModel)]=\"claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyintentional\"><i></i>I Certify that the\r\n                                                Death or permanent disability not caused by intentional self injury, suicide or attempted suicide, insanity or immorality or under influence of intoxicating liquor, drug or narcotic\r\n                                            </label>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"isDeathorpermanentdisabilitynotcausedbyinjuries\" [(ngModel)]=\"claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyinjuries\"><i></i>I Certify that Death or permanent disability not caused by injuries resulting from riots, civil commotions, or racing of any kind</label>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"isOtherFinancialAssistance\" [(ngModel)]=\"claim.disabilityDetails.isOtherFinancialAssistance\"><i></i>I Certify that I am not in receipt of any financial assistance of similar nature from the government</label>\r\n                                        </div>\r\n                                    </section>-->\r\n                                </div>\r\n                            </fieldset>\r\n                            <!--\r\n                                                <fieldset id=\"death-diasability\" *ngIf=\"viewDeath\">\r\n                                                    <header>Death & Disability</header>\r\n                                                    <div class=\"row\" id=\"divdisability1\">\r\n                                                        <section class=\"col col-6\">\r\n                                                            <label class=\"label\">Date of release from hospital/Accident</label>\r\n                                                            <label class=\"input\">\r\n                                                                <i class=\"icon-append fa fa-calendar\"></i>\r\n                                                                <input type=\"date\" name=\"request\" placeholder=\"06/09/2018\" class=\"form-control\" data-dateformat='dd/mm/yy' [(ngModel)]=\"claim.disabilityDetails.dateofrelease\">\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section class=\"col col-6\">\r\n                                                            <label class=\"label\">Nature of Disability</label>\r\n                                                            <label class=\"select\">\r\n                                                                <select name=\"gender\" id=\"natureOfDisability\" (change)=\"disabilityChange(claim.disabilityDetails.natureOfDisability)\" [(ngModel)]=\"claim.disabilityDetails.natureOfDisability\">\r\n                                                                    <option value=\"0\">Choose an Option</option>\r\n                                                                    <option value=\"{{dis.claimConfigId}}\" *ngFor=\"let dis of disabilityConfig\" (change)=\"disabilityChange($event)\">{{dis.claimConfigOptionName}}</option>\r\n                                                                </select> <i></i>\r\n                                                            </label>\r\n                                                        </section>\r\n                                                    </div>\r\n                                                    <div class=\"row\" id=\"divdisability2\">\r\n                                                        <section class=\"col col-6\">\r\n                                                            <label class=\"label\"> Details of Disability</label>\r\n                                                            <label class=\"input\">\r\n                                                                <textarea name=\"request\" rows=\"4\" cols=\"72\" [(ngModel)]=\"claim.disabilityDetails.detailsOfDisability\" placeholder=\"Details of disability\"></textarea>\r\n                                                            </label>\r\n                                                        </section>\r\n                                                    </div>\r\n                                                    <div class=\"row\" *ngIf=\"enableDeatheligibility\">\r\n                                                        <section class=\"col col-6\" id=\"eligibleAmount\">\r\n                                                            <div class=\"col col-6\">\r\n                                                                <label class=\"label\"><strong>Eligible Amount:</strong></label>\r\n                                                            </div>\r\n                                                            <div class=\"col col-6\">\r\n                                                                <label id=\"amtbasedonDisability\">{{disableEligibility}}</label>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </div>\r\n                                                    <!--<div class=\"row\" id=\"divdeath1\">\r\n                                                    <section class=\"col col-6\">\r\n                                                        <label class=\"label\">Nature of Death</label>\r\n                                                        <label class=\"select\">\r\n                                                            <select name=\"natureofDeath\" id=\"selnature\" (change)=\"natureOfDeathChange($event.target.value)\" [(ngModel)]=\"claim.deathDetails.natureofDeath\">\r\n                                                                <option value=\"0\">Choose an Option</option>\r\n                                                                <option value=\"{{death.claimConfigId}}\" *ngFor=\"let death of deathConfig\">{{death.claimConfigOptionName}}</option>\r\n\r\n                                    </select> <i></i>\r\n                                </label>\r\n                            </section>\r\n                                <section class=\"col col-6\">\r\n                                    <label class=\"label\">Date of Death</label>\r\n                                    <label class=\"input\">\r\n                                        <i class=\"icon-append fa fa-calendar\"></i>\r\n                                        <input type=\"text\" name=\"dateofDeath\" placeholder=\"06/09/2018\" class=\"form-control\" data-dateformat='dd/mm/yy' [(ngModel)]=\"claim.deathDetails.dateofDeath\">\r\n                                    </label>\r\n                                </section>\r\n                            </div>\r\n                            <div class=\"row\" id=\"divdeath2\">\r\n                                <section class=\"col col-6\" id=\"PlaceOfDeath\" *ngIf=\"viewAccidental\">\r\n                                    <label class=\"label\">Place of Death </label>\r\n                                    <input type=\"text\" class=\"form-control\" name=\"placeofDeath\" placeholder=\" Place of Death\" [(ngModel)]=\"claim.deathDetails.placeofDeath\">\r\n                                </section>\r\n                                <section class=\"col col-6\">\r\n                                    <label class=\"label\"> Details of Death</label>\r\n                                    <label class=\"input\">\r\n                                        <textarea name=\"detailsofDeath\" rows=\"4\" cols=\"72\" placeholder=\"Details of disability\" [(ngModel)]=\"claim.deathDetails.detailsofDeath\"></textarea>\r\n                                    </label>\r\n                                </section>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <section class=\"col col-6\" id=\"eligibleAmountdeath\" *ngIf=\"viewEligibilityAmount\">\r\n                                    <div class=\"col col-6\">\r\n                                        <label class=\"label\"><strong>Eligible Amount:</strong> </label>\r\n                                    </div>\r\n                                    <div class=\"col col-6\">\r\n                                        <label id=\"amtbasedonDisability\">{{deathEligibility}}</label>\r\n                                    </div>\r\n                                </section>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <section class=\"col col-6\">\r\n\r\n                                    <label class=\"label\"><strong>Upload Documents</strong> </label><br>\r\n                                    <hr />\r\n                                </section>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <section class=\"col col-6 top-5\">\r\n                                    <label class=\"label\">Attested copy of Death Certificate</label>\r\n                                    <div class=\"input input-file\">\r\n                                        <span class=\"button\"><input type=\"file\" id=\"file\" onchange=\"this.parentNode.nextSibling.value = this.value\">ueBrowse</span><input type=\"text\" readonly>\r\n                                    </div>\r\n                                </section>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <section class=\"col col-6 top-5\">\r\n                                    <label class=\"label\">Certificate of disability from the competent authority</label>\r\n                                    <div class=\"input input-file\">\r\n                                        <span class=\"button\"><input type=\"file\" id=\"file\" onchange=\"this.parentNode.nextSibling.value = this.value\">Browse</span><input type=\"text\" readonly>\r\n                                    </div>\r\n                                </section>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <section>\r\n                                    <div class=\"col col-12\">\r\n                                        <label class=\"checkbox state-success\">\r\n                                            <input type=\"checkbox\" name=\"isDeathorpermanentdisabilitynotcausedbyintentional\" [(ngModel)]=\"claim.deathDetails.isDeathorpermanentdisabilitynotcausedbyintentional\"><i></i>I Certify that the\r\n                                            Death or permanent disability not caused by intentional self injury, suicide or attempted suicide, insanity or immorality or under influence of intoxicating liquor, drug or narcotic\r\n                                        </label>\r\n                                    </div>\r\n                                </section>\r\n                                <section>\r\n                                    <div class=\"col col-12\">\r\n                                        <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"isDeathorpermanentdisabilitynotcausedbyinjuries\" [(ngModel)]=\"claim.deathDetails.isDeathorpermanentdisabilitynotcausedbyinjuries\"><i></i>I Certify that Death or permanent disability not caused by injuries resulting from riots, civil commotions, or racing of any kind</label>\r\n                                    </div>\r\n                                </section>\r\n                                <section>\r\n                                    <div class=\"col col-12\">\r\n                                        <label class=\"checkbox state-success\"><input type=\"checkbox\" name=\"isOtherFinancialAssistance\" [(ngModel)]=\"claim.deathDetails.isOtherFinancialAssistance\"><i></i>I Certify that I am not in receipt of any financial assistance of similar nature from the government</label>\r\n                                    </div>\r\n                                </section>\r\n                            </div>\r\n                            </fieldset>-->\r\n                            <fieldset id=\"education\" *ngIf=\"viewEducation\" [disabled]=\"disableEdu\">\r\n                                <header>Education </header>\r\n\r\n                                <fieldset id=\"addbutton\">\r\n                                    <div class=\"row\" *ngIf=\"eduCount<2\">\r\n                                        <a class=\"btn btn-primary\" (click)=\"openModel()\" style=\"width :55px;height:30px;padding:5px;\" button> Add </a>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <table id=\"datatable_fixed_column\" class=\"table table-striped table-bordered\" width=\"100%\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Name of the Student</th>\r\n                                                    <th>Name of the Institution</th>\r\n                                                    <th> Contact Number of the Institution </th>\r\n                                                    <th>Registration No./Roll No./Year</th>\r\n                                                    <th> Present Reading</th>\r\n                                                    <th></th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr *ngIf=\"educationDetailsArray.length==0\"><td colspan=\"6\">No student details</td></tr>\r\n                                                <tr *ngFor=\"let education of educationDetailsArray\">\r\n                                                    <td>{{education.dependentName}}</td>\r\n                                                    <td>{{education.institutionName}}</td>\r\n                                                    <td>{{education.institutionContact}}</td>\r\n                                                    <td>{{education.registrationRollNo}}</td>\r\n                                                    <td>{{education.presentlyReadingName}}</td>\r\n                                                    <td>\r\n                                                        <a class=\"btn btn-labeled btn-primary\" (click)=\"editEducationDetails(education)\" style=\"margin-right:5px;\"><i class=\"glyphicon glyphicon-edit\"></i> Edit</a>\r\n                                                        <a class=\"btn btn-labeled btn-danger\" (click)=\"removeEducationDetails(education)\"><i class=\"glyphicon glyphicon-trash\"></i> Remove</a>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                </fieldset>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-6\">\r\n                                        <label class=\"label\">Amount Claimed</label>\r\n                                        <label class=\"form-control\" disabled>{{claim.educationDetails.claimAmount}}</label>\r\n                                    </section>\r\n                                </div>\r\n\r\n                                <div class=\"row\">\r\n                                    <section>\r\n                                        <div class=\"col col-12\">\r\n                                            <label class=\"checkbox state-success\">\r\n                                                <input type=\"checkbox\" name=\"isanyothersourceofthegovernment\"\r\n                                                       [(ngModel)]=\"claim.educationDetails.isanyothersourceofthegovernment\"\r\n                                                       #isanyothersourceofthegovernment=\"ngModel\"\r\n                                                       [ngClass]=\"{'invalid-data':isanyothersourceofthegovernment.invalid && (!educationCheck ||  isanyothersourceofthegovernment.touched), 'valid-data': isanyothersourceofthegovernment.valid && educationCheck}\"\r\n                                                       required>\r\n                                                <i></i>I Certify that My son or daughter is not availing or has not availed any scholarship for the above mentioned courses from any other source of the government\r\n                                                <span [style.color]=\"!educationCheck?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <div *ngIf=\"isanyothersourceofthegovernment.invalid && (!educationCheck ||  isanyothersourceofthegovernment.touched)\">\r\n                                                <span style=\"color: red;\">Check education terms and conditions </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </div>\r\n                            </fieldset>\r\n                            <div *ngIf=\"viewPf || viewHealth || viewDeath|| viewEducation\">\r\n                                <header>Upload Documents</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label class=\"label\">Form - V duly filled and signed <span [style.color]=\"!uplaodmain?'red':''\"><b>*</b></span></label>\r\n                                                <div class=\"input input-file\">\r\n                                                    <span class=\"button\">\r\n                                                        <input type=\"file\" id=\"file\" (change)=\"changeCertificate($event,'main')\"\r\n                                                               [disabled]=\"!(SubmitVisible && !disableSubmitbutton && !restrictSave)\">Browse\r\n                                                    </span><input type=\"text\" readonly>\r\n                                                </div>\r\n                                                <div *ngIf=\"(!uplaodmain) && (mainUpload?.fileName =='' || mainUpload?.fileName ==undefined )\">\r\n                                                    <span style=\"color: red;\">Form - V is required </span>\r\n                                                </div>\r\n                                                <div>\r\n                                                    {{mainUpload?.fileName}}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </div>\r\n                            <footer *ngIf=\"GenaratePdfVisible && disableSubmitbutton && !restrictSave\"><a class=\"btn btn-success\" (click)=\"GenaratePdf(claim,3)\">Generate Pdf</a></footer>\r\n                            <footer>\r\n                                <!--<a *ngIf=\"GenaratePdfVisible && disableSubmitbutton && !restrictSave\" class=\"btn btn-success\" (click)=\"GenaratePdf(claim,3)\">Generate Pdf</a>-->\r\n                                <a *ngIf=\"SubmitVisible && !disableSubmitbutton && !restrictSave\" name=\"save\" class=\"btn btn-primary\" (click)=\"saveClaimsData(claim,2)\">Submit</a>\r\n                                <a class=\"btn btn-primary\" *ngIf=\"SaveVisible && !restrictSave\" (click)=\"saveClaimsData(claim,1)\">Save as Draft</a>\r\n                                <a class=\"btn btn-default\" (click)=\"claerClaim()\">Reset</a>\r\n                                <a class=\"btn btn-danger\" (click)=\"cancleClick()\">Cancel</a>\r\n\r\n\r\n                            </footer>\r\n                        </form>\r\n                        <!--/ Success states for elements -->\r\n                    </div>\r\n                    <!-- end widget content -->\r\n                </div>\r\n                <!-- end widget div -->\r\n            </div>\r\n            <!-- end widget -->\r\n        </article>\r\n        <!-- WIDGET END -->\r\n    </div>\r\n    <!-- end row -->\r\n</section>\r\n<!-- end widget grid -->\r\n<div bsModal #lgModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"lgModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Add Student Details</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <fieldset id=\"divAddEducationDetails\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6 \">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label control-label\"> Name of the Student <span [style.color]=\"!studentNameValid?'red':''\"><b>*</b></span></label>\r\n                                <select class=\"form-control select\" name=\"dependentId\" (change)=\"selectDependent($event)\" [(ngModel)]=\"educationDetails.dependentId\"\r\n                                        #dependentId=\"ngModel\"\r\n                                        [ngClass]=\"{'invalid-data': dependentId.invalid && ( !studentNameValid || dependentId.touched ),\r\n                                        'valid-data': studentNameValid && dependentId.valid  }\"\r\n                                        required>\r\n                                    <option value=\"0\" selected disabled>Choose a Student</option>\r\n                                    <option value=\"{{ben.benFamilyMemSno}}\" *ngFor=\"let ben of benficiaryFamily\">{{ben.benDependentName}} - {{ben.benDependentRelation}}</option>\r\n                                </select>\r\n                                <i></i>\r\n                                <div *ngIf=\"dependentId.invalid && (!studentNameValid || dependentId.touched)\">\r\n                                    <span style=\"color: red;\">Select a Student </span>\r\n                                </div>\r\n                                <div *ngIf=\"isDuplicateDependent\">\r\n                                    <span style=\"color: red;\">Already submitted for this year please select another dependent </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Name of the Institution <span [style.color]=\"!institutionNameValid?'red':''\"><b>*</b></span></label>\r\n                                <input type=\"text\" name=\"institutionName\" placeholder=\"Name of the Institution\" [(ngModel)]=\"educationDetails.institutionName\"\r\n                                       #institutionName=\"ngModel\"\r\n                                       [ngClass]=\"{'invalid-data': institutionName.invalid && (!institutionNameValid || institutionName.touched), 'valid-data': institutionName.valid && institutionNameValid}\" class=\"form-control\"\r\n                                       required>\r\n                                <div *ngIf=\"institutionName.invalid && (!institutionNameValid ||institutionName.touched)\">\r\n                                    <span style=\"color: red;\">Name of the Institution is required </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Name of the Principal/Head Master of the institution</label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"institutionPrinicipleName\" placeholder=\"Institution Principal Name\" [(ngModel)]=\"educationDetails.institutionPrinicipleName\">\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Contact Number of the Institution </label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"institutionContact\" placeholder=\"Contact Number of the Institution \" [(ngModel)]=\"educationDetails.institutionContact\"\r\n                                       NumbersOnly maxlength=\"15\"\r\n                                       #institutionContact=\"ngModel\"\r\n                                       [ngClass]=\"{'invalid-data': !institutionContactValid }\">\r\n                                <div *ngIf=\"!institutionContactValid\">\r\n                                    <span style=\"color: red;\">Invalid Contact Number of the Institution </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Registration No./Roll No. of last exam passed  <span [style.color]=\"!registrationNoValid?'red':''\"><b>*</b></span></label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"registrationRollNo\" placeholder=\"Registration No./Roll No. of last exam passed \" [(ngModel)]=\"educationDetails.registrationRollNo\"\r\n                                       #registrationRollNo=\"ngModel\"\r\n                                       [ngClass]=\"{'invalid-data': registrationRollNo.invalid && (!registrationNoValid || registrationRollNo.touched), 'valid-data': registrationRollNo.valid && registrationNoValid}\"\r\n                                       required>\r\n                                <div *ngIf=\"registrationRollNo.invalid && (!registrationNoValid ||registrationRollNo.touched)\">\r\n                                    <span style=\"color: red;\">Registration No./Roll No. of last exam passed is required </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\"> Year of Examination <span [style.color]=\"!educationYearValid?'red':''\"><b>*</b></span></label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"year\" placeholder=\"Year\" [(ngModel)]=\"educationDetails.year\" maxlength=\"4\" NumbersOnly> <!--readonly-->\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\" *ngIf=\"isMarried\">\r\n                            <div class=\"form-group\">\r\n                                <div>\r\n                                    <label for=\"label\">Is Married <span [style.color]=\"!marriedValid?'red':''\"><b>*</b></span></label>\r\n                                    <input type=\"radio\" value=\"1\" name=\"gender\" required #gender=\"ngModel\" [(ngModel)]=\"educationDetails.isMarried\"> Yes\r\n                                    <input type=\"radio\" value=\"0\" name=\"gender\" required #gender=\"ngModel\" [(ngModel)]=\"educationDetails.isMarried\">No\r\n                                </div>\r\n                                \r\n                                <div *ngIf=\"!marriedValid\">\r\n                                    <!--*ngIf=\"gender.invalid && (!marriedValid || gender.touched)\"-->\r\n                                    <span style=\"color: red;\">Is Married is required </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-6\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"label\"> Last Exam Passed</label>\r\n                                        <select name=\"lastExamPassed\" class=\"form-control\" (change)=\"selectLastExamPassed($event,educationDetails)\" [(ngModel)]=\"educationDetails.lastExamPassed\">\r\n                                            <option value=\"00\" disabled>Choose Reading</option>\r\n                                            <option value=\"{{lep.lovDtlId}}\" *ngFor=\"let lep of lastExampassed\">{{lep.optionName}}</option>\r\n\r\n                                        </select> <i></i>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-md-6\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"label\"> Date of Admission <span *ngIf=\"!isDisabledBaseOnLastExamPassed\" [style.color]=\"!dateOfAdmissionValid?'red':''\"><b>*</b></span></label>\r\n                                        <input type=\"text\" name=\"dateofAdmission\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" [maxDate]=\"maxDate\" placeholder=\"DD/MM/YYYY\"\r\n                                               #dateofAdmission=\"ngModel\" [disabled] =\"isDisabledBaseOnLastExamPassed\"\r\n                                               [(ngModel)]=\"educationDetails.dateofAdmission\" readonly\r\n                                               value=\"{{ educationDetails.dateofAdmission | date: 'dd/MM/yyyy' }}\"\r\n                                               [ngClass]=\"{'invalid-data':dateofAdmission.invalid && (!dateOfAdmissionValid || dateofAdmission.touched), 'valid-data':dateofAdmission.valid && dateOfAdmissionValid}\"\r\n                                               required>\r\n                                        <div *ngIf=\"dateofAdmission.invalid && (!dateOfAdmissionValid || dateofAdmission.touched)\">\r\n                                            <span style=\"color: red;\">Date of Admission is required </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-6\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"label\"> Presently Reading <span *ngIf=\"!isDisabledBaseOnLastExamPassed\" [style.color]=\"!presentlyReadingValid?'red':''\"><b>*</b></span></label>\r\n                                        <select name=\"presentlyReading\" class=\"form-control\" (change)=\"selectPresentlyReading($event,educationDetails)\"\r\n                                                [(ngModel)]=\"educationDetails.presentlyReading\" #presentlyReading=\"ngModel\" [disabled] =\"isDisabledBaseOnLastExamPassed\"\r\n                                                [ngClass]=\"{'invalid-data': presentlyReading.invalid && ( !presentlyReadingValid || presentlyReading.touched ),\r\n                                        'valid-data': presentlyReadingValid && presentlyReading.valid  }\"\r\n                                                required>\r\n                                            <option value=\"0\" disabled>Choose Reading</option>\r\n                                            <option value=\"{{edu.claimConfigId}}\" *ngFor=\"let edu of educationConfig\">{{edu.claimConfigOptionName}}</option>\r\n                                        </select> <i></i>\r\n                                        <div *ngIf=\"presentlyReading.invalid && (!presentlyReadingValid || presentlyReading.touched)\">\r\n                                            <span style=\"color: red;\">Select a Presently reading </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-md-6\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"label\">Eligible Amount</label>\r\n                                        <input type=\"text\" class=\"form-control\" name=\"eligibleAmount\" [(ngModel)]=\"educationDetails.eligibleAmount\" disabled />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-12 smart-form\">\r\n                                <header>Upload Documents</header>\r\n                                <div class=\"row\" *ngIf=\"!isDisabledBaseOnLastExamPassed\">\r\n                                    <section class=\"col col-10 top-5\">\r\n                                        <label class=\"label\">Certificate from head of institution for not availing any scholarship <span [style.color]=\"!uploadCertificatetValid?'red':''\"><b>*</b></span> </label>\r\n\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\">\r\n                                                <input type=\"file\" id=\"file\" accept=\"image/*,.pdf\" multiple (change)=\"changeCertificate($event,'certificate')\">Browse\r\n                                            </span>\r\n                                            <input type=\"text\" readonly>\r\n                                            <label>Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                        </div>\r\n                                        <div *ngIf=\"!uploadCertificatetValid && educertificates.length==0\">\r\n                                            <span style=\"color: red;\"> Certificate required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr *ngFor=\"let item of educertificates\">\r\n                                                    <td>{{item.fileName}}</td>\r\n                                                    <td style=\"padding-left:10px\"> <a class=\"btn btn-danger\" (click)=\"removeUploadCertificates(item,'certificate')\">      <i class=\"glyphicon glyphicon-trash\"></i> Remove</a></td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <!--<section style=\"padding-top:30px\" class=\"col col-5\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>-->\r\n                                </div>\r\n                                <div class=\"row\" *ngIf=\"viewuploadNonMarriage\">\r\n                                    <section class=\"col col-10 top-5\">\r\n                                        <label class=\"label\">Non marriage certificate of Daughter <span [style.color]=\"!uploadNonMarriageValid?'red':''\"><b>*</b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" accept=\"image/*,.pdf\" multiple (change)=\"changeCertificate($event,'nonMarriage')\" id=\"file\">Browse</span><input type=\"text\" readonly>\r\n                                            <label>Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                        </div>\r\n                                        <div *ngIf=\"!uploadNonMarriageValid && eduNonMarriage.length==0\">\r\n                                            <span style=\"color: red;\"> Non marriage certificate of Daughter required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr *ngFor=\"let item of eduNonMarriage\">\r\n                                                    <td>{{item.fileName}}</td>\r\n                                                    <td style=\"padding-left:10px\"> <a class=\"btn btn-danger\" (click)=\"removeUploadCertificates(item,'nonMarriage')\"><i class=\"glyphicon glyphicon-trash\"></i> Remove</a></td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <!--<section style=\"padding-top:30px\" class=\"col col-5\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>-->\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <section class=\"col col-10 top-5\">\r\n                                        <label class=\"label\">Self attested copy of last exam passing certificate <span [style.color]=\"!uploadselfattestedValid?'red':''\"><b>*                    </b></span></label>\r\n                                        <div class=\"input input-file\">\r\n                                            <span class=\"button\"><input type=\"file\" id=\"file\" accept=\"image/*,.pdf\" multiple (change)=\"changeCertificate($event,'selfAttest')\">Browse</span>\r\n                                            <input type=\"text\" readonly>\r\n                                            <label>Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                        </div>\r\n                                        <div *ngIf=\"!uploadselfattestedValid && eduSelfAttested.length==0\">\r\n                                            <span style=\"color: red;\"> Self attested required </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <table>\r\n                                                <tr *ngFor=\"let item of eduSelfAttested\">\r\n                                                    <td>{{item.fileName}}</td>\r\n                                                    <td style=\"padding-left:10px\"> <a class=\"btn btn-danger\" (click)=\"removeUploadCertificates(item,'selfAttest')\"><i class=\"glyphicon glyphicon-trash\"></i> Remove</a></td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                    <!--<section style=\"padding-top:30px\" class=\"col col-5\"><label>Document limit is upto 2MB, JPEG/PNG/PDF</label></section>-->\r\n                                </div>\r\n                            </div>\r\n</fieldset>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"lgModal.hide()\">\r\n                    Cancel\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"addEducationDetails(educationDetails)\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">Success Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\" style=\"overflow-y:scroll\">\r\n                <div [innerHTML]=\"successMessage\"></div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<div bsModal #packageModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"packageModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Packages</h4>\r\n            </div>\r\n            <div class=\"modal-body\" style=\"max-height:500px; overflow-x:scroll\">\r\n                <div *ngFor=\"let item of result\" border=\"1\">\r\n                    <strong>{{item.name}}</strong>\r\n                    <table class=\"table table-striped\" [mfData]=\"item.values\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"5\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th><!--<input type=\"checkbox\" value=\"checkAll\" name=\"checkall\" (change)=\"checkAll($event,item.name)\" />--></th>\r\n                                <th><mfDefaultSorter by=\"packageName\">Package Name</mfDefaultSorter></th>\r\n                                <th><mfDefaultSorter by=\"packageCode\">Package Code</mfDefaultSorter></th>\r\n                                <th><mfDefaultSorter by=\"amount\">Amount</mfDefaultSorter></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let value of mf.data;let i=index;\">\r\n                                <td><input type=\"checkbox\" name=\"{{i}}\" [(ngModel)]=\"value.isChecked\" (change)=\"checkIfAllSelected(item);\" /></td>\r\n                                <td>{{value.packageName}}</td>\r\n                                <td>{{value.packageCode}}</td>\r\n                                <td>{{value.amount}}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tfoot><tr><td colspan=\"4\"><mfBootstrapPaginator></mfBootstrapPaginator></td></tr></tfoot>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitClick()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #pdfModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">Form-V Pdf</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                Form-V genarated, Please print or download.\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPdf(claim,'print')\">\r\n                    Print FormV\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"downLoadPdf(claim,'download')\">\r\n                    Download FormV\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/claim/claim-entry/claim-entry.component.ts":
/*!************************************************************!*\
  !*** ./src/app/claim/claim-entry/claim-entry.component.ts ***!
  \************************************************************/
/*! exports provided: ClaimEntryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimEntryComponent", function() { return ClaimEntryComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_6__);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var ClaimEntryComponent = /** @class */ (function () {
    function ClaimEntryComponent(router, route, dataService, userService) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.userService = userService;
        this.claimId = 0;
        this.claimStatus = 0;
        this.viewuploadNonMarriage = false;
        this.viewPf = false;
        this.viewHealth = false;
        this.viewDeath = false;
        this.viewEducation = false;
        this.viewDateOfFirstAppointment = false;
        this.viewNameOfClinicalTest = false;
        this.viewDateOfAdmit = false;
        this.viewMetWithAnAccident = false;
        this.viewFamily = false;
        this.viewSelf = false;
        this.viewLOEAmount = false;
        this.viewAccidental = false;
        this.viewEligibilityAmount = false;
        this.enableDeatheligibility = false;
        this.claim = {};
        this.educationDetails = {};
        this.educationDetailsArray = [];
        this.beneficiary = {};
        this.disableEducationCheckbox = false;
        this.disableHealthCheckbox = false;
        this.disablePFCheckbox = false;
        this.checkeducation = false;
        //Validation Claim Entry variables
        this.ssnNoValid = true;
        this.nomineeNameValid = true;
        this.nomineeContactValid = true;
        this.nomineeDOBValid = true;
        this.nomineeBankAccountValid = true;
        //Validation Education variables
        this.studentNameValid = true;
        this.institutionNameValid = true;
        this.institutionContactValid = true;
        this.registrationNoValid = true;
        this.educationYearValid = true;
        this.dateOfAdmissionValid = true;
        this.marriedValid = true;
        this.isMarried = false;
        this.presentlyReadingValid = true;
        this.disableEdu = false;
        this.maxLimitExceeded = false;
        this.maxHelathClaimLimitExceeded = false;
        this.noDependents = false;
        this.benficiaryInactive = false;
        this.disableSubmitbutton = true;
        this.educationCheck = true;
        this.uploadselfattestedValid = true;
        this.uploadNonMarriageValid = true;
        this.uploadCertificatetValid = true;
        this.uplaodmain = true;
        // health & family 
        this.typeOfClaimValid = false;
        this.hospital = false;
        this.hospitalization = false;
        this.dateofAdmin = false;
        this.dateofDischargeValid = false;
        this.claimForValid = false;
        this.familyMember = false;
        this.hospitalselfAttested = false;
        this.isOtherHospital = false;
        this.otherHospitalValid = false;
        this.hospotalId = 0;
        //originalVoucher: boolean = false;
        this.dischargeCertificate = false;
        this.rigisterESI = false;
        this.dateofAppointment = false;
        this.loeFromDate = false;
        this.loeToDate = false;
        this.showDisCertUpload = true;
        this.healthCondolationCertificate = {};
        this.reasonForHealthDelayValid = false;
        this.enableReasonForDelaySubmissionInHealth = false;
        this.isHealthClaimEdit = false;
        this.healthCondolationCertificateUploaded = false;
        this.healthOriginalVoucher = {};
        this.healthSelfAttached = {};
        this.healthDischargeCertificate = {};
        this.healthExpensesSheet = {};
        this.healthAttachmentList = [];
        this.eduCount = 0;
        this.submitYear = new Date().toISOString().split('T')[0];
        this.rowIndex = -1;
        this.mode = "";
        this.rowEligibleAmount = 0;
        this.totalHealthClaimAmount = 0;
        this.typeOfAilmentClaimedAmount = 0;
        this.surgeryClaimedAmount = 0;
        this.lossOfEmploymentAmount = 0;
        this.validateDependent = false;
        this.mainUploadList = [];
        this.educertificates = [];
        this.eduNonMarriage = [];
        this.eduSelfAttested = [];
        //Button variables
        this.GenaratePdfVisible = true;
        this.SubmitVisible = true;
        this.SaveVisible = true;
        this.restrictSave = false;
        this.ClaimStatusId = 0;
        this.isLOEToDate = true;
        this.isDischargeDate = true;
        this.disableDischarge = true;
        this.disableCost = true;
        this.activeYear = {};
        this.packages = [];
        this.selectedPackages = [];
        this.healthFamilyPackages = [];
        //expection: ClaimExceptionDetailsModel[] = [] as ClaimExceptionDetailsModel[];
        this.beneficiaryBank = {};
        this.educationClaimExceptionDetails = [];
        this.healthClaimExceptionDetails = [];
        //Disability
        this.disableDisabilityCheckbox = false;
        this.disabilityCertificate = {};
        this.deathCertificate = {};
        this.condolationCertificate = {};
        this.disabilityAttachmentList = [];
        this.disabilityCertificateUploaded = false;
        this.condolationCertificateUploaded = false;
        this.dateofrelease = false;
        this.natureOfDisability = false;
        this.reasonForDelayValid = false;
        this.checkNatureOfDisability = false;
        this.isDeathorpermanent1 = false;
        this.isDeathorpermanent2 = false;
        this.isDeathorpermanent3 = false;
        this.beneficiaryAppliedDisabilities = [];
        this.disabilityClaimExceptionDetails = [];
        this.enableReasonForDelaySubmission = false;
        this.pfExsits = false;
        this.isPrematureClaim = false;
        this.isPFSubmitted = false;
        this.pfTypeOfClaimValid = false;
        this.reasonForPreclosureValid = false;
        this.benMaturityDate = null;
        this.pfLockingPeriod = null;
        this.pfClaimExceptionDetails = [];
        this.isClaimEdit = false;
        this.isDisabilityClaimEdit = false;
        this.isBenNomineeSubmittedClaim = false;
        this.clinicalTestSettings = {};
        this.nameOfClinicalTestIds = [];
        this.clinicalTestDetails = [];
        this.disabilityBenefitConfigDetails = [];
        this.healthFamilyBenefitConfigDetails = [];
        this.pfBenefitConfigDetails = {};
        this.educationBenefitConfigDetails = [];
        this.isDisabledBaseOnLastExamPassed = false;
        this.isDuplicateDependent = false;
        this.isBenDeath = false;
        //Claims Effective Dates
        this.pfClaimEffectiveDate = null;
        this.healthFamilyClaimEffectiveDate = null;
        this.disabilityClaimEffectiveDate = null;
        this.deathClaimEffectiveDate = null;
        this.educationClaimEffectiveDate = null;
        this.claimConfigHdrDetails = [];
        this.isClaimEffectiveDate = false;
        this.claimEffectiveDate = null;
        this.beneficiaryPFAccountDetails = {};
        this.claim.healthFamilyDetails = {};
        this.claim.educationDetails = {};
        this.claim.deathDetails = {};
        this.claim.disabilityDetails = {};
        this.claim.providentFundDetails = {};
        this.maxDate = new Date();
        this.maxAdmitDate = new Date();
        //this.maxDate = new Date(new Date().setMonth(new Date().getMonth() + 3));
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
    }
    ClaimEntryComponent.prototype.ngOnDestroy = function () {
        if (this.route$)
            this.route$.unsubscribe();
    };
    ClaimEntryComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.pfTypeOfClaimValid = this.otherHospitalValid = true;
        this.typeOfClaimValid = this.dateofAppointment = this.hospital = this.hospitalization = this.dateofAdmin = this.dateofDischargeValid = this.claimForValid = this.familyMember = this.hospitalselfAttested = this.dischargeCertificate = this.rigisterESI = this.loeFromDate = this.loeToDate = this.healthCondolationCertificateUploaded = this.reasonForHealthDelayValid = true; //this.originalVoucher =
        this.dateofrelease = this.natureOfDisability = this.disabilityCertificateUploaded = this.isDeathorpermanent1 = this.isDeathorpermanent2 = this.isDeathorpermanent3 = this.checkNatureOfDisability = this.condolationCertificateUploaded = this.reasonForDelayValid = true;
        this.route$ = this.route.params.subscribe(function (params) {
            _this.claimId = params["claimId"] != null ? Number(params["claimId"]) : 0;
            _this.mode = params["mode"];
            _this.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education;
            _this.claimTypeString = params["tranctionType"];
            _this.claimStatus = params["claimStatus"] != null ? Number(params["claimStatus"]) : 0;
            //if (this.claimStatus >= ClaimStatus.Submitted) {
            //    this.GenaratePdfVisible = false;
            //    this.disableSubmitbutton = false;
            //    this.SaveVisible = false;
            //}
            //else {
            //    this.claimStatus = ClaimStatus.Submitted;
            //}
        });
        this.clinicalTestSettings = {
            singleSelection: false,
            idField: 'lovDtlId',
            textField: 'optionName',
            selectAllText: 'Select All',
            unSelectAllText: 'UnSelect All',
            itemsShowLimit: 3,
            allowSearchFilter: true
        };
        //this.claimId = 149;//params["claimId"];
        //this.claimType = ClaimConstants.Education;
        this.getDeathConfiguration();
        this.getDisabilityConfiguration();
        this.getEducationConfiguration();
        this.getHealthandFamilyConfiguration();
        this.getPfConfiguration();
        this.getHospitalization();
        this.getHealthClainFor();
        this.getHospitals();
        this.getLastExamPassed();
        this.getPackages();
        this.getDiseases();
        this.getClinicalTests();
        this.getDisabilityBenefitConfigurationDetails();
        this.getHealthFamilyBenefitConfigurationDetails();
        this.getPFBenefitConfigurationDetails();
        this.getEducationBenefitConfigurationDetails();
        if (this.claimId > 0) {
            // this.viewEducation = true;
            this.getClaimDetailsByClaimId(this.claimId);
        }
        else {
            this.getBenficiaryFamilyDetails(this.userService.user.userid);
            this.getBenficiaryEduCount(this.userService.user.userid);
            this.getBenficiarydetails(this.userService.user.userid);
            //this.getBeneficiaryBankDetails(this.userService.user.userid);
        }
        this.isBenNomineeClaimSubmitted(this.userService.user.userid);
        this.getBeneficiaryBankDetails(this.userService.user.userid);
        this.getBeneficiaryAppliedDisabilities(this.userService.user.userid, this.claimId);
        this.getActiveFinancialYear();
        this.getClaimsConfiguartionDetails();
        ////pf
        //
        //if (this.beneficiary.benPFStatus != null && this.beneficiary.benPFStatus == 1) {
        //    if (this.beneficiary.regNumber != null && this.beneficiary.regNumber != "") {
        //        this.getPfBalance(this.beneficiary.regNumber);
        //        this.validatePfSubmit(this.beneficiary.ssI_Number);
        //    }
        //    else
        //        alert("No pf details available for this given SSIN number");
        //}
        //else {
        //    this.disablePFCheckbox = true;
        //    this.pfExsits = true;
        //}
    };
    ClaimEntryComponent.prototype.getClaimsConfiguartionDetails = function () {
        var _this = this;
        this.dataService.getClaimConfigurationMaster()
            .subscribe(function (data) {
            _this.claimConfigHdrDetails = data;
            debugger;
            if (_this.claimConfigHdrDetails != null) {
                _this.pfClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 1; }).cliamEffectiveDate;
                _this.healthFamilyClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 2; }).cliamEffectiveDate;
                _this.disabilityClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 3; }).cliamEffectiveDate;
                _this.deathClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 4; }).cliamEffectiveDate;
                _this.educationClaimEffectiveDate = _this.claimConfigHdrDetails.find(function (c) { return c.claimMasterId == 5; }).cliamEffectiveDate;
            }
        });
    };
    ClaimEntryComponent.prototype.onItemSelect = function (item) {
        console.log(item);
    };
    ClaimEntryComponent.prototype.onSelectAll = function (items) {
        console.log(items);
    };
    ClaimEntryComponent.prototype.openModel = function () {
        this.isDuplicateDependent = false;
        this.studentNameValid = this.institutionNameValid = this.registrationNoValid = this.institutionContactValid = this.educationYearValid = this.dateOfAdmissionValid = this.presentlyReadingValid = this.marriedValid = true;
        this.uploadCertificatetValid = this.uploadselfattestedValid = true;
        this.rowIndex = -1;
        this.rowEligibleAmount = 0;
        this.eduSelfAttested = [];
        this.educertificates = [];
        this.eduNonMarriage = [];
        this.educationDetails = {};
        //this.educationDetails.year = new Date().getFullYear();
        this.educationDetails.year = this.activeYear.seqPrefix;
        this.lgModal.show();
    };
    ClaimEntryComponent.prototype.getBeneficiaryAppliedDisabilities = function (id, claimId) {
        var _this = this;
        this.dataService
            .getBeneficiaryAppliedDisabilities(id, claimId)
            .subscribe(function (data) {
            _this.beneficiaryAppliedDisabilities = data;
        });
    };
    ClaimEntryComponent.prototype.getBeneficiaryBankDetails = function (id) {
        var _this = this;
        this.dataService
            .getBeneficiaryBankDetails(id)
            .subscribe(function (data) {
            _this.beneficiaryBank = data;
        });
    };
    ClaimEntryComponent.prototype.getBenficiaryFamilyDetailsByHealth = function (id) {
        var _this = this;
        this.dataService
            .getBeneficiaryFamilyDetails(id, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily)
            .subscribe(function (data) {
            _this.benficiaryFamilybyHealth = data;
        });
    };
    ClaimEntryComponent.prototype.converToDateString = function (inputDate) {
        return new Date(inputDate).toISOString().split('T')[0];
    };
    ClaimEntryComponent.prototype.disabilityChange = function (id) {
        var _this = this;
        debugger;
        if (id != 0) {
            this.enableDeatheligibility = true;
            var data = this.disabilityConfig.find(function (x) { return x.claimConfigId == id; });
            this.disableEligibility = data.annualLimit;
            this.natureOfDisabilityName = data.claimConfigOptionName;
            debugger;
            var data1 = this.beneficiaryAppliedDisabilities.find(function (x) { return x == _this.claim.disabilityDetails.natureOfDisability; });
            if (data1) {
                this.checkNatureOfDisability = false;
                //alert("Claim has been already submitted with this nature of disability");
                //return;
            }
            else {
                this.checkNatureOfDisability = true;
            }
        }
        else {
            this.enableDeatheligibility = false;
            this.disableEligibility = 0;
        }
    };
    ClaimEntryComponent.prototype.getBenficiarydetails = function (id) {
        var _this = this;
        this.dataService
            .getBeneficiaryBasicDetailsById(id)
            .subscribe(function (data) {
            _this.beneficiary = data;
            if (_this.beneficiary != null && _this.beneficiary.benDeathStatus != 1) {
                if (_this.beneficiary.isActive) {
                    _this.getBenficiaryFamilyDetailsByHealth(_this.beneficiary.benSno);
                    if (_this.beneficiary != null) {
                        debugger;
                        if (_this.beneficiary.benPFStatus != null && _this.beneficiary.benPFStatus == 1) {
                            _this.dataService.getBeneficiaryPFAccountDetails(_this.beneficiary.benSno).subscribe(function (data1) {
                                debugger;
                                _this.beneficiaryPFAccountDetails = data1;
                                if (_this.beneficiaryPFAccountDetails != null && (_this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != null && _this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != "")) {
                                    if (_this.beneficiaryPFAccountDetails.pfStatus == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFStatusMaster"].Active || _this.beneficiaryPFAccountDetails.pfStatus == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFStatusMaster"].PartialClosed) {
                                        _this.getPfBalance(_this.beneficiary.benSno);
                                        _this.validatePfSubmit(_this.beneficiary.ssI_Number);
                                    }
                                    else
                                        alert("Your Pf Account is closed/Inactive");
                                }
                                else
                                    alert("No pf details available for this given SSIN number");
                            });
                        }
                        else {
                            _this.disablePFCheckbox = true;
                            _this.pfExsits = true;
                        }
                    }
                }
                else {
                    _this.benficiaryInactive = true;
                    _this.restrictSave = true;
                    _this.disableEdu = true;
                }
            }
            else {
                _this.restrictSave = _this.isBenDeath = _this.disablePFCheckbox = _this.disableHealthCheckbox = _this.disableDisabilityCheckbox = _this.disableEducationCheckbox = true;
            }
        });
    };
    ClaimEntryComponent.prototype.changeCertificate = function (inputValue, type) {
        var _this = this;
        var file = inputValue.target.files[0];
        if (type == "main") {
            if (file.type != "application/pdf") {
                alert("Only accept pdf file");
                return;
            }
        }
        if (file.type === "application/pdf" || file.type.includes("image/")) {
            if (file.size > 2000000) {
                alert("File is too big!");
                return;
            }
            ;
            var myReader = new FileReader();
            myReader.onloadend = function (e) {
                var model = {};
                model.fileName = file.name;
                model.filePath = "test";
                model.fileContent = myReader.result.toString().split(',')[1];
                model.statusId = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimStatus"].Submitted;
                switch (type) {
                    case "certificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Scholarship;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education;
                        _this.educertificates.push(model);
                        break;
                    case "nonMarriage":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].NonMarriage;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education;
                        _this.eduNonMarriage.push(model);
                        break;
                    case "selfAttest":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].PassingExamCertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education;
                        _this.eduSelfAttested.push(model);
                        break;
                    case "dischargeCertificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DischargeCertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthDischargeCertificate = model;
                        break;
                    case "originalVoucher":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].OriginalVouchers;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthOriginalVoucher = model;
                        break;
                    case "healthselfAttest":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DoctorPrescription;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthSelfAttached = model;
                        break;
                    case "main":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].FormV;
                        model.claimType = null;
                        _this.mainUpload = model;
                        break;
                    case "disablityCertificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DisabilityCertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability;
                        _this.disabilityCertificate = model;
                        break;
                    case "healthExpensesSheet":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].ExpensesSheet;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthExpensesSheet = model;
                        break;
                    case "condolationCertificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability;
                        _this.condolationCertificate = model;
                        break;
                    case "healthCondolationCertificate":
                        model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate;
                        model.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                        _this.healthCondolationCertificate = model;
                        break;
                }
            };
            myReader.readAsDataURL(file);
        }
        else {
            alert("Only accept pdf and images");
        }
    };
    ClaimEntryComponent.prototype.removeUploadCertificates = function (edu, type) {
        if (type == "certificate") {
            var index = this.educertificates.indexOf(edu);
            if (index !== -1) {
                this.educertificates.splice(index, 1);
            }
        }
        if (type == "nonMarriage") {
            var index = this.eduNonMarriage.indexOf(edu);
            if (index !== -1) {
                this.eduNonMarriage.splice(index, 1);
            }
        }
        if (type == "selfAttest") {
            var index = this.eduSelfAttested.indexOf(edu);
            if (index !== -1) {
                this.eduSelfAttested.splice(index, 1);
            }
        }
    };
    ClaimEntryComponent.prototype.showChildModal = function () {
        this.lgModal.show();
    };
    ClaimEntryComponent.prototype.hideChildModal = function () {
        this.lgModal.hide();
    };
    ClaimEntryComponent.prototype.pfChange = function (eve) {
        this.viewPf = !this.viewPf;
        //if (this.beneficiary.benPFStatus != null && this.beneficiary.benPFStatus == 1) {
        //    if (this.beneficiary.regNumber != null && this.beneficiary.regNumber != "") {
        //        this.getPfBalance(this.beneficiary.regNumber);
        //    }
        //    else
        //        alert("No pf details available for this given SSIN number");
        //    this.validatePfSubmit(this.beneficiary.ssI_Number);
        //}
        //else {
        //    this.disablePFCheckbox = false;
        //    this.pfExsits = true;
        //    this.viewPf = !this.viewPf;
        //}
    };
    ClaimEntryComponent.prototype.healthChange = function (eve) {
        this.viewHealth = !this.viewHealth;
        this.getBeneficiaryHealthClaimAmount(this.beneficiary.benSno);
    };
    ClaimEntryComponent.prototype.deathChange = function (eve) {
        this.viewDeath = !this.viewDeath;
    };
    ClaimEntryComponent.prototype.educationChange = function (eve) {
        if (this.educationBenefitConfigDetails != null && this.educationBenefitConfigDetails.length > 0) {
            var eduBenefit = this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "MaxLimitExceeded" /* MaxLimitExceeded */.toLowerCase(); });
            if (eduBenefit != null) {
                var cond = eval(this.eduCount + eduBenefit.logic + eduBenefit.value);
            }
            //if (this.eduCount >= 2 && this.claimId == 0) {
            if (cond && this.claimId == 0) {
                this.disableEdu = true;
                this.maxLimitExceeded = true;
                this.restrictSave = true;
                this.viewEducation = false;
                eve.target.checked = false;
                return;
            }
        }
        if (this.benficiaryFamily == null || this.benficiaryFamily.length == 0) {
            this.restrictSave = true;
            this.viewEducation = false;
            this.disableEdu = true;
            this.noDependents = true;
            this.viewEducation = false;
            eve.target.checked = false;
            return;
        }
        this.viewEducation = eve.target.checked;
        this.validateDependent = false;
    };
    ClaimEntryComponent.prototype.getClaimDetailsByClaimId = function (id) {
        var _this = this;
        this.dataService
            .getClaimDetailsById(id)
            .subscribe(function (data) {
            _this.claim = data;
            _this.isClaimEdit = _this.isDisabilityClaimEdit = _this.isHealthClaimEdit = true;
            //this.disableHealthCheckbox = true; }
            //else this.disableEducationCheckbox = true; this.disableEdu = true; }
            if (_this.claimTypeString == undefined || _this.claimTypeString == null) {
                if (_this.claim.educationDetails != null && _this.claim.educationDetails.educationHdrId != 0) {
                    _this.viewEducation = true;
                    if (_this.claim.educationDetails.educationDetailList != null && _this.claim.educationDetails.educationDetailList.length > 0) {
                        _this.educationDetailsArray = _this.claim.educationDetails.educationDetailList;
                        _this.rowIndex = _this.rowIndex + _this.educationDetailsArray.length;
                        if (_this.educationDetailsArray != null && _this.educationDetailsArray.length > 0) {
                            for (var i = 0; i < _this.educationDetailsArray.length; i++) {
                                if (_this.educationDetailsArray[i].presentlyReadingName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
                                    _this.viewuploadNonMarriage = true;
                                }
                                else {
                                    _this.viewuploadNonMarriage = false;
                                }
                                if (_this.educationDetailsArray[i].lastExamPassedName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
                                    _this.isDisabledBaseOnLastExamPassed = true;
                                    _this.viewuploadNonMarriage = true;
                                }
                                else {
                                    _this.isDisabledBaseOnLastExamPassed = false;
                                    _this.viewuploadNonMarriage = false;
                                }
                                //Duplicate Dependent
                                if (_this.educationDetailsArray[i].isDuplicate) {
                                    //const data1 = this.benficiaryFamily.find(x => x.benFamilyMemSno == this.educationDetailsArray[i].dependentId);
                                    //var stringMsg = "Already this Dependent " + data1.benDependentName + " has submitted for this year please select another dependent";
                                    _this.isDuplicateDependent = true;
                                    //alert("Already claim has submitted for this dependent in this year please select another dependent");
                                    //                    isValid = false;
                                }
                            }
                        }
                    }
                }
                if (_this.claim.healthFamilyDetails != null && _this.claim.healthFamilyDetails.healthFamilyId != 0) {
                    _this.viewHealth = true;
                    if (_this.claim.healthFamilyDetails.hospitalId != null && _this.claim.healthFamilyDetails.hospitalId != undefined && _this.claim.healthFamilyDetails.otherHospital != undefined && _this.claim.healthFamilyDetails.otherHospital != null) {
                        _this.isOtherHospital = true;
                        _this.hospotalId = _this.claim.healthFamilyDetails.hospitalId;
                    }
                    if (_this.claim.healthFamilyDetails.claimFor == 5) {
                        if (_this.claim.healthFamilyDetails.typeOfHospitalization != 2) {
                            _this.viewSelf = true;
                        }
                    }
                    else if (_this.claim.healthFamilyDetails.claimFor == 6) {
                        _this.viewFamily = true;
                    }
                    if (_this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                        _this.viewDateOfAdmit = true;
                        _this.disableCost = false;
                        if (_this.claim.healthFamilyDetails.typeOfClaim == 5) {
                            _this.viewMetWithAnAccident = true;
                        }
                    }
                    else if (_this.claim.healthFamilyDetails.typeOfHospitalization == 2) {
                        _this.viewDateOfFirstAppointment = true;
                        _this.showDisCertUpload = false;
                        if (_this.claim.healthFamilyDetails.nameOfTheDisease != null) {
                            _this.disableCost = false;
                            if (_this.claim.healthFamilyDetails.nameOfTheDisease == 56) {
                                _this.viewNameOfClinicalTest = true;
                                if (_this.claim.healthFamilyDetails.clinicalTestDetails != null && _this.claim.healthFamilyDetails.clinicalTestDetails.length > 0) {
                                    if (_this.clinicalTestLov != null && _this.clinicalTestLov.length > 0) {
                                        var selectedClinicalTestDetails = Object.assign([], _this.clinicalTestLov);
                                        var deletedClinicalTestDetails = Object.assign([], _this.clinicalTestLov);
                                        for (var i = 0; i < _this.claim.healthFamilyDetails.clinicalTestDetails.length; i++) {
                                            var t = _this.claim.healthFamilyDetails.clinicalTestDetails[i].clinicalTest;
                                            var s = _this.clinicalTestLov.filter(function (x) { return x.lovDtlId == t; });
                                            if (s != null) {
                                                for (var j = 0; j < deletedClinicalTestDetails.length; j++) {
                                                    if (s[0].lovDtlId == deletedClinicalTestDetails[j].lovDtlId) {
                                                        deletedClinicalTestDetails.splice(j, 1);
                                                    }
                                                }
                                            }
                                        }
                                        if (deletedClinicalTestDetails != null && deletedClinicalTestDetails.length > 0) {
                                            for (var i = 0; i < deletedClinicalTestDetails.length; i++) {
                                                for (var j = 0; j < selectedClinicalTestDetails.length; j++) {
                                                    if (selectedClinicalTestDetails[j].lovDtlId == deletedClinicalTestDetails[i].lovDtlId) {
                                                        selectedClinicalTestDetails.splice(j, 1);
                                                    }
                                                }
                                            }
                                        }
                                        for (var j = 0; j < selectedClinicalTestDetails.length; j++) { }
                                        _this.nameOfClinicalTestIds = selectedClinicalTestDetails;
                                    }
                                }
                            }
                        }
                    }
                    if (_this.claim.healthFamilyDetails.admittedDate != null && _this.claim.healthFamilyDetails.admittedDate != undefined)
                        _this.claim.healthFamilyDetails.admittedDate = new Date(_this.claim.healthFamilyDetails.admittedDate);
                    if (_this.claim.healthFamilyDetails.dischargeDate != null && _this.claim.healthFamilyDetails.dischargeDate != undefined)
                        _this.claim.healthFamilyDetails.dischargeDate = new Date(_this.claim.healthFamilyDetails.dischargeDate);
                    if (_this.claim.healthFamilyDetails.firstAppointmentDate != null) {
                        _this.claim.healthFamilyDetails.firstAppointmentDate = new Date(_this.claim.healthFamilyDetails.firstAppointmentDate);
                    }
                    _this.claim.healthFamilyDetails.attachmentDTOList.forEach(function (eachObj) {
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].OriginalVouchers) {
                            _this.healthOriginalVoucher = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DischargeCertificate) {
                            _this.healthDischargeCertificate = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DoctorPrescription) {
                            _this.healthSelfAttached = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].ExpensesSheet) {
                            _this.healthExpensesSheet = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate) {
                            _this.healthCondolationCertificate = eachObj;
                        }
                    });
                    var data_1 = _this.claim.healthFamilyDetails.healthFamilyPackages;
                    for (var i = 0; i < data_1.length; i++) {
                        _this.packages.filter(function (x) { return x.packageID == data_1[i].packageID; })[0].isChecked = true;
                    }
                    _this.selectedPackages = _this.packages.filter(function (x) { return x.isChecked == true; });
                    var groups = new Set(_this.packages.map(function (item) { return item.ailmentName; }));
                    _this.result = [];
                    groups.forEach(function (g) {
                        return _this.result.push({
                            name: g,
                            values: _this.packages.filter(function (i) { return i.ailmentName === g; })
                        });
                    });
                }
                if (_this.claim.disabilityDetails != null && _this.claim.disabilityDetails.disabilityId > 0) {
                    _this.viewDeath = true;
                    if (_this.claim.disabilityDetails.dateofRelease != null) {
                        _this.claim.disabilityDetails.dateofRelease = new Date(_this.claim.disabilityDetails.dateofRelease);
                    }
                    if (_this.claim.disabilityDetails.natureOfDisability != null) {
                        _this.enableDeatheligibility = true;
                        _this.disableEligibility = _this.claim.disabilityDetails.claimAmount;
                    }
                    _this.claim.disabilityDetails.attachmentDTOList.forEach(function (eachObj) {
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DisabilityCertificate) {
                            _this.disabilityCertificate = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate) {
                            _this.condolationCertificate = eachObj;
                        }
                    });
                }
                if (_this.claim.providentFundDetails != null && _this.claim.providentFundDetails.pfId > 0) {
                    _this.viewPf = true;
                    if (_this.claim.providentFundDetails.typeOfClaim != null && _this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].Premature) {
                        _this.isPrematureClaim = true;
                    }
                }
            }
            if (_this.claimTypeString == "Education") {
                if (_this.claim.educationDetails != null && _this.claim.educationDetails.educationHdrId > 0) {
                    _this.viewEducation = true;
                    if (_this.claim.educationDetails.educationDetailList != null && _this.claim.educationDetails.educationDetailList.length > 0) {
                        _this.educationDetailsArray = _this.claim.educationDetails.educationDetailList;
                        _this.rowIndex = _this.rowIndex + _this.educationDetailsArray.length;
                        debugger;
                        if (_this.educationDetailsArray != null && _this.educationDetailsArray.length > 0) {
                            for (var i = 0; i < _this.educationDetailsArray.length; i++) {
                                if (_this.educationDetailsArray[i].presentlyReadingName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
                                    _this.viewuploadNonMarriage = true;
                                }
                                else {
                                    _this.viewuploadNonMarriage = false;
                                }
                                debugger;
                                if (_this.educationDetailsArray[i].lastExamPassedName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
                                    _this.isDisabledBaseOnLastExamPassed = true;
                                    _this.viewuploadNonMarriage = true;
                                }
                                else {
                                    _this.isDisabledBaseOnLastExamPassed = false;
                                    _this.viewuploadNonMarriage = false;
                                }
                            }
                        }
                    }
                }
            }
            if (_this.claimTypeString == "HealthFamily") {
                _this.disableHealthCheckbox = true;
                _this.disableEducationCheckbox = true;
                //this.disablePFCheckbox = true;
                if (_this.claim.healthFamilyDetails != null && _this.claim.healthFamilyDetails.healthFamilyId != 0) {
                    _this.viewHealth = true;
                    if (_this.claim.healthFamilyDetails.otherHospital != undefined && _this.claim.healthFamilyDetails.otherHospital != null) {
                        _this.isOtherHospital = true;
                    }
                    if (_this.claim.healthFamilyDetails.claimFor == 5) {
                        if (_this.claim.healthFamilyDetails.typeOfHospitalization != 2) {
                            _this.viewSelf = true;
                        }
                    }
                    else if (_this.claim.healthFamilyDetails.claimFor == 6) {
                        _this.viewFamily = true;
                    }
                    if (_this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                        _this.viewDateOfAdmit = true;
                        _this.disableCost = false;
                        if (_this.claim.healthFamilyDetails.typeOfClaim == 5) {
                            _this.viewMetWithAnAccident = true;
                        }
                    }
                    else if (_this.claim.healthFamilyDetails.typeOfHospitalization == 2) {
                        _this.viewDateOfFirstAppointment = true;
                        _this.showDisCertUpload = false;
                        if (_this.claim.healthFamilyDetails.nameOfTheDisease != null) {
                            _this.disableCost = false;
                            if (_this.claim.healthFamilyDetails.nameOfTheDisease == 56) {
                                _this.viewNameOfClinicalTest = true;
                                if (_this.claim.healthFamilyDetails.clinicalTestDetails != null && _this.claim.healthFamilyDetails.clinicalTestDetails.length > 0) {
                                    if (_this.clinicalTestLov != null && _this.clinicalTestLov.length > 0) {
                                        var selectedClinicalTestDetails = Object.assign([], _this.clinicalTestLov);
                                        var deletedClinicalTestDetails = Object.assign([], _this.clinicalTestLov);
                                        for (var i = 0; i < _this.claim.healthFamilyDetails.clinicalTestDetails.length; i++) {
                                            var t = _this.claim.healthFamilyDetails.clinicalTestDetails[i].clinicalTest;
                                            var s = _this.clinicalTestLov.filter(function (x) { return x.lovDtlId == t; });
                                            if (s != null) {
                                                for (var j = 0; j < deletedClinicalTestDetails.length; j++) {
                                                    if (s[0].lovDtlId == deletedClinicalTestDetails[j].lovDtlId) {
                                                        deletedClinicalTestDetails.splice(j, 1);
                                                    }
                                                }
                                            }
                                        }
                                        if (deletedClinicalTestDetails != null && deletedClinicalTestDetails.length > 0) {
                                            for (var i = 0; i < deletedClinicalTestDetails.length; i++) {
                                                for (var j = 0; j < selectedClinicalTestDetails.length; j++) {
                                                    if (selectedClinicalTestDetails[j].lovDtlId == deletedClinicalTestDetails[i].lovDtlId) {
                                                        selectedClinicalTestDetails.splice(j, 1);
                                                    }
                                                }
                                            }
                                        }
                                        for (var j = 0; j < selectedClinicalTestDetails.length; j++) { }
                                        _this.nameOfClinicalTestIds = selectedClinicalTestDetails;
                                    }
                                }
                            }
                        }
                    }
                    if (_this.claim.healthFamilyDetails.admittedDate != null && _this.claim.healthFamilyDetails.admittedDate != undefined)
                        _this.claim.healthFamilyDetails.admittedDate = new Date(_this.claim.healthFamilyDetails.admittedDate);
                    if (_this.claim.healthFamilyDetails.dischargeDate != null && _this.claim.healthFamilyDetails.dischargeDate != undefined)
                        _this.claim.healthFamilyDetails.dischargeDate = new Date(_this.claim.healthFamilyDetails.dischargeDate);
                    if (_this.claim.healthFamilyDetails.firstAppointmentDate != null) {
                        _this.claim.healthFamilyDetails.firstAppointmentDate = new Date(_this.claim.healthFamilyDetails.firstAppointmentDate);
                    }
                    _this.claim.healthFamilyDetails.attachmentDTOList.forEach(function (eachObj) {
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].OriginalVouchers) {
                            _this.healthOriginalVoucher = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DischargeCertificate) {
                            _this.healthDischargeCertificate = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DoctorPrescription) {
                            _this.healthSelfAttached = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].ExpensesSheet) {
                            _this.healthExpensesSheet = eachObj;
                        }
                        if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate) {
                            _this.healthCondolationCertificate = eachObj;
                        }
                    });
                    var data_2 = _this.claim.healthFamilyDetails.healthFamilyPackages;
                    for (var i = 0; i < data_2.length; i++) {
                        _this.packages.filter(function (x) { return x.packageID == data_2[i].packageID; })[0].isChecked = true;
                    }
                    _this.selectedPackages = _this.packages.filter(function (x) { return x.isChecked == true; });
                    var groups = new Set(_this.packages.map(function (item) { return item.ailmentName; }));
                    _this.result = [];
                    groups.forEach(function (g) {
                        return _this.result.push({
                            name: g,
                            values: _this.packages.filter(function (i) { return i.ailmentName === g; })
                        });
                    });
                }
            }
            if (_this.claimTypeString == "Disability") {
                _this.disableDisabilityCheckbox = true;
                _this.disableHealthCheckbox = true;
                _this.disableEducationCheckbox = true;
                //this.disablePFCheckbox = true;
                if (_this.claim.disabilityDetails != null && _this.claim.disabilityDetails.disabilityId > 0) {
                    _this.viewDeath = true;
                    if (_this.claim.disabilityDetails.dateofRelease != null) {
                        _this.claim.disabilityDetails.dateofRelease = new Date(_this.claim.disabilityDetails.dateofRelease);
                    }
                    if (_this.claim.disabilityDetails.natureOfDisability != null) {
                        _this.enableDeatheligibility = true;
                        _this.disableEligibility = _this.claim.disabilityDetails.claimAmount;
                    }
                }
                _this.claim.disabilityDetails.attachmentDTOList.forEach(function (eachObj) {
                    if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].DisabilityCertificate) {
                        _this.disabilityCertificate = eachObj;
                    }
                    if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Condolationcertificate) {
                        _this.condolationCertificate = eachObj;
                    }
                });
            }
            if (_this.claimTypeString == "PF") {
                if (_this.claim.providentFundDetails != null && _this.claim.providentFundDetails.pfId > 0) {
                    _this.viewPf = true;
                    if (_this.claim.providentFundDetails.typeOfClaim != null && _this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].Premature) {
                        _this.isPrematureClaim = true;
                    }
                }
            }
            if (_this.claim.attachment != null && _this.claim.attachment.length > 0) {
                _this.mainUpload = _this.claim.attachment[0];
            }
            //  this.mainUpload = this.claim.attachment[0];
            console.log(_this.claim);
            _this.getBenficiaryFamilyDetails(_this.claim.benSno);
            _this.getBenficiaryEduCount(_this.claim.benSno);
            _this.getBenficiarydetails(_this.claim.benSno);
        });
    };
    //PF
    ClaimEntryComponent.prototype.validatePfSubmit = function (ssiNumber) {
        var _this = this;
        this.dataService
            .validatePfSubmit(ssiNumber, 0)
            .subscribe(function (data) {
            _this.isPFSubmitted = data;
            if (_this.isPFSubmitted) {
                _this.disablePFCheckbox = true;
            }
        });
    };
    ClaimEntryComponent.prototype.validatePFData = function (claimData, id) {
        var isValid = true;
        //this.natureOfDeath = this.dateofDeath = this.isDeath1 = this.isDeath2 = this.isDeath3 = this.placeOfDeathValid = true;
        if (id == 2) {
            if (this.mainUpload == undefined) {
                this.uplaodmain = isValid = false;
            }
        }
        if (this.claim.providentFundDetails.typeOfClaim == undefined) {
            this.pfTypeOfClaimValid = isValid = false;
        }
        else if (this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].Premature) //Premature
         {
            if (this.claim.providentFundDetails.reasonForPreClosure == undefined) {
                this.reasonForPreclosureValid = isValid = false;
            }
            ;
            if (this.pfLockingPeriod != undefined && this.pfLockingPeriod != null) {
                var date1 = new Date(this.pfLockingPeriod);
                var timeDiff = (this.maxDate.getTime() - date1.getTime());
                //var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                if (timeDiff < 0) {
                    alert("Premature can not be possible before locking period");
                    return;
                }
                if (timeDiff < 0 && this.pfAccountStatus.toLowerCase() == "suspend") {
                    alert("Irrespective of the locking period I can apply for premature");
                    return;
                }
            }
        }
        else if (this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].FinalPayment) //FinalPayment
         {
            if (this.pfBenefitConfigDetails != null) {
                //final payment  - age > 60 
                var date1 = new Date(this.beneficiary.benDob);
                var age = this.maxDate.getFullYear() - date1.getFullYear();
                var m = this.maxDate.getMonth() - date1.getMonth();
                if (m < 0 || (m === 0 && this.maxDate.getDate() < date1.getDate())) {
                    age--;
                }
                var cond = eval(age + this.pfBenefitConfigDetails.maturityAgeLogic + this.pfBenefitConfigDetails.maturityAge);
                // if (age < 60) {
                if (cond) {
                    alert("you are not eligible for this claim beacause your age less than 60");
                    return;
                }
            }
        }
        return isValid;
    };
    ClaimEntryComponent.prototype.getPfBalance = function (bensno) {
        var _this = this;
        this.pfExsits = false;
        this.dataService
            .getPfBalance(bensno)
            .subscribe(function (data) {
            _this.pfBalanceDetails = data;
            if (_this.pfBalanceDetails != null && _this.pfBalanceDetails != undefined) {
                if (_this.pfBalanceDetails.code == "000") {
                    //claim amount=   balance + cantribution +( (Contribution/25 ) * 30)
                    _this.pfClaimAmount = _this.pfBalanceDetails.balance + _this.pfBalanceDetails.contribution + ((_this.pfBalanceDetails.contribution / 25) * 30);
                    if (_this.pfBenefitConfigDetails != null) {
                        var date = new Date(_this.beneficiary.benDob);
                        //this.benMaturityDate = new Date(date.getFullYear() + 60, date.getMonth(), date.getDate());
                        _this.benMaturityDate = new Date(date.getFullYear() + _this.pfBenefitConfigDetails.maturityAge, date.getMonth(), date.getDate());
                        //pf Locking Period 3 year
                        if (_this.beneficiary.benRegDate != null) {
                            var lockingDate = new Date(_this.beneficiary.benRegDate);
                            //this.pfLockingPeriod = new Date(lockingDate.getFullYear() + 3, lockingDate.getMonth(), lockingDate.getDate());
                            _this.pfLockingPeriod = new Date(lockingDate.getFullYear(), lockingDate.getMonth() + _this.pfBenefitConfigDetails.pfLockingPeriodMonths, lockingDate.getDate());
                        }
                    }
                }
                else {
                    _this.disablePFCheckbox = true;
                    _this.pfExsits = true;
                }
            }
        });
    };
    ClaimEntryComponent.prototype.pfTypeOfClaimChange = function (eve) {
        if (this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["PFTypeOfClaim"].Premature) {
            this.isPrematureClaim = true;
            this.reasonForPreclosureValid = true;
        }
        else {
            this.isPrematureClaim = false;
        }
    };
    //health
    ClaimEntryComponent.prototype.hospitalChange = function (eve) {
        if (this.hospotalList.length > 0) {
            var hos = this.hospotalList.find(function (x) { return x.hospitalId == eve; });
            this.hospotalId = 0;
            if (hos != null) {
                if (hos.hospitalName.toLowerCase() == "not in the list") {
                    this.hospotalId = hos.hospitalId;
                }
            }
            if (this.hospotalId > 0) {
                this.isOtherHospital = true;
                this.otherHospitalValid = true;
            }
            else {
                this.isOtherHospital = false;
                this.claim.healthFamilyDetails.otherHospital = undefined;
            }
        }
    };
    ClaimEntryComponent.prototype.typeOfClaimChange = function (eve) {
        if (this.claim.healthFamilyDetails.typeOfClaim == 5) {
            this.claim.healthFamilyDetails.typeOfHospitalization = 1;
        }
        else if (this.claim.healthFamilyDetails.typeOfClaim == 0) {
            this.claim.healthFamilyDetails.typeOfHospitalization = 0;
        }
        this.getBeneficiaryHealthClaimAmount(this.beneficiary.benSno, this.claim.healthFamilyDetails.typeOfClaim);
        this.hospitalizationChange(eve);
    };
    ClaimEntryComponent.prototype.getBeneficiaryHealthClaimAmount = function (benSno, typeOfClaim) {
        var _this = this;
        this.maxHelathClaimLimitExceeded = false;
        this.dataService
            .getBeneficiaryHealthClaimAmount(benSno, typeOfClaim)
            .subscribe(function (data) {
            var maxEligibleAmount = 0;
            if (typeOfClaim != 0) {
                if (typeOfClaim == 4) {
                    maxEligibleAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].TreatmentOfAilment;
                    _this.typeOfAilmentClaimedAmount = data;
                }
                else {
                    maxEligibleAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].Surgery;
                    _this.surgeryClaimedAmount = data;
                }
                if (data >= maxEligibleAmount) {
                    alert("Maximum claim limit has been reached for the selected claim type.");
                    _this.claim.healthFamilyDetails.typeOfClaim = 0;
                    return;
                }
            }
            else {
                _this.totalHealthClaimAmount = data;
                maxEligibleAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].TreatmentOfAilment + _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].Surgery;
                if (_this.totalHealthClaimAmount >= maxEligibleAmount) {
                    _this.viewHealth = false;
                    _this.maxHelathClaimLimitExceeded = true;
                }
            }
        });
    };
    ClaimEntryComponent.prototype.hospitalizationChange = function (eve) {
        this.viewDateOfFirstAppointment = this.viewDateOfAdmit = this.viewMetWithAnAccident = this.viewNameOfClinicalTest = false;
        this.showDisCertUpload = this.disableCost = true;
        if (this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
            this.viewDateOfAdmit = true;
            this.disableCost = false;
            if (this.claim.healthFamilyDetails.typeOfClaim == 5) {
                this.viewMetWithAnAccident = true;
            }
            this.claim.healthFamilyDetails.nameOfTheDisease = undefined;
            this.claim.healthFamilyDetails.nameOfClinicalTest = undefined;
        }
        else if (this.claim.healthFamilyDetails.typeOfHospitalization == 2) {
            this.viewDateOfFirstAppointment = true;
            this.showDisCertUpload = false;
            this.claim.healthFamilyDetails.costOfClinicalTest = undefined;
            this.claim.healthFamilyDetails.costOfMedicine = undefined;
            if (this.claim.healthFamilyDetails.nameOfTheDisease != null) {
                this.disableCost = false;
                if (this.claim.healthFamilyDetails.nameOfTheDisease == 56) {
                    this.viewNameOfClinicalTest = true;
                }
            }
        }
        this.claimForChange(eve);
    };
    ClaimEntryComponent.prototype.nameOfDiseaseChange = function (eve) {
        this.viewNameOfClinicalTest = this.disableCost = false;
        if (this.claim.healthFamilyDetails.nameOfTheDisease == 56) {
            this.viewNameOfClinicalTest = true;
        }
        else {
            this.viewNameOfClinicalTest = false;
            this.claim.healthFamilyDetails.nameOfClinicalTest = undefined;
        }
    };
    ClaimEntryComponent.prototype.claimForChange = function (eve) {
        debugger;
        this.viewSelf = this.viewFamily = false;
        if (this.claim.healthFamilyDetails.claimFor == 5) {
            if (this.claim.healthFamilyDetails.typeOfHospitalization != 2) {
                this.lossOfEmploymentAmount = this.calculateLossOfEmploymentAmount();
                this.viewSelf = true;
            }
        }
        else if (this.claim.healthFamilyDetails.claimFor == 6) {
            this.viewFamily = true;
        }
    };
    ClaimEntryComponent.prototype.natureOfDeathChange = function (natureOfDeathData) {
        this.viewAccidental = this.viewEligibilityAmount = false;
        if (this.claim.deathDetails.natureofDeath > 0) {
            var data = this.deathConfig.find(function (x) { return x.claimConfigId == natureOfDeathData; });
            this.viewEligibilityAmount = true;
            this.deathEligibility = data.annualLimit;
        }
        if (this.claim.deathDetails.natureofDeath == 16) {
            this.viewAccidental = true;
        }
    };
    ClaimEntryComponent.prototype.selectDependent = function (args) {
        var _this = this;
        var data = this.benficiaryFamily.find(function (x) { return x.benFamilyMemSno == args.target.value; });
        this.dataService
            .isDuplicateDependentSubmitted(data.benSno, data.benFamilyMemSno, this.claimId, true)
            .subscribe(function (data1) {
            debugger;
            if (!data1) {
                //--------------
                if (_this.educationDetailsArray.findIndex(function (x) { return x.dependentId == args.target.value; }) != -1 && _this.rowIndex == -1) {
                    alert("already added please select another dependent");
                    _this.educationDetails.dependentId = 0;
                    return;
                }
                if (data.benDependentRelation.toLowerCase() == "daughter") {
                    _this.isMarried = _this.marriedValid = true;
                    _this.getEducationConfiguration();
                    _this.getLastExamPassed();
                }
                else if (data.benDependentRelation.toLowerCase() == "son") {
                    _this.educationConfig = _this.dataService.eduConfig;
                    var index = _this.educationConfig.findIndex(function (x) { return x.claimConfigOptionName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development"; });
                    _this.educationConfig.splice(index, 1);
                    // remove item from last Exam passed option
                    var indexLastExamPassed = _this.lastExampassed.findIndex(function (l) { return l.optionName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development"; });
                    _this.lastExampassed.splice(indexLastExamPassed, 1);
                    //var timeDiff = Math.abs(Date.now() - Date.parse(data.dob));
                    //const age = Math.floor((timeDiff / (1000 * 3600 * 24)) / 365);
                    //if (age >= 21) {
                    //    alert("your dependent not suitable for this claim beacause your son age 21");
                    //    return
                    //}
                    _this.isMarried = false;
                }
                else {
                    _this.getEducationConfiguration();
                    _this.getLastExamPassed();
                }
                _this.isDuplicateDependent = false;
            }
            else {
                _this.isDuplicateDependent = true;
            }
            //-------------------
        });
        this.educationDetails.dependentName = args.target.options[args.target.selectedIndex].text;
        this.educationDetails.dependentRelation = args.target.options[args.target.selectedIndex].text.split('-')[1];
    };
    ClaimEntryComponent.prototype.selectLastExamPassed = function (args, education) {
        debugger;
        this.educationDetails.lastExamPassedName = args.target.options[args.target.selectedIndex].text;
        if (args.target.options[args.target.selectedIndex].text == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
            this.isDisabledBaseOnLastExamPassed = true;
            this.educationDetails.eligibleAmount = 25000;
            this.viewuploadNonMarriage = true;
            this.educationDetails.presentlyReading = undefined;
            this.educationDetails.dateofAdmission = undefined;
        }
        else {
            this.isDisabledBaseOnLastExamPassed = false;
            this.educationDetails.eligibleAmount = 0;
            this.viewuploadNonMarriage = false;
            this.educationDetails.presentlyReading = undefined;
            this.educationDetails.dateofAdmission = undefined;
        }
    };
    ClaimEntryComponent.prototype.selectPresentlyReading = function (args, education) {
        var _this = this;
        var data = this.benficiaryFamily.find(function (x) { return x.benFamilyMemSno == education.dependentId; });
        this.educationDetails.presentlyReadingName = args.target.options[args.target.selectedIndex].text;
        if (this.educationDetails.presentlyReading > 0) {
            var data_3 = this.educationConfig.find(function (x) { return x.claimConfigId == _this.educationDetails.presentlyReading; });
            this.educationDetails.eligibleAmount = data_3.annualLimit;
        }
        else {
            this.educationDetails.eligibleAmount = 0;
        }
        if (data.benDependentRelation.toLowerCase() == "daughter" && this.educationDetails.presentlyReadingName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development") {
            this.viewuploadNonMarriage = true;
        }
        else {
            this.viewuploadNonMarriage = false;
        }
    };
    ClaimEntryComponent.prototype.chkAccidentChange = function (args, value) {
        if (value == true) {
            this.claim.healthFamilyDetails.claimFor = 5;
        }
        else {
            this.claim.healthFamilyDetails.claimFor = 0;
        }
        this.claimForChange(args);
    };
    ClaimEntryComponent.prototype.validateEducationDetails = function (details) {
        var isValid = true;
        this.uploadselfattestedValid = this.uploadNonMarriageValid = this.uploadCertificatetValid = this.uplaodmain = this.studentNameValid = this.institutionNameValid = this.institutionContactValid = this.registrationNoValid = this.educationYearValid = this.dateOfAdmissionValid = this.presentlyReadingValid = true;
        if (details.dependentId == undefined || details.dependentId <= 0) {
            this.studentNameValid = isValid = false;
        }
        if (details.institutionName == undefined || details.institutionName == "") {
            this.institutionNameValid = isValid = false;
        }
        if (details.registrationRollNo == undefined || details.registrationRollNo == "") {
            this.registrationNoValid = isValid = false;
        }
        if (details.institutionContact != undefined && details.institutionContact.toString().length > 0 && details.institutionContact.toString().length < 10) {
            this.institutionContactValid = isValid = false;
        }
        if (details.year == undefined) {
            this.educationYearValid = isValid = false;
        }
        if (this.viewuploadNonMarriage) {
            if (this.eduNonMarriage.length == 0) {
                this.uploadNonMarriageValid = isValid = false;
            }
        }
        if (this.educertificates.length == 0 && !this.isDisabledBaseOnLastExamPassed) {
            this.uploadCertificatetValid = isValid = false;
        }
        if (this.eduSelfAttested.length == 0) {
            this.uploadselfattestedValid = isValid = false;
        }
        console.log(details.dateofAdmission);
        if (details.dateofAdmission == undefined && !this.isDisabledBaseOnLastExamPassed) {
            this.dateOfAdmissionValid = isValid = false;
        }
        if ((details.presentlyReading == undefined || details.presentlyReading <= 0) && !this.isDisabledBaseOnLastExamPassed) {
            this.presentlyReadingValid = isValid = false;
        }
        debugger;
        if (this.isMarried && (details.isMarried == undefined || details.isMarried == null)) {
            this.marriedValid = isValid = false;
        }
        else if (this.isMarried && details.isMarried == "1") {
            isValid = false;
            alert("This benefit not applicable for married student");
            return;
        }
        if (this.isDuplicateDependent) {
            isValid = false;
        }
        return isValid;
    };
    ClaimEntryComponent.prototype.addEducationDetails = function (details) {
        if (this.claim.educationDetails.claimAmount == undefined) {
            this.claim.educationDetails.claimAmount = 0;
        }
        if (this.validateEducationDetails(details)) {
            details.statusId = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimStatus"].Submitted;
            if (this.educationDetailsArray.findIndex(function (x) { return x.dependentId == details.dependentId; }) == -1 && this.rowIndex == -1) {
                var attachedList_1 = [];
                if (this.educertificates.length > 0) {
                    this.educertificates.forEach(function (contact) {
                        attachedList_1.push(contact);
                    });
                }
                if (this.eduNonMarriage.length > 0) {
                    this.eduNonMarriage.forEach(function (contact) {
                        attachedList_1.push(contact);
                    });
                }
                if (this.eduSelfAttested.length > 0) {
                    this.eduSelfAttested.forEach(function (contact) {
                        attachedList_1.push(contact);
                    });
                }
                details.attachmentDetailsList = attachedList_1;
                details.isDuplicate = false;
                this.educationDetailsArray.push(details);
                this.claim.educationDetails.claimAmount -= this.rowEligibleAmount == undefined ? 0 : this.rowEligibleAmount;
                this.eduCount += 1;
                this.lgModal.hide();
            }
            else if (this.educationDetailsArray.findIndex(function (x) { return x.dependentId == details.dependentId; }) != -1 && this.rowIndex == -1) {
                alert("already added please select another dependent");
                return;
            }
            else {
                if (this.rowIndex != -1) {
                    if (this.educationDetailsArray.findIndex(function (x) { return x.dependentId == details.dependentId; }) == this.rowIndex) {
                        this.educationDetailsArray.splice(this.rowIndex, 1);
                        this.claim.educationDetails.claimAmount -= this.rowEligibleAmount == undefined ? 0 : this.rowEligibleAmount;
                        var attachedList_2 = [];
                        if (this.educertificates.length > 0) {
                            this.educertificates.forEach(function (contact) {
                                attachedList_2.push(contact);
                            });
                        }
                        if (this.eduNonMarriage.length > 0) {
                            this.eduNonMarriage.forEach(function (contact) {
                                attachedList_2.push(contact);
                            });
                        }
                        if (this.eduSelfAttested.length > 0) {
                            this.eduSelfAttested.forEach(function (contact) {
                                attachedList_2.push(contact);
                            });
                        }
                        details.attachmentDetailsList = attachedList_2;
                        details.isDuplicate = false;
                        this.educationDetailsArray.push(details);
                        this.rowIndex = -1;
                        this.rowEligibleAmount = 0;
                        this.lgModal.hide();
                    }
                    else {
                        alert("already added please select another dependent");
                        return;
                    }
                }
            }
            if (this.educationBenefitConfigDetails != null && this.educationBenefitConfigDetails.length > 0) {
                var eduBenefit = this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "MaxLimitExceeded" /* MaxLimitExceeded */.toLowerCase(); });
                if (eduBenefit != null) {
                    var cond = eval(this.eduCount + eduBenefit.logic + eduBenefit.value);
                }
                if (cond) {
                    this.maxLimitExceeded = true;
                }
            }
            var data = this.benficiaryFamily.find(function (x) { return x.benFamilyMemSno == details.dependentId; });
            this.claim.educationDetails.claimAmount += details.eligibleAmount == undefined ? 0 : details.eligibleAmount;
            this.educationDetails = {};
        }
    };
    ClaimEntryComponent.prototype.editEducationDetails = function (details) {
        var _this = this;
        this.educationDetails = details;
        this.eduSelfAttested = [];
        this.educertificates = [];
        this.eduNonMarriage = [];
        this.educationDetails.dateofAdmission = new Date(details.dateofAdmission);
        this.educationDetails.attachmentDetailsList.forEach(function (eachObj) {
            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].Scholarship) {
                _this.educertificates.push(eachObj);
            }
            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].NonMarriage) {
                _this.eduNonMarriage.push(eachObj);
            }
            if (eachObj.attachmentType === _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["AttachmentType"].PassingExamCertificate) {
                _this.eduSelfAttested.push(eachObj);
            }
        });
        this.rowEligibleAmount = details.eligibleAmount;
        this.rowIndex = this.educationDetailsArray.indexOf(details);
        this.lgModal.show();
    };
    ClaimEntryComponent.prototype.removeEducationDetails = function (details) {
        var index = this.educationDetailsArray.indexOf(details);
        if (index !== -1) {
            this.claim.educationDetails.claimAmount -= this.educationDetailsArray[index].eligibleAmount == undefined ? 0 : this.educationDetailsArray[index].eligibleAmount;
            this.educationDetailsArray.splice(index, 1);
            if (this.educationDetailsArray.findIndex(function (x) { return x.presentlyReadingName == "Education assistance to unmarried daughter for completion of UG Education or Equivalent Skill Development"; }) != -1) {
                this.viewuploadNonMarriage = true;
            }
            else {
                this.viewuploadNonMarriage = false;
            }
            this.eduCount -= 1;
            if (this.educationBenefitConfigDetails != null && this.educationBenefitConfigDetails.length > 0) {
                var eduBenefit = this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "MaxLimitExceeded" /* MaxLimitExceeded */.toLowerCase(); });
                if (eduBenefit != null) {
                    var cond = eval(this.eduCount + eduBenefit.logic + eduBenefit.value);
                }
                if (cond) {
                    this.maxLimitExceeded = true;
                }
                else {
                    this.maxLimitExceeded = false;
                }
            }
        }
    };
    ClaimEntryComponent.prototype.getHospitalization = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].Hospitalization)
            .subscribe(function (data) {
            _this.hospitalizationLov = data;
        });
    };
    ClaimEntryComponent.prototype.getDiseases = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].Diseases)
            .subscribe(function (data) {
            _this.diseasesLov = data;
        });
    };
    ClaimEntryComponent.prototype.getClinicalTests = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].ClinicalTests)
            .subscribe(function (data) {
            _this.clinicalTestLov = data;
        });
    };
    ClaimEntryComponent.prototype.getHealthClainFor = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].ClaimFor)
            .subscribe(function (data) {
            _this.healthtypeofClaim = data;
        });
    };
    ClaimEntryComponent.prototype.getLastExamPassed = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["LovConstants"].LastExamPassed)
            .subscribe(function (data) {
            _this.lastExampassed = data;
        });
    };
    ClaimEntryComponent.prototype.getPfConfiguration = function () {
        var _this = this;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].PF)
            .subscribe(function (data) {
            _this.pfConfig = data;
        });
    };
    ClaimEntryComponent.prototype.getHealthandFamilyConfiguration = function () {
        var _this = this;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily)
            .subscribe(function (data) {
            _this.healthConfig = data;
        });
    };
    ClaimEntryComponent.prototype.getEducationConfiguration = function () {
        var _this = this;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education)
            .subscribe(function (data) {
            _this.educationConfig = data;
            _this.dataService.eduConfig = data;
        });
    };
    ClaimEntryComponent.prototype.getDeathConfiguration = function () {
        var _this = this;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Death)
            .subscribe(function (data) {
            _this.deathConfig = data;
        });
    };
    ClaimEntryComponent.prototype.getDisabilityConfiguration = function () {
        var _this = this;
        debugger;
        this.dataService
            .getClaimConfiguration(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability)
            .subscribe(function (data) {
            console.log(data);
            _this.disabilityConfig = data;
        });
    };
    ClaimEntryComponent.prototype.valuechange = function (ssnNo) {
        var _this = this;
        this.dataService
            .getBeneficiaryBasicDetailsByNo(ssnNo)
            .subscribe(function (data) {
            _this.beneficiary = data;
            if (_this.beneficiary != null) {
                if (_this.beneficiary.isActive) {
                    _this.benficiaryInactive = false;
                    _this.getBenficiaryFamilyDetails(_this.beneficiary.benSno);
                    _this.getBenficiaryEduCount(_this.beneficiary.benSno);
                }
                else {
                    _this.benficiaryInactive = true;
                    _this.restrictSave = true;
                    _this.viewEducation = false;
                    _this.disableEdu = true;
                }
            }
            console.log(_this.beneficiary);
        });
    };
    ClaimEntryComponent.prototype.getHospitals = function () {
        var _this = this;
        this.dataService
            .getAllHospitals()
            .subscribe(function (data) {
            _this.hospotalList = data;
            console.log(_this.hospotalList);
        });
    };
    ClaimEntryComponent.prototype.getBenficiaryEduCount = function (id) {
        var _this = this;
        this.dataService
            .getBeneficiaryEduCount(id)
            .subscribe(function (data) {
            _this.eduCount = data;
            if (_this.mode == "draft" && (_this.educationDetailsArray != null && _this.educationDetailsArray.length > 0)) {
                _this.eduCount = _this.eduCount + _this.educationDetailsArray.length;
            }
            if (_this.educationBenefitConfigDetails != null && _this.educationBenefitConfigDetails.length > 0) {
                var eduBenefit = _this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "MaxLimitExceeded" /* MaxLimitExceeded */.toLowerCase(); });
                if (eduBenefit != null) {
                    var cond = eval(_this.eduCount + eduBenefit.logic + eduBenefit.value);
                    if (cond && _this.claimId == 0) {
                        //this.disableEdu = true;
                        //this.maxLimitExceeded = true;
                        //this.restrictSave = true;
                    }
                    else {
                        _this.disableEdu = false;
                        _this.maxLimitExceeded = false;
                        _this.restrictSave = false;
                    }
                }
            }
        });
    };
    ClaimEntryComponent.prototype.getBenficiaryFamilyDetails = function (id) {
        var _this = this;
        this.dataService
            .getBeneficiaryFamilyDetails(id, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education)
            .subscribe(function (data) {
            _this.benficiaryFamily = data;
            if (_this.benficiaryFamily != null && _this.benficiaryFamily.length > 0) {
                _this.noDependents = false;
            }
            //else { this.restrictSave = true; this.viewEducation = false; this.disableEdu = true; this.noDependents = true; }
            console.log(_this.benficiaryFamily);
        });
    };
    ClaimEntryComponent.prototype.validateClaimsData = function (claimData, id) {
        var isValid = true;
        if (id == 1)
            return isValid;
        this.educationCheck = this.ssnNoValid = true;
        if (id == 2) {
            if (this.mainUpload == undefined) {
                this.uplaodmain = isValid = false;
            }
        }
        return isValid;
    };
    ClaimEntryComponent.prototype.okClick = function () {
        this.successModal.hide();
        if (this.saveType == 1) {
            window.location.href = "claim/DraftClaims";
        }
        else if (this.mode == "claim") {
            window.location.href = "claim/claims";
        }
        else if (this.mode == "referal") {
            window.location.href = "claim/referralclaims";
        }
        else {
            window.location.href = "claim/claims";
        }
    };
    ClaimEntryComponent.prototype.cancleClick = function () {
        if (this.saveType == 1) {
            window.location.href = "claim/DraftClaims";
        }
        else if (this.mode == "claim") {
            window.location.href = "claim/claims";
        }
        else if (this.mode == "referal") {
            window.location.href = "claim/referralclaims";
        }
        else {
            window.location.href = "claim/claims";
        }
    };
    ClaimEntryComponent.prototype.validateDisabilityData = function (claimData, id) {
        var _this = this;
        var isValid = true;
        this.natureOfDisability = this.dateofrelease = this.disabilityCertificateUploaded = this.isDeathorpermanent1 = this.isDeathorpermanent2 = this.isDeathorpermanent3 = this.checkNatureOfDisability = this.condolationCertificateUploaded = true;
        this.isClaimEffectiveDate = false;
        if (id == 2) {
            if (this.mainUpload == undefined) {
                this.uplaodmain = isValid = false;
            }
        }
        if (this.disabilityCertificate.fileName == undefined) {
            this.disabilityCertificateUploaded = isValid = false;
        }
        ;
        if (this.claim.disabilityDetails.dateofRelease == undefined) {
            this.dateofrelease = isValid = false;
        }
        ;
        //if (this.claim.disabilityDetails.natureOfDisability == undefined) { this.natureOfDisability = isValid = false }
        if (this.claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyintentional == false || this.claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyintentional == undefined) {
            this.isDeathorpermanent1 = isValid = false;
        }
        if (this.claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyinjuries == false || this.claim.disabilityDetails.isDeathorpermanentdisabilitynotcausedbyinjuries == undefined) {
            this.isDeathorpermanent2 = isValid = false;
        }
        if (this.claim.disabilityDetails.isOtherFinancialAssistance == false || this.claim.disabilityDetails.isOtherFinancialAssistance == undefined) {
            this.isDeathorpermanent3 = isValid = false;
        }
        if (this.claim.disabilityDetails.natureOfDisability == undefined) {
            this.natureOfDisability = isValid = false;
        }
        else {
            var data = this.beneficiaryAppliedDisabilities.find(function (x) { return x == _this.claim.disabilityDetails.natureOfDisability; });
            if (data) {
                this.checkNatureOfDisability = isValid = false;
                //alert("Claim has been already submitted with this nature of disability");
                //return;
            }
        }
        if (this.enableReasonForDelaySubmission) {
            if (this.claim.disabilityDetails.reasonForDelaySubmission == undefined) {
                this.reasonForDelayValid = isValid = false;
            }
            ;
            if (this.condolationCertificate.fileName == undefined) {
                this.condolationCertificateUploaded = isValid = false;
            }
            ;
        }
        debugger;
        if (this.claim.disabilityDetails.dateofRelease != undefined) {
            if (this.claim.disabilityDetails.dateofRelease < new Date(this.disabilityClaimEffectiveDate)) {
                this.claimEffectiveDate = this.disabilityClaimEffectiveDate;
                this.isClaimEffectiveDate = true;
                isValid = false;
            }
        }
        return isValid;
    };
    ClaimEntryComponent.prototype.validateHealthData = function (claimData, id) {
        var isValid = true;
        this.typeOfClaimValid = this.dateofAppointment = this.hospital = this.hospitalization = this.dateofAdmin = this.dateofDischargeValid = this.claimForValid = this.familyMember = this.hospitalselfAttested = this.dischargeCertificate = this.rigisterESI = this.loeFromDate = this.loeToDate = this.healthCondolationCertificateUploaded = true; //this.originalVoucher =
        this.isClaimEffectiveDate = false;
        if (id == 2) {
            if (this.mainUpload == undefined) {
                this.uplaodmain = isValid = false;
            }
        }
        if (this.hospotalId > 0) {
            if (this.claim.healthFamilyDetails.otherHospital == undefined) {
                this.otherHospitalValid = isValid = false;
            }
            ;
        }
        if (this.claim.healthFamilyDetails.claimFor == undefined) {
            this.claimForValid = isValid = false;
        }
        if (this.claim.healthFamilyDetails.typeOfClaim == undefined) {
            this.typeOfClaimValid = isValid = false;
        }
        if (this.claim.healthFamilyDetails.hospitalId == 0 || this.claim.healthFamilyDetails.hospitalId == undefined) {
            this.hospital = isValid = false;
        }
        if (this.claim.healthFamilyDetails.typeOfHospitalization == 0 || this.claim.healthFamilyDetails.typeOfHospitalization == undefined) {
            this.hospitalization = isValid = false;
        }
        if (this.claim.healthFamilyDetails.isCertifynotESI == false || this.claim.healthFamilyDetails.isCertifynotESI == undefined) {
            this.rigisterESI = isValid = false;
        }
        if (this.healthSelfAttached.fileName == undefined) {
            this.hospitalselfAttested = isValid = false;
        }
        ;
        //if (this.healthOriginalVoucher.fileName == undefined) { this.originalVoucher = isValid = false };
        if (this.showDisCertUpload && this.healthDischargeCertificate.fileName == undefined) {
            this.dischargeCertificate = isValid = false;
        }
        ;
        if (this.viewDateOfAdmit) {
            if (this.claim.healthFamilyDetails.admittedDate == undefined) {
                this.dateofAdmin = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.admittedDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
            if (this.claim.healthFamilyDetails.dischargeDate == undefined) {
                this.dateofDischargeValid = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.dischargeDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
        }
        if (this.viewDateOfFirstAppointment) {
            if (this.claim.healthFamilyDetails.firstAppointmentDate == undefined) {
                this.dateofAppointment = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.firstAppointmentDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
        }
        if (this.viewFamily) {
            if (this.claim.healthFamilyDetails.familyMemberId == 0 || this.claim.healthFamilyDetails.familyMemberId == undefined) {
                this.rigisterESI = isValid = false;
            }
        }
        if (this.viewSelf) {
            if (this.claim.healthFamilyDetails.loeFromDate == undefined) {
                this.loeFromDate = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.loeFromDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
            if (this.claim.healthFamilyDetails.loeToDate == undefined) {
                this.loeToDate = isValid = false;
            }
            else {
                if (this.claim.healthFamilyDetails.loeToDate < new Date(this.healthFamilyClaimEffectiveDate)) {
                    this.claimEffectiveDate = this.healthFamilyClaimEffectiveDate;
                    this.isClaimEffectiveDate = true;
                    isValid = false;
                }
            }
        }
        if (this.claim.healthFamilyDetails.costOfClinicalTest == undefined && (this.viewDateOfAdmit && this.claim.healthFamilyDetails.costOfHospitalization == undefined) && this.claim.healthFamilyDetails.costOfMedicine == undefined) {
            isValid = false;
            alert("Please enter atleast one cost");
            return;
        }
        else {
            if (this.claim.healthFamilyDetails.costOfClinicalTest == 0 && this.claim.healthFamilyDetails.costOfHospitalization == 0 && this.claim.healthFamilyDetails.costOfMedicine == 0) {
                isValid = false;
                alert("Please enter atleast one valid cost");
                return;
            }
            var amount = Number(claimData.healthFamilyDetails.costOfClinicalTest != undefined ? claimData.healthFamilyDetails.costOfClinicalTest : 0) + Number(claimData.healthFamilyDetails.costOfHospitalization != undefined ? claimData.healthFamilyDetails.costOfHospitalization : 0) + Number(claimData.healthFamilyDetails.costOfMedicine != undefined ? claimData.healthFamilyDetails.costOfMedicine : 0);
            if (amount == 0) {
                isValid = false;
                alert("Please enter atleast one valid cost");
                return;
            }
            var remainingAmount = 0;
            if (this.claim.healthFamilyDetails.typeOfClaim == 4) {
                remainingAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].TreatmentOfAilment - this.typeOfAilmentClaimedAmount;
            }
            else {
                remainingAmount = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["HealthClaimEligibility"].Surgery - this.surgeryClaimedAmount;
            }
            if (amount > remainingAmount) {
                isValid = false;
                alert("Cost of Clinical Test, Cost of Medicine, Cost of Hospitalization should not be more than " + remainingAmount);
                return;
            }
        }
        if (this.enableReasonForDelaySubmissionInHealth) {
            if (this.claim.healthFamilyDetails.reasonForDelaySubmission == undefined) {
                this.reasonForHealthDelayValid = isValid = false;
            }
            ;
            if (this.healthCondolationCertificate.fileName == undefined) {
                this.healthCondolationCertificateUploaded = isValid = false;
            }
            ;
        }
        return isValid;
    };
    ClaimEntryComponent.prototype.downLoadPdf = function (claimData, type) {
        var _this = this;
        this.claim.deathDetails = null;
        if (!this.viewPf) {
            this.claim.providentFundDetails = null;
        }
        if (!this.viewDeath) {
            this.claim.disabilityDetails = null;
        }
        else {
            claimData.disabilityDetails.natureOfDisabilityName = this.natureOfDisabilityName;
        }
        if (!this.viewHealth) {
            this.claim.healthFamilyDetails = null;
        }
        if (!this.viewEducation) {
            this.claim.educationDetails = null;
        }
        else {
            claimData.educationDetails.educationDetailList = this.educationDetailsArray;
        }
        this.claim.benSno = this.beneficiary.benSno;
        claimData.benSno = this.claim.benSno;
        claimData.benName = this.beneficiary.benFullName;
        claimData.attachment = this.mainUploadList;
        claimData.ssin = this.beneficiary.ssI_Number;
        claimData.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["EntryPoint"].Beneficiary;
        claimData.onBehalfBen = true;
        this.dataService
            .genaratePdfFormV(claimData)
            .then(function (data) {
            var blob = new Blob([data.body], { type: 'application/pdf' });
            if (type == 'print') {
                var blobUrl = URL.createObjectURL(blob);
                var iframe = document.createElement('iframe');
                iframe.style.display = 'none';
                iframe.src = blobUrl;
                document.body.appendChild(iframe);
                iframe.contentWindow.print();
            }
            else {
                file_saver__WEBPACK_IMPORTED_MODULE_6__["saveAs"](blob, "FormV.pdf");
            }
            _this.disableSubmitbutton = false;
            _this.pdfModal.hide();
            //var url = window.URL.createObjectURL(blob);
            //this.disableSubmitbutton = false;
            //window.open(url);
        });
    };
    ClaimEntryComponent.prototype.GenaratePdf = function (claimData, type) {
        var isValid = true;
        if (this.viewHealth) {
            if (this.validateHealthData(claimData, type)) {
                if (this.claim.healthFamilyDetails.claimFor == 5 && this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                    claimData.healthFamilyDetails.loeAmount = this.lossOfEmploymentAmount;
                }
                else {
                    claimData.healthFamilyDetails.loeAmount = 0;
                }
            }
            else {
                //return;
                isValid = false;
            }
        }
        if (this.viewDeath) {
            if (!this.validateDisabilityData(claimData, type)) {
                //return;
                isValid = false;
            }
        }
        if (this.viewPf) {
            if (!this.validatePFData(claimData, type)) {
                //return;
                isValid = false;
            }
            else {
                claimData.providentFundDetails.pFNO = this.beneficiary.regNumber;
            }
        }
        //Keep Education Validations after all the health,pf,death, disability validations
        if (this.viewEducation) {
            if (this.educationDetailsArray.length == 0) {
                alert("Please add atleast one student");
                //return;
                isValid = false;
            }
            else if (this.educationDetailsArray.length > 0) {
                debugger;
                for (var i = 0; i < this.educationDetailsArray.length; i++) {
                    if (this.educationDetailsArray[i].isDuplicate) {
                        alert("Already claim has submitted for this dependent in this year please select another dependent");
                        isValid = false;
                        return;
                    }
                }
                this.isClaimEffectiveDate = false;
                for (var i = 0; i < this.educationDetailsArray.length; i++) {
                    if (this.educationDetailsArray[i].dateofAdmission != undefined) {
                        if (new Date(this.educationDetailsArray[i].dateofAdmission) < new Date(this.educationClaimEffectiveDate)) {
                            this.claimEffectiveDate = this.educationClaimEffectiveDate;
                            this.isClaimEffectiveDate = true;
                            isValid = false;
                            return;
                        }
                    }
                }
            }
            if (!claimData.educationDetails.isanyothersourceofthegovernment) {
                return this.educationCheck = isValid = false;
            }
        }
        if (isValid == false) {
            return;
        }
        if (this.validateClaimsData(claimData, 3)) {
            this.pdfModal.show();
        }
        else {
            return;
        }
    };
    ClaimEntryComponent.prototype.saveClaimsData = function (claimData, type) {
        var _this = this;
        var isValid = true;
        this.validateDependent = false;
        if (type != 1) {
            if (this.viewHealth) {
                if (!this.validateHealthData(claimData, type)) {
                    //return;
                    isValid = false;
                }
            }
            if (this.viewDeath) {
                if (!this.validateDisabilityData(claimData, type)) {
                    //return;
                    isValid = false;
                }
            }
            if (this.viewPf) {
                if (!this.validatePFData(claimData, type)) {
                    isValid = false;
                    return;
                }
            }
            //Keep Education Validations after all the health,pf,death, disability validations
            if (this.viewEducation) {
                if (this.educationDetailsArray.length == 0) {
                    alert("Please add atleast one student");
                    //return;
                    isValid = false;
                }
                if (!claimData.educationDetails.isanyothersourceofthegovernment) {
                    return this.educationCheck = isValid = false;
                }
                this.isClaimEffectiveDate = false;
                for (var i = 0; i < this.educationDetailsArray.length; i++) {
                    if (this.educationDetailsArray[i].dateofAdmission != undefined) {
                        if (new Date(this.educationDetailsArray[i].dateofAdmission) < new Date(this.educationClaimEffectiveDate)) {
                            this.claimEffectiveDate = this.educationClaimEffectiveDate;
                            this.isClaimEffectiveDate = true;
                            isValid = false;
                            return;
                        }
                    }
                }
            }
        }
        if (isValid == false) {
            return;
        }
        if (this.validateClaimsData(claimData, type)) {
            this.UpdateClaimStatusIdByStatus(type);
            if (this.ClaimStatusId <= 7)
                claimData.workflowId = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["WorkflowTrans"].workflow;
            else
                claimData.workflowId = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["WorkflowTrans"].workflowreferral;
            var attachedList_3 = [];
            this.claim.deathDetails = null;
            if (!this.viewPf) {
                this.claim.providentFundDetails = null;
            }
            if (!this.viewDeath) {
                this.claim.disabilityDetails = null;
            }
            if (!this.viewHealth) {
                this.claim.healthFamilyDetails = null;
            }
            if (!this.viewEducation) {
                this.claim.educationDetails = null;
            }
            if (this.educertificates.length > 0) {
                this.educertificates.forEach(function (contact) {
                    attachedList_3.push(contact);
                });
            }
            if (this.eduNonMarriage.length > 0) {
                this.eduNonMarriage.forEach(function (contact) {
                    attachedList_3.push(contact);
                });
            }
            if (this.eduSelfAttested.length > 0) {
                this.eduSelfAttested.forEach(function (contact) {
                    attachedList_3.push(contact);
                });
            }
            // this.mainUploadList.push(this.mainUpload);
            this.claim.benSno = this.beneficiary.benSno;
            if (this.mainUpload != undefined) {
                claimData.attachment.push(this.mainUpload);
            }
            claimData.ssin = this.beneficiary.ssI_Number;
            claimData.entryPoint = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["EntryPoint"].Beneficiary;
            if (this.claim.educationDetails != null) {
                if (this.educationDetailsArray.length > 0) {
                    claimData.educationDetails.educationDetailList = this.educationDetailsArray;
                    //---------------------------
                    //this.expection = [];
                    this.educationClaimExceptionDetails = [];
                    for (var i = 0; i < this.educationDetailsArray.length; i++) {
                        var data = this.benficiaryFamily.find(function (x) { return x.benFamilyMemSno == _this.educationDetailsArray[i].dependentId; });
                        if (this.educationBenefitConfigDetails != null && this.educationBenefitConfigDetails.length > 0) {
                            //Exception Rule - 1 (if currentdate-admissiondate >90) 
                            if (this.educationDetailsArray[i].dateofAdmission != null && this.educationDetailsArray[i].dateofAdmission != undefined) {
                                var date1 = new Date(this.educationDetailsArray[i].dateofAdmission);
                                var date2 = new Date(Date.now());
                                var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                                var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                                var eduBenefit = this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "DateofAdmissionExceeding" /* DateofAdmissionExceeding */.toLowerCase(); });
                                if (eduBenefit != null) {
                                    var cond = eval(diffDays + eduBenefit.logic + eduBenefit.value);
                                    //if (diffDays > 90) {
                                    if (cond) {
                                        var exp = {};
                                        exp.exceptionText = "Student (Dependent) " + data.benDependentName + " admission date exceeding 90 days";
                                        exp.exceptionCapturedDate = new Date();
                                        exp.raisedBy = this.userService.user.userid;
                                        //this.expection.push(exp);
                                        this.educationClaimExceptionDetails.push(exp);
                                    }
                                }
                                //Exception Rule - 2 IF(BenDependentSonAge by admissiondate> 21) 
                                if (data.benDependentRelation.toLowerCase() == "son") {
                                    var date1 = new Date(this.educationDetailsArray[i].dateofAdmission);
                                    var date2 = new Date(data.dob);
                                    var timeDiff = Math.abs(date1.getTime() - date2.getTime());
                                    var age = Math.floor((timeDiff / (1000 * 3600 * 24)) / 365);
                                    var eduBenefit2 = this.educationBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "SonAgeExceeding" /* SonAgeExceeding */.toLowerCase(); });
                                    if (eduBenefit2 != null) {
                                        var cond2 = eval(age + eduBenefit2.logic + eduBenefit2.value);
                                        //if (age >= 21) {
                                        if (cond2) {
                                            var exp = {};
                                            exp.exceptionText = "Student (Dependent) " + data.benDependentName + " age exceeding 21";
                                            exp.exceptionCapturedDate = new Date();
                                            exp.raisedBy = this.userService.user.userid;
                                            // this.expection.push(exp);
                                            this.educationClaimExceptionDetails.push(exp);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    claimData.educationDetails.educationClaimExceptionDetails = this.educationClaimExceptionDetails;
                    //--------------------
                }
                else
                    claimData.educationDetails.educationDetailList = null;
                //claimData.educationDetails.attachmentDetailsList = attachedList;
                claimData.educationDetails.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education;
                claimData.educationDetails.statusId = this.ClaimStatusId;
                claimData.educationDetails.CreatedBy = this.userService.user.userid;
            }
            if (this.claim.healthFamilyDetails != null) {
                //-------------------------------
                //this.expection = []; 
                this.healthClaimExceptionDetails = [];
                if (this.healthFamilyBenefitConfigDetails != null && this.healthFamilyBenefitConfigDetails.length > 0) {
                    //Exception Rule - 4 if(Currentdate-Firstappointmentdate >60 and OPD)
                    if (this.claim.healthFamilyDetails.firstAppointmentDate != null && this.claim.healthFamilyDetails.firstAppointmentDate != undefined) {
                        var date1 = new Date(this.claim.healthFamilyDetails.firstAppointmentDate);
                        var date2 = new Date(Date.now());
                        var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                        //---------------------
                        var helBenefit = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "DateofFirstAppointmentExceeding" /* DateofFirstAppointmentExceeding */.toLowerCase(); });
                        if (helBenefit != null) {
                            var cond = eval(diffDays + helBenefit.logic + helBenefit.value);
                            if (cond && this.claim.healthFamilyDetails.typeOfHospitalization == 2) {
                                var exp = {};
                                exp.exceptionText = "First appointment date exceeding 60 days";
                                exp.exceptionCapturedDate = new Date();
                                exp.raisedBy = this.userService.user.userid;
                                //this.expection.push(exp);
                                this.healthClaimExceptionDetails.push(exp);
                            }
                        }
                    }
                    //Exception Rule - 5 if(Currentdate-Dischargedate>60 and Hospitalization)
                    if (this.claim.healthFamilyDetails.dischargeDate != null && this.claim.healthFamilyDetails.dischargeDate != undefined) {
                        var date1 = new Date(this.claim.healthFamilyDetails.dischargeDate);
                        var date2 = new Date(Date.now());
                        var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                        //---------------------
                        var helBenefit2 = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "DateofDischargeExceeding" /* DateofDischargeExceeding */.toLowerCase(); });
                        if (helBenefit2 != null) {
                            var cond2 = eval(diffDays + helBenefit2.logic + helBenefit2.value);
                            if (cond2 && this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                                var exp = {};
                                exp.exceptionText = "Discharge date exceeding 60 days";
                                exp.exceptionCapturedDate = new Date();
                                exp.raisedBy = this.userService.user.userid;
                                // this.expection.push(exp);
                                this.healthClaimExceptionDetails.push(exp);
                            }
                        }
                    }
                }
                //--------------------
                this.healthFamilyPackages = [];
                claimData.healthFamilyDetails.healthFamilyPackages = [];
                for (var i = 0; i < this.selectedPackages.length; i++) {
                    var oo = {};
                    if (claimData.claimId > 0) {
                        oo.healthFamilyId = claimData.healthFamilyDetails.healthFamilyId;
                    }
                    oo.packageID = this.selectedPackages[i].packageID;
                    oo.ailmentName = this.selectedPackages[i].ailmentName;
                    oo.packageName = this.selectedPackages[i].packageName;
                    this.healthFamilyPackages.push(oo);
                }
                claimData.healthFamilyDetails.healthFamilyPackages = this.healthFamilyPackages;
                claimData.healthFamilyDetails.claimAmount = Number(claimData.healthFamilyDetails.costOfClinicalTest != undefined ? claimData.healthFamilyDetails.costOfClinicalTest : 0) + Number(claimData.healthFamilyDetails.costOfHospitalization != undefined ? claimData.healthFamilyDetails.costOfHospitalization : 0) + Number(claimData.healthFamilyDetails.costOfMedicine != undefined ? claimData.healthFamilyDetails.costOfMedicine : 0) + ((this.viewSelf) ? claimData.healthFamilyDetails.loeAmount : 0);
                claimData.healthFamilyDetails.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily;
                claimData.healthFamilyDetails.statusId = this.ClaimStatusId;
                claimData.healthFamilyDetails.loeAmount = this.lossOfEmploymentAmount;
                claimData.healthFamilyDetails.createdBy = this.userService.user.userid;
                if (!this.isOtherHospital) {
                    claimData.healthFamilyDetails.otherHospital == undefined;
                }
                else {
                    var exp = {};
                    exp.exceptionText = "Application has been submitted with a non listed hospital";
                    exp.exceptionCapturedDate = new Date();
                    exp.raisedBy = this.userService.user.userid;
                    // this.expection.push(exp);
                    this.healthClaimExceptionDetails.push(exp);
                }
                if (!this.viewDateOfAdmit) {
                    claimData.healthFamilyDetails.admittedDate == undefined;
                    claimData.healthFamilyDetails.dischargeDate == undefined;
                    claimData.healthFamilyDetails.costOfHospitalization == undefined;
                }
                if (!this.viewDateOfFirstAppointment) {
                    claimData.healthFamilyDetails.firstAppointmentDate == undefined;
                    claimData.healthFamilyDetails.nameOfTheDisease == undefined;
                    // claimData.healthFamilyDetails.nameOfClinicalTest == undefined;
                    this.nameOfClinicalTestIds = [];
                }
                else {
                    if (!this.viewNameOfClinicalTest) {
                        // claimData.healthFamilyDetails.nameOfClinicalTest == undefined;
                        this.nameOfClinicalTestIds = [];
                    }
                    else {
                        if (this.nameOfClinicalTestIds != null && this.nameOfClinicalTestIds.length > 0) {
                            this.clinicalTestDetails = [];
                            for (var i = 0; i < this.nameOfClinicalTestIds.length; i++) {
                                var testId = {};
                                var t = this.nameOfClinicalTestIds[i].lovDtlId;
                                testId.clinicalTest = Number(t);
                                this.clinicalTestDetails.push(testId);
                            }
                            if (this.clinicalTestDetails.length > 0) {
                                claimData.healthFamilyDetails.clinicalTestDetails = this.clinicalTestDetails;
                            }
                        }
                    }
                }
                if (!this.viewSelf) {
                    claimData.healthFamilyDetails.loeFromDate = undefined;
                    claimData.healthFamilyDetails.loeToDate = undefined;
                }
                this.healthAttachmentList.push(this.healthOriginalVoucher);
                this.healthAttachmentList.push(this.healthSelfAttached);
                if (this.healthDischargeCertificate.fileName != undefined) {
                    this.healthAttachmentList.push(this.healthDischargeCertificate);
                }
                if (this.healthExpensesSheet.fileName != undefined) {
                    this.healthAttachmentList.push(this.healthExpensesSheet);
                }
                if (this.enableReasonForDelaySubmissionInHealth) {
                    this.healthAttachmentList.push(this.healthCondolationCertificate);
                }
                claimData.healthFamilyDetails.attachmentDTOList = this.healthAttachmentList;
            }
            if (this.claim.disabilityDetails != null) {
                claimData.disabilityDetails.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability;
                claimData.disabilityDetails.statusId = this.ClaimStatusId;
                claimData.disabilityDetails.createdBy = this.userService.user.userid;
                claimData.disabilityDetails.claimAmount = this.disableEligibility;
                this.disabilityAttachmentList.push(this.disabilityCertificate);
                if (this.enableReasonForDelaySubmission) {
                    this.disabilityAttachmentList.push(this.condolationCertificate);
                }
                claimData.disabilityDetails.attachmentDTOList = this.disabilityAttachmentList;
                //Disability Exceptions
                //Exception Rule - Selected Other Nature Of Disability
                this.disabilityClaimExceptionDetails = [];
                //let data = this.beneficiaryAppliedDisabilities.find(x => x == this.claim.disabilityDetails.natureOfDisability);
                //if (data == undefined) {
                if (this.beneficiaryAppliedDisabilities.length > 0) {
                    var exp = {};
                    exp.exceptionText = "Beneficiary applied another nature of disability";
                    exp.exceptionCapturedDate = new Date();
                    exp.raisedBy = this.userService.user.userid;
                    this.disabilityClaimExceptionDetails.push(exp);
                }
                //Exception Rule - if(Currentdate-dateofRelease >90)
                if (this.claim.disabilityDetails.dateofRelease != null && this.claim.disabilityDetails.dateofRelease != undefined) {
                    var date1 = new Date(this.claim.disabilityDetails.dateofRelease);
                    var date2 = new Date(Date.now());
                    var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                    var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                    //---------------------
                    //var post = 10, logic = '>', value = 100;
                    //var valid = eval(post + logic + value);
                    if (this.disabilityBenefitConfigDetails != null && this.disabilityBenefitConfigDetails.length > 0) {
                        var disBenefit = this.disabilityBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "DateOfReleaseExceeding" /* DateOfReleaseExceeding */.toLowerCase(); });
                        if (disBenefit != null) {
                            var cond = eval(diffDays + disBenefit.logic + disBenefit.value);
                            if (cond) {
                                var exp = {};
                                exp.exceptionText = "Date of release from hospital/Accident date exceeding 90 days";
                                exp.exceptionCapturedDate = new Date();
                                exp.raisedBy = this.userService.user.userid;
                                this.disabilityClaimExceptionDetails.push(exp);
                            }
                        }
                    }
                    //-----------------------
                    //if (diffDays > 90) {
                    //    const exp: ClaimExceptionDetailsModel = {} as ClaimExceptionDetailsModel;
                    //    exp.exceptionText = "Date of release from hospital/Accident date exceeding 90 days";
                    //    exp.exceptionCapturedDate = new Date();
                    //    exp.raisedBy = this.userService.user.userid;
                    //    this.disabilityClaimExceptionDetails.push(exp);
                    //}
                }
                //claimData.disabilityDetails.disabilityClaimExceptionDetails = this.disabilityClaimExceptionDetails;
            }
            if (this.claim.providentFundDetails != null) {
                //claimData.providentFundDetails.pFNO = this.beneficiary.regNumber;
                claimData.providentFundDetails.claimAmount = this.pfClaimAmount;
                claimData.providentFundDetails.claimType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].PF;
                claimData.providentFundDetails.statusId = this.ClaimStatusId;
                claimData.providentFundDetails.createdBy = this.userService.user.userid;
                claimData.providentFundDetails.maturityDate = this.benMaturityDate;
                claimData.providentFundDetails.lockingPeriodDate = this.pfLockingPeriod;
                if (this.beneficiaryPFAccountDetails != null && (this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != null && this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO != "")) {
                    claimData.providentFundDetails.pFNO = this.beneficiaryPFAccountDetails.beneficiaryPFAccountNO;
                }
                else {
                    claimData.providentFundDetails.pFNO = this.beneficiary.regNumber;
                }
            }
            if (this.beneficiary.benRegDate != null && this.beneficiary.benRegDate != undefined) {
                debugger;
                var benregDate = new Date(this.beneficiary.benRegDate);
                var todayDate = new Date();
                var diffYears = todayDate.getFullYear() - benregDate.getFullYear();
                var m = todayDate.getMonth() - benregDate.getMonth();
                if (m < 0 || (m === 0 && todayDate.getDate() < benregDate.getDate())) {
                    diffYears--;
                }
                if (diffYears < 1) {
                    var exp = {};
                    exp.exceptionText = "Beneficiary has not completed one year of registration";
                    exp.exceptionCapturedDate = new Date();
                    exp.raisedBy = this.userService.user.userid;
                    this.healthClaimExceptionDetails.push(exp);
                    this.educationClaimExceptionDetails.push(exp);
                    this.disabilityClaimExceptionDetails.push(exp);
                }
            }
            if ((this.beneficiary.benBankAccNo == undefined || this.beneficiary.benBankAccNo == null || this.beneficiary.benBankAccNo == "")) {
                // if (this.beneficiaryBank == null || this.beneficiaryBank == undefined || this.beneficiaryBank.benBankName == null && this.beneficiaryBank.benBankIfscCode == null) {
                // this.expection = [];
                var exp = {};
                exp.exceptionText = "Benificiary does not have bank account number";
                exp.exceptionCapturedDate = new Date();
                exp.raisedBy = this.userService.user.userid;
                // this.expection.push(exp);
                this.healthClaimExceptionDetails.push(exp);
                this.educationClaimExceptionDetails.push(exp);
                this.disabilityClaimExceptionDetails.push(exp);
                this.pfClaimExceptionDetails.push(exp);
            }
            else {
                if (this.beneficiary.isAssignedMultiple) {
                    var exp = {};
                    exp.exceptionText = "Bank account number assigned to the multiple beneficiaries";
                    exp.exceptionCapturedDate = new Date();
                    exp.raisedBy = this.userService.user.userid;
                    this.healthClaimExceptionDetails.push(exp);
                    this.educationClaimExceptionDetails.push(exp);
                    this.disabilityClaimExceptionDetails.push(exp);
                    this.pfClaimExceptionDetails.push(exp);
                }
            }
            if (type != 1) {
                if (this.claim.educationDetails != null && this.educationClaimExceptionDetails.length > 0) {
                    claimData.educationDetails.educationClaimExceptionDetails = this.educationClaimExceptionDetails;
                }
                if (this.claim.healthFamilyDetails != null && this.healthClaimExceptionDetails.length > 0) {
                    claimData.healthFamilyDetails.healthClaimExceptionDetails = this.healthClaimExceptionDetails;
                }
                if (this.claim.disabilityDetails != null && this.disabilityClaimExceptionDetails.length > 0) {
                    claimData.disabilityDetails.disabilityClaimExceptionDetails = this.disabilityClaimExceptionDetails;
                }
                if (this.claim.providentFundDetails != null && this.pfClaimExceptionDetails.length > 0) {
                    claimData.providentFundDetails.pfClaimExceptionDetails = this.pfClaimExceptionDetails;
                }
            }
            claimData.StatusId = this.ClaimStatusId;
            claimData.CreatedBy = this.userService.user.userid;
            this.successMessage = "";
            this.saveType = type;
            console.log(claimData);
            if (this.claimId > 0) {
                if (confirm("Are you sure to proceed ")) {
                    this.dataService
                        .updateClaim(claimData)
                        .then(function (data) {
                        if (data) {
                            if (type == 1) {
                                _this.mode = "draft";
                                _this.successMessage = "Your claim was updated successfully";
                            }
                            else {
                                var refNo = void 0;
                                if (_this.viewHealth) {
                                    refNo = data.item2 + " (Health & Family) ";
                                }
                                if (_this.viewDeath) {
                                    refNo = data.item4 + " (Disability) ";
                                }
                                if (_this.viewPf) {
                                    refNo = data.item1 + " (PF) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item1 + " (PF) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewEducation) {
                                    if (refNo == undefined) {
                                        refNo = data.item3 + " (Education) ";
                                    }
                                    else {
                                        refNo = " (Health & Family) " + data.item2 + " , " + " (Education) " + data.item3 + " , " + " (Disability) " + data.item4;
                                    }
                                }
                                _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + refNo + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process";
                            }
                            _this.successModal.show();
                        }
                        else {
                            _this.successMessage = "Invalid transaction";
                            _this.successModal.show();
                        }
                    });
                }
            }
            else {
                if (confirm("Are you sure to proceed ")) {
                    this.dataService
                        .createClaim(claimData)
                        .then(function (data) {
                        if (data) {
                            if (type == 1) {
                                _this.mode = "draft";
                                _this.successMessage = "Your application is saved";
                                //this.successMessage = "Your claim was saved successfully";
                                //let refNo;
                                //if (this.viewHealth) {
                                //    refNo = data.item2 + " (Health & Family) ";
                                //    this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item2 + " (Health & Family) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector for further process <br/>  <br/>";
                                //}
                                //if (this.viewDeath) {
                                //    refNo = data.item4 + " (Disability) ";
                                //    this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item4 + " (Disability) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector for further process <br/>  <br/>";
                                //}
                                //if (this.viewPf) {
                                //    refNo = data.item1 + " (PF) ";
                                //    this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item1 + " (PF) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector for further process <br/>  <br/>";
                                //}
                                //if (this.viewEducation) {
                                //    if (refNo == undefined) {
                                //        refNo = data.item3 + " (Education) ";
                                //        this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item3 + " (Education) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector for further process <br/>  <br/>";
                                //    }
                                //    else {
                                //        this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item3 + "(Education) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector for further process <br/>  <br/>";
                                //        refNo = " (PF) " + data.item1 + " , " + " (Health & Family) " + data.item2 + " , " + " (Education) " + data.item3 + " , " + " (Disability) " + data.item4 + " , " + " (Death) " + data.item4;
                                //    }
                                //}
                            }
                            else {
                                var refNo = void 0;
                                if (_this.viewHealth) {
                                    refNo = data.item2 + " (Health & Family) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item2 + " (Health & Family) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewDeath) {
                                    refNo = data.item4 + " (Disability) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item4 + " (Disability) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewPf) {
                                    refNo = data.item1 + " (PF) ";
                                    _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item1 + " (PF) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                }
                                if (_this.viewEducation) {
                                    if (refNo == undefined) {
                                        refNo = data.item3 + " (Education) ";
                                        _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item3 + " (Education) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                    }
                                    else {
                                        _this.successMessage += "Your claim was successfully submitted, your claim ticket id: " + data.item3 + "(Education) " + ".You are requested to submit the relevant documents and original application form to the concerned inspector within 15 days for further process <br/>  <br/>";
                                        refNo = " (PF) " + data.item1 + " , " + " (Health & Family) " + data.item2 + " , " + " (Education) " + data.item3 + " , " + " (Disability) " + data.item4 + " , " + " (Death) " + data.item4;
                                    }
                                }
                            }
                            _this.successModal.show();
                        }
                        else {
                            _this.successMessage = "Invalid transaction";
                            _this.successModal.show();
                        }
                    });
                }
            }
        }
        else {
            return;
        }
    };
    ClaimEntryComponent.prototype.claerClaim = function () {
        this.pfExsits = this.isPFSubmitted = false;
        this.typeOfClaimValid = this.dateofAppointment = this.hospital = this.hospitalization = this.dateofAdmin = this.dateofDischargeValid = this.claimForValid = this.familyMember = this.hospitalselfAttested = this.dischargeCertificate = this.rigisterESI = this.loeFromDate = this.loeToDate = this.healthCondolationCertificateUploaded = true; //this.originalVoucher =
        this.restrictSave = false;
        this.viewEducation = false;
        this.disableEdu = false;
        this.noDependents = false;
        this.uplaodmain = this.uploadselfattestedValid = this.uploadNonMarriageValid = this.uploadCertificatetValid = this.educationCheck = true;
        this.claim = {};
        this.educationDetailsArray = [];
        this.viewEducation = false;
        this.viewHealth = false;
        this.viewDeath = false;
        this.viewPf = false;
        this.rowIndex = -1;
        this.eduCount = 0;
        this.rowEligibleAmount = 0;
        this.educationDetailsArray = [];
        this.healthOriginalVoucher = {};
        this.healthSelfAttached = {};
        this.healthDischargeCertificate = {};
        this.healthExpensesSheet = {};
        this.healthAttachmentList = [];
        this.mainUploadList = [];
        this.educertificates = [];
        this.eduNonMarriage = [];
        this.eduSelfAttested = [];
        this.claim.healthFamilyDetails = {};
        this.claim.educationDetails.isanyothersourceofthegovernment = false;
        //this.disabilityCertificateUploaded = this.natureOfDisability = this.dateofrelease = true;
        this.disabilityAttachmentList = [];
        this.disabilityCertificate = {};
        this.disabilityCertificateUploaded = this.natureOfDisability = this.dateofrelease = this.isDeathorpermanent1 = this.isDeathorpermanent2 = this.isDeathorpermanent3 = this.checkNatureOfDisability = this.condolationCertificateUploaded = true;
        this.condolationCertificate = {};
        this.healthCondolationCertificate = {};
        this.pfTypeOfClaimValid = true;
        if (this.claim.claimId == undefined) {
            this.claim = {};
            this.claim.healthFamilyDetails = {};
            this.claim.educationDetails = {};
            this.claim.disabilityDetails = {};
            this.claim.educationDetails.educationDetailList = [];
            this.getBenficiaryFamilyDetails(this.claim.benSno);
            this.getBenficiaryEduCount(this.claim.benSno);
            this.getBenficiarydetails(this.claim.benSno);
        }
        else {
            this.getClaimDetailsByClaimId(this.claimId);
        }
    };
    ClaimEntryComponent.prototype.UpdateClaimStatusIdByStatus = function (type) {
        if (type == 1)
            this.ClaimStatusId = 1;
        else {
            if (this.claimStatus < 5)
                this.ClaimStatusId = 2;
            else if (this.claimStatus == 5)
                this.ClaimStatusId = 4;
            else if (this.claimStatus == 6 || this.claimStatus == 10)
                this.ClaimStatusId = 8;
            else if (this.claimStatus == 9 || this.claimStatus == 13)
                this.ClaimStatusId = 12;
        }
    };
    ClaimEntryComponent.prototype.loeFromDateChange = function (eve) {
        //alert(this.claim.healthFamilyDetails.loeFromDate);
        this.minLOEDate = new Date(this.claim.healthFamilyDetails.loeFromDate);
        this.calculateLossOfEmploymentAmount();
    };
    ClaimEntryComponent.prototype.loeToDateChange = function (eve) {
        this.calculateLossOfEmploymentAmount();
    };
    ClaimEntryComponent.prototype.dateofadminchange = function (eve) {
        this.disableDischarge = false;
        if (eve != null) {
            if (!this.isClaimEdit) {
                this.claim.healthFamilyDetails.dischargeDate = null;
                this.claim.healthFamilyDetails.loeToDate = null;
            }
            else {
                this.isClaimEdit = false;
            }
        }
        this.dischargeMinDt = eve;
        this.lossOfEmploymentAmount = 0;
        if (this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
            this.claim.healthFamilyDetails.loeFromDate = eve;
            this.lossOfEmploymentAmount = this.calculateLossOfEmploymentAmount();
        }
    };
    ClaimEntryComponent.prototype.dateofdischargechange = function (eve) {
        this.lossOfEmploymentAmount = 0;
        if (this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
            this.claim.healthFamilyDetails.loeToDate = eve;
            this.lossOfEmploymentAmount = this.calculateLossOfEmploymentAmount();
        }
        if (eve != null) {
            if (!this.isHealthClaimEdit) {
                var date1 = new Date(eve);
                var date2 = new Date(Date.now());
                var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                //---------------
                if (this.healthFamilyBenefitConfigDetails != null && this.healthFamilyBenefitConfigDetails.length > 0) {
                    var helBenefit = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "ReasonForDelaySubmission" /* ReasonForDelaySubmission */.toLowerCase(); });
                    if (helBenefit != null) {
                        var cond = eval(diffDays + helBenefit.logic + helBenefit.value);
                        if (cond) {
                            this.enableReasonForDelaySubmissionInHealth = true;
                        }
                        else {
                            this.claim.healthFamilyDetails.reasonForDelaySubmission = null;
                            this.healthCondolationCertificate = null;
                            this.enableReasonForDelaySubmissionInHealth = false;
                        }
                    }
                }
                //if (diffDays > 90) {
                //    this.enableReasonForDelaySubmissionInHealth = true;
                //}
                //else {
                //    this.claim.healthFamilyDetails.reasonForDelaySubmission = null;
                //    this.healthCondolationCertificate = null;
                //    this.enableReasonForDelaySubmissionInHealth = false;
                //}
            }
            else {
                this.isHealthClaimEdit = false;
                if (this.claim.healthFamilyDetails.reasonForDelaySubmission != undefined || this.claim.healthFamilyDetails.reasonForDelaySubmission != null)
                    this.enableReasonForDelaySubmissionInHealth = true;
                else
                    this.enableReasonForDelaySubmissionInHealth = false;
            }
        }
    };
    ClaimEntryComponent.prototype.calculateLossOfEmploymentAmount = function () {
        debugger;
        var calculatedAmount = 0;
        if (this.healthFamilyBenefitConfigDetails != null && this.healthFamilyBenefitConfigDetails.length > 0) {
            if (this.claim.healthFamilyDetails.claimFor != undefined && this.claim.healthFamilyDetails.claimFor == 5) {
                if (this.claim.healthFamilyDetails.claimFor != undefined && this.claim.healthFamilyDetails.typeOfHospitalization != 2) {
                    if (this.claim.healthFamilyDetails.loeFromDate != undefined && this.claim.healthFamilyDetails.loeToDate != undefined) {
                        debugger;
                        var date1 = new Date(this.claim.healthFamilyDetails.loeFromDate);
                        var date2 = new Date(this.claim.healthFamilyDetails.loeToDate);
                        var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                        if (diffDays != NaN) {
                            diffDays += 1;
                            //-----------------------
                            debugger;
                            var helBenefit = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "LossOfEmploymentDateDiffernce" /* LossOfEmploymentDateDiffernce */.toLowerCase(); });
                            if (helBenefit != null) {
                                var cond = eval(diffDays + helBenefit.logic + helBenefit.value);
                                if (cond) {
                                    calculatedAmount = 0;
                                    this.viewLOEAmount = false;
                                    this.viewSelf = false;
                                }
                                else {
                                    if (diffDays > Number(helBenefit.value))
                                        calculatedAmount = (200 * Number(helBenefit.value)) + ((diffDays - Number(helBenefit.value)) * 100); //calculatedAmount = (200 * 5) + ((diffDays - 5) * 100);
                                    else
                                        calculatedAmount = diffDays * 200; //calculatedAmount = diffDays * 200;
                                    this.viewSelf = true;
                                    this.viewLOEAmount = true;
                                }
                            }
                            //if (diffDays <= 5) {
                            //    //calculatedAmount = diffDays * 200;
                            //    this.viewLOEAmount = false;
                            //}
                            //else {
                            //    this.viewLOEAmount = true;
                            //    calculatedAmount = (200 * 5) + ((diffDays - 5) * 100);
                            //}
                        }
                    }
                    var helBenefit2 = this.healthFamilyBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "LossOfEmploymentAmountExceeding" /* LossOfEmploymentAmountExceeding */.toLowerCase(); });
                    if (helBenefit2 != null) {
                        var cond2 = eval(calculatedAmount + helBenefit2.logic + helBenefit2.value);
                        if (cond2) {
                            calculatedAmount = 10000;
                        }
                    }
                }
            }
        }
        //if (calculatedAmount > 10000) { calculatedAmount = 10000; }
        return calculatedAmount;
    };
    ClaimEntryComponent.prototype.admittedDateChange = function (args) {
        this.minDischargeDate = new Date(this.claim.healthFamilyDetails.admittedDate);
        this.isDischargeDate = false;
    };
    ClaimEntryComponent.prototype.getActiveFinancialYear = function () {
        var _this = this;
        this.dataService
            .getActiveFinancialYear()
            .subscribe(function (data) {
            _this.activeYear = data;
        });
    };
    ClaimEntryComponent.prototype.checkAll = function (e, item) {
        if (e.target.checked) {
            this.result.filter(function (x) { return x.name == item; })[0].values.forEach(function (item) {
                item.isChecked = true;
            });
        }
        else {
            this.result.filter(function (x) { return x.name == item; })[0].values.forEach(function (item) {
                item.isChecked = false;
            });
        }
    };
    ClaimEntryComponent.prototype.submitClick = function () {
        this.selectedPackages = [];
        for (var i = 0; i < this.result.length; i++) {
            for (var j = 0; j < this.result[i].values.length; j++) {
                if (this.result[i].values[j].isChecked) {
                    this.selectedPackages.push(this.result[i].values[j]);
                }
            }
        }
        this.packageModal.hide();
    };
    ClaimEntryComponent.prototype.checkIfAllSelected = function (item) {
    };
    ClaimEntryComponent.prototype.viewPackages = function () {
        this.packageModal.show();
    };
    ClaimEntryComponent.prototype.getPackages = function () {
        var _this = this;
        this.dataService
            .getPackages()
            .subscribe(function (data) {
            _this.packages = data;
            console.log(_this.packages);
            var groups = new Set(_this.packages.map(function (item) { return item.ailmentName; }));
            _this.result = [];
            groups.forEach(function (g) {
                return _this.result.push({
                    name: g,
                    values: _this.packages.filter(function (i) { return i.ailmentName === g; })
                });
            });
        });
    };
    ClaimEntryComponent.prototype.isBenNomineeClaimSubmitted = function (id) {
        var _this = this;
        this.dataService
            .isBenNomineeClaimSubmitted(id)
            .subscribe(function (data) {
            _this.isBenNomineeSubmittedClaim = data;
            if (_this.isBenNomineeSubmittedClaim) {
                _this.disablePFCheckbox = _this.disableHealthCheckbox = _this.disableDisabilityCheckbox = _this.disableEducationCheckbox = true;
            }
        });
    };
    ClaimEntryComponent.prototype.disabilityDateofReleaseChange = function (eve) {
        if (eve != null) {
            if (!this.isDisabilityClaimEdit) {
                var date1 = new Date(eve);
                var date2 = new Date(Date.now());
                var timeDiff = Math.abs(date2.getTime() - date1.getTime());
                var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                if (this.disabilityBenefitConfigDetails != null && this.disabilityBenefitConfigDetails.length > 0) {
                    var disBenefit = this.disabilityBenefitConfigDetails.find(function (x) { return x.ruleName.toLowerCase() == "ReasonForDelaySubmission" /* ReasonForDelaySubmission */.toLowerCase(); });
                    if (disBenefit != null) {
                        var cond = eval(diffDays + disBenefit.logic + disBenefit.value);
                        if (cond) {
                            this.enableReasonForDelaySubmission = true;
                        }
                        else {
                            this.claim.disabilityDetails.reasonForDelaySubmission = null;
                            this.condolationCertificate = null;
                            this.enableReasonForDelaySubmission = false;
                        }
                    }
                }
                //if (diffDays > 90) {
                //    this.enableReasonForDelaySubmission = true;
                //}
                //else {
                //    this.claim.disabilityDetails.reasonForDelaySubmission = null;
                //    this.condolationCertificate = null;
                //    this.enableReasonForDelaySubmission = false;
                //}
            }
            else {
                this.isDisabilityClaimEdit = false;
                if (this.claim.disabilityDetails.reasonForDelaySubmission != undefined || this.claim.disabilityDetails.reasonForDelaySubmission != null)
                    this.enableReasonForDelaySubmission = true;
                else
                    this.enableReasonForDelaySubmission = false;
            }
        }
    };
    ClaimEntryComponent.prototype.compareDates = function () {
        if (this.claim.disabilityDetails.dateofRelease != undefined && !this.isDisabilityClaimEdit) {
            var date1 = new Date(this.claim.disabilityDetails.dateofRelease);
            var date2 = new Date(Date.now());
            var timeDiff = Math.abs(date2.getTime() - date1.getTime());
            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
            if (diffDays > 90) {
                return true;
            }
            else
                return false;
        }
        else if (this.isDisabilityClaimEdit) {
            this.isDisabilityClaimEdit = false;
            if (this.claim.disabilityDetails.reasonForDelaySubmission != undefined || this.claim.disabilityDetails.reasonForDelaySubmission != null)
                return true;
            else
                return false;
        }
    };
    ClaimEntryComponent.prototype.getDisabilityBenefitConfigurationDetails = function () {
        var _this = this;
        this.dataService
            .getBenefitConfigurationDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Disability)
            .subscribe(function (data) {
            _this.disabilityBenefitConfigDetails = data;
        });
    };
    ClaimEntryComponent.prototype.getHealthFamilyBenefitConfigurationDetails = function () {
        var _this = this;
        this.dataService
            .getBenefitConfigurationDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].HealthFamily)
            .subscribe(function (data) {
            _this.healthFamilyBenefitConfigDetails = data;
        });
    };
    ClaimEntryComponent.prototype.getEducationBenefitConfigurationDetails = function () {
        var _this = this;
        this.dataService
            .getBenefitConfigurationDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_3__["ClaimConstants"].Education)
            .subscribe(function (data) {
            _this.educationBenefitConfigDetails = data;
        });
    };
    ClaimEntryComponent.prototype.getPFBenefitConfigurationDetails = function () {
        var _this = this;
        this.dataService
            .getPFConfigurationDetails(0)
            .subscribe(function (data) {
            debugger;
            _this.pfBenefitConfigDetails = data;
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('lgModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_4__["ModalDirective"])
    ], ClaimEntryComponent.prototype, "lgModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_4__["ModalDirective"])
    ], ClaimEntryComponent.prototype, "successModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('packageModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_4__["ModalDirective"])
    ], ClaimEntryComponent.prototype, "packageModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('pdfModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_4__["ModalDirective"])
    ], ClaimEntryComponent.prototype, "pdfModal", void 0);
    ClaimEntryComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-claim-entry',
            template: __webpack_require__(/*! ./claim-entry.component.html */ "./src/app/claim/claim-entry/claim-entry.component.html"),
            styles: [__webpack_require__(/*! ./claim-entry.component.css */ "./src/app/claim/claim-entry/claim-entry.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_5__["UserService"]])
    ], ClaimEntryComponent);
    return ClaimEntryComponent;
}());



/***/ }),

/***/ "./src/app/claim/claim-track/claim-track.component.css":
/*!*************************************************************!*\
  !*** ./src/app/claim/claim-track/claim-track.component.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/claim-track/claim-track.component.html":
/*!**************************************************************!*\
  !*** ./src/app/claim/claim-track/claim-track.component.html ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n                <header>\r\n                    <h2>Track Claim</h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n                    <div class=\"widget-body no-padding\">\r\n                        <fieldset>\r\n                            <section>\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                                        <div class=\"well well-sm\">\r\n                                            <div class=\"smart-timeline\">\r\n                                                <ul class=\"smart-timeline-list\">\r\n\r\n                                                    <li *ngFor=\"let item of claimsTrack\">\r\n                                                        <div class=\"smart-timeline-icon\">\r\n                                                            <i class=\"fa fa-user\"></i>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-time\">\r\n                                                            <small>{{formatDate(item.actionDate)}}</small>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-content\">\r\n                                                            <p>\r\n                                                                <a href=\"javascript:void(0);\"><strong>{{item.userName}} - {{item.action}}</strong></a>\r\n                                                            </p>\r\n                                                            <p>\r\n                                                                {{item.actionComments}}\r\n                                                            </p>\r\n                                                        </div>\r\n                                                    </li>\r\n                                                    <!--<li>\r\n                                                        <div class=\"smart-timeline-icon\">\r\n                                                            <i class=\"fa fa-user\"></i>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-time\">\r\n                                                            <small>25th july</small>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-content\">\r\n                                                            <p>\r\n                                                                <a href=\"javascript:void(0);\"><strong>ALC Review - Send Back </strong></a>\r\n                                                            </p>\r\n                                                            <p>\r\n                                                                Provided Bill is out of the date, for which claim can't be processed. Resubmit the right bill\r\n                                                            </p>\r\n\r\n\r\n\r\n                                                        </div>\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        <div class=\"smart-timeline-icon\">\r\n                                                            <i class=\"fa fa-user\"></i>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-time\">\r\n                                                            <small>23rd july</small>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-content\">\r\n                                                            <p>\r\n                                                                <a href=\"javascript:void(0);\"><strong>Inspector Review - Forwarded to ALC</strong></a>\r\n                                                            </p>\r\n                                                            <p>\r\n                                                                Forwarded to AL at 10.30am\r\n                                                            </p>\r\n\r\n\r\n\r\n                                                        </div>\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        <div class=\"smart-timeline-icon\">\r\n                                                            <i class=\"fa fa-user\"></i>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-time\">\r\n                                                            <small>22nd July 2018</small>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-content\">\r\n                                                            <p>\r\n                                                                <a href=\"javascript:void(0);\"><strong>Resubmission by Beneficiary</strong></a>\r\n                                                            </p>\r\n                                                            <p>\r\n                                                                Here attached the document\r\n                                                            </p>\r\n                                                        </div>\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        <div class=\"smart-timeline-icon\">\r\n                                                            <i class=\"fa fa-user\"></i>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-time\">\r\n                                                            <small>21st july</small>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-content\">\r\n                                                            <p>\r\n                                                                <a href=\"javascript:void(0);\"><strong>Inspector Review - Sent Back</strong></a>\r\n                                                            </p>\r\n                                                            <p>\r\n                                                                Can you please submit your Medicall Bill?\r\n                                                            </p>\r\n\r\n\r\n\r\n                                                        </div>\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        <div class=\"smart-timeline-icon\">\r\n                                                            <i class=\"fa fa-pencil\"></i>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-time\">\r\n                                                            <small>18th July 2018</small>\r\n                                                        </div>\r\n                                                        <div class=\"smart-timeline-content\">\r\n                                                            <p>\r\n                                                                <a href=\"javascript:void(0);\"><strong>Claim Submission - Beneficiary</strong></a>\r\n                                                            </p>\r\n                                                            <p>\r\n                                                                Sir, Can you please review and approve my claim\r\n                                                            </p>\r\n\r\n                                                        </div>\r\n                                                    </li>-->\r\n                                                    <!--<li class=\"text-center\">\r\n                                                        <a href=\"javascript:void(0)\" class=\"btn btn-sm btn-default\"><i class=\"fa fa-arrow-down text-muted\"></i> LOAD MORE</a>\r\n                                                    </li>-->\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </section>\r\n                        </fieldset>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </article>\r\n    </div>\r\n    <div class=\"smart-form\">\r\n        <footer>\r\n            <a class=\"btn btn-danger\" (click)=\"onBackClaimClick()\">Cancel</a>\r\n        </footer>\r\n    </div>\r\n</section>"

/***/ }),

/***/ "./src/app/claim/claim-track/claim-track.component.ts":
/*!************************************************************!*\
  !*** ./src/app/claim/claim-track/claim-track.component.ts ***!
  \************************************************************/
/*! exports provided: ClaimTrackComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimTrackComponent", function() { return ClaimTrackComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var ClaimTrackComponent = /** @class */ (function () {
    function ClaimTrackComponent(router, route, dataService, userService) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.userService = userService;
        this.claimsTrack = {};
        this.educationDetails = {};
        this.beneficiary = {};
    }
    ClaimTrackComponent.prototype.ngOnDestroy = function () {
        if (this.route$)
            this.route$.unsubscribe();
    };
    ClaimTrackComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.route$ = this.route.params.subscribe(function (params) {
            _this.transactionId = params["transactionId"];
            _this.tranctionType = params["tranctionType"];
            _this.workflowId = params["workflowId"];
            _this.mode = params["mode"];
        });
        this.getClaimDetailsByClaimId(this.transactionId, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["ClaimConstants"][this.tranctionType], this.workflowId);
    };
    ClaimTrackComponent.prototype.getClaimDetailsByClaimId = function (transactionId, tranctionType, wfId) {
        var _this = this;
        this.dataService
            .getClaimTrackDetailsByTransactionId(transactionId, tranctionType, wfId)
            .subscribe(function (data) {
            _this.claimsTrack = data;
        });
    };
    ClaimTrackComponent.prototype.onBackClaimClick = function () {
        if (this.mode == "referal") {
            this.router.navigate(['claim/referralclaims'], { skipLocationChange: true });
        }
        else if (this.mode == "agentreferal") {
            this.router.navigate(['claim/agentreferral'], { skipLocationChange: true });
        }
        else {
            if (this.userService.user.userid != undefined && this.userService.user.userid != 0 && this.userService.user.userid.toString() != "") {
                this.router.navigate(['claim/Claims'], { skipLocationChange: true });
            }
            else {
                this.router.navigate(['claim/agentclaims'], { skipLocationChange: true });
            }
        }
    };
    ClaimTrackComponent.prototype.formatDate = function (date) {
        var month_names = ["January", "February", "March",
            "April", "May", "June",
            "July", "Aug", "September",
            "October", "November", "December"];
        var dt = new Date(date);
        var day = dt.getDate();
        var month_index = dt.getMonth();
        var year = dt.getFullYear();
        return "" + day + this.nthDay(day) + " " + month_names[month_index] + " " + year;
    };
    ClaimTrackComponent.prototype.nthDay = function (day) {
        if (day > 3 && day < 21)
            return 'th';
        switch (day % 10) {
            case 1: return "st";
            case 2: return "nd";
            case 3: return "rd";
            default: return "th";
        }
    };
    ClaimTrackComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-claim-track',
            template: __webpack_require__(/*! ./claim-track.component.html */ "./src/app/claim/claim-track/claim-track.component.html"),
            styles: [__webpack_require__(/*! ./claim-track.component.css */ "./src/app/claim/claim-track/claim-track.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], ClaimTrackComponent);
    return ClaimTrackComponent;
}());



/***/ }),

/***/ "./src/app/claim/claim-view/claim-view.component.css":
/*!***********************************************************!*\
  !*** ./src/app/claim/claim-view/claim-view.component.css ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/claim-view/claim-view.component.html":
/*!************************************************************!*\
  !*** ./src/app/claim/claim-view/claim-view.component.html ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"widget-grid\" class=\"\">\r\n\r\n\r\n    <div class=\"row\">\r\n        <article class=\"col-sm-12 col-md-12 col-lg-12 nocollapse\">\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>Claim Entry View </h2>\r\n                </header>\r\n\r\n                <div>\r\n\r\n                    <!-- widget edit box -->\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n                    <!-- end widget edit box -->\r\n                    <!-- widget content -->\r\n                    <div class=\"widget-body no-padding\">\r\n\r\n                        <!-- Success states for elements -->\r\n                        <form class=\"smart-form smart-form-main\">\r\n                            <header>Beneficiary Details</header>\r\n\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Name: </strong>{{beneficiary?.benFullName}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>SSIN: </strong>{{beneficiary?.ssI_Number}}</label>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Bank Name: </strong>{{beneficiary?.benBankName}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Account No: </strong>{{beneficiary?.benBankAccNo}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>IFSC Code: </strong>{{beneficiary?.benBankIfscCode}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Branch: </strong>{{beneficiary?.benBankBranch}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n\r\n                            </fieldset>\r\n                            <div *ngIf=\"claim.providentFundDetails != null\">\r\n                                <header>Provident Fund</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong> PF No.: </strong>{{claim.providentFundDetails.pfno}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong> Claim Amount:</strong> {{claim.providentFundDetails.claimAmount}} /-\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong>  Date of Maturity:</strong> {{claim.providentFundDetails.maturityDateString}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong>  Locking Period Up-to:</strong> {{claim.providentFundDetails.lockingPeriodDateString}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong> Type of Claim:</strong> {{claim.providentFundDetails.typeOfClaimName}}\r\n                                                </label>\r\n\r\n                                            </div>\r\n                                            <div class=\"col col-6 \" *ngIf=\"isPrematureClaim\">\r\n                                                <label>\r\n                                                    <strong> Reason for Preclosure:</strong> {{claim.providentFundDetails.reasonForPreClosure}}\r\n                                                </label>\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </div>\r\n                            <div *ngIf=\"claim.educationDetails != null\">\r\n                                <header>Education</header>\r\n\r\n                                <fieldset>\r\n\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n\r\n                                                <div><strong>Claim Amount : </strong> {{claim?.educationDetails?.claimAmount}}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>Dependent Details</header>\r\n                                <fieldset>\r\n                                    <section *ngFor=\"let detail of educationList\">\r\n\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Name of the Student: </strong>{{detail?.dependentName}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label> <strong>Name of the Institution: </strong> {{detail?.institutionName}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>Name of the Principal/Head Master of the institution:</strong>{{detail?.institutionPrinicipleName}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label> <strong>Contact Number of the Institution: </strong>{{detail?.institutionContact}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Registration No./Roll No. of last exam passed: </strong>{{detail?.registrationRollNo}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Year of Examination: </strong>{{detail?.year}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Date of Admission: </strong>{{detail?.dateofAdmissionString}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Last Exam Passed: </strong>{{detail?.lastExamPassedName}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Presently Reading: </strong>{{detail?.presentlyReadingName}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>Eligible Amount :</strong>{{detail?.eligibleAmount}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>Educational Attachments</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <a (click)=\"viewAttachment()\" class=\"smart-form-link\">View All Attachments</a>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </div>\r\n                            <div *ngIf=\"this.claim.healthFamilyDetails != null\">\r\n                                <header>Health & Family</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n\r\n                                                <div><strong>Claim Amount : </strong> {{claim?.healthFamilyDetails?.claimAmount}}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>Health & Family Details</header>\r\n                                <fieldset>\r\n                                    <section>\r\n\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Type of Claim: </strong>{{claim?.healthFamilyDetails?.typeOfClaimName}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong>Hospital : </strong> {{claim?.healthFamilyDetails?.hospitalName}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong> Hospitalization/OPD:</strong>{{claim?.healthFamilyDetails?.typeOfHospitalizationName}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong> Patient Id: </strong>{{claim?.healthFamilyDetails?.patientId}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalization==2\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Name of Disease: </strong>{{claim?.healthFamilyDetails?.nameOfTheDiseaseString}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\" *ngIf=\"claim?.healthFamilyDetails?.nameOfTheDisease==56\">\r\n                                                <label><strong> Name of clinical test: </strong>{{claim?.healthFamilyDetails?.nameOfClinicalTestString}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"viewMetWithAnAccident\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong> Met with an Accident:</strong>{{claim?.healthFamilyDetails?.isAccident}}\r\n                                                </label>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Cost of Clinical Test: </strong>{{claim?.healthFamilyDetails?.costOfClinicalTest}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Cost of Medicine: </strong>{{claim?.healthFamilyDetails?.costOfMedicine}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalization==2\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Date of First Appointment: </strong>{{claim?.healthFamilyDetails?.firstAppointmentDateString}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>Claim for: </strong>{{claim?.healthFamilyDetails?.claimForName}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\" *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalization==1\">\r\n                                                <label><strong> Cost of Hospitalization: </strong>{{claim?.healthFamilyDetails?.costOfHospitalization}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalization==1\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Date of Admission to Hospital: </strong>{{claim?.healthFamilyDetails?.admittedDateString}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>Date of Discharge :</strong>{{claim?.healthFamilyDetails?.dischargeDateString}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.familyMemberId != undefined && claim?.healthFamilyDetails?.familyMemberId !=0\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Family Member Name: </strong>{{claim?.healthFamilyDetails?.familyMemberName}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.reasonForDelaySubmission != undefined || claim?.healthFamilyDetails?.reasonForDelaySubmission != null\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>  Reason for Delay Submission: </strong>{{claim?.healthFamilyDetails?.reasonForDelaySubmission}} </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <div *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalizationName!='OPD' && claim?.healthFamilyDetails?.claimFor == 5\">\r\n                                    <header>Loss of Employment</header>\r\n                                    <fieldset>\r\n                                        <section>\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col col-6\">\r\n                                                    <label><strong> From Date: </strong>{{claim?.healthFamilyDetails?.loeFromDateString}}</label>\r\n                                                </div>\r\n                                                <div class=\"col col-6\">\r\n                                                    <label><strong>To Date :</strong>{{claim?.healthFamilyDetails?.loeToDateString}}</label>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col col-6\">\r\n                                                    <label><strong> Amount: </strong>{{claim?.healthFamilyDetails?.loeAmount}}</label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </section>\r\n                                    </fieldset>\r\n                                </div>\r\n                                <header>Health & Family Attachments</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <a (click)=\"viewAttachment()\" class=\"smart-form-link\">View All Attachments</a>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>View Packages</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\" *ngIf=\"selectedPackages.length>0\">\r\n                                            <table class=\"table table-striped\" [mfData]=\"selectedPackages\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th><mfDefaultSorter by=\"packageName\">Package Name</mfDefaultSorter></th>\r\n                                                        <th><mfDefaultSorter by=\"packageCode\">Package Code</mfDefaultSorter></th>\r\n                                                        <th><mfDefaultSorter by=\"ailmentName\">Ailment Name</mfDefaultSorter></th>\r\n                                                        <th><mfDefaultSorter by=\"amount\">Amount</mfDefaultSorter></th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    <tr *ngFor=\"let pak of mf.data;\">\r\n                                                        <td>{{pak.packageName}}</td>\r\n                                                        <td>{{pak.packageCode}}</td>\r\n                                                        <td>{{pak.ailmentName}}</td>\r\n                                                        <td>{{pak.amount}}</td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                                <tfoot><tr><td colspan=\"4\"><mfBootstrapPaginator></mfBootstrapPaginator></td></tr></tfoot>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </div>\r\n                            <div *ngIf=\"this.claim.disabilityDetails != null\">\r\n                                <header>Disability</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n\r\n                                                <div><strong>Claim Amount : </strong> {{claim?.disabilityDetails?.claimAmount}}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>Disability Details</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Date of release from hospital/Accident: </strong>{{claim?.disabilityDetails?.dateofReleaseString}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong>Nature of Disability : </strong> {{claim?.disabilityDetails?.natureOfDisabilityName}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Details of Disability: </strong>{{claim?.disabilityDetails?.detailsOfDisability}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\" *ngIf=\"claim?.disabilityDetails?.reasonForDelaySubmission != undefined || claim?.disabilityDetails?.reasonForDelaySubmission != null\">\r\n                                                <label><strong>Reason for Delay Submission: </strong>{{claim?.disabilityDetails?.reasonForDelaySubmission}} </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n\r\n                                </fieldset>\r\n                                <header>Disability Attachments</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <a (click)=\"viewAttachment()\" class=\"smart-form-link\">View All Attachments</a>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </div>\r\n                            <div *ngIf=\"this.claim.deathDetails != null\">\r\n                                <header>Death</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n\r\n                                                <div><strong>Claim Amount : </strong> {{claim?.deathDetails?.claimAmount}}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>Death Details</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong>Nature of Death : </strong> {{claim?.deathDetails?.natureofDeathName}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>Date of Death: </strong>{{claim?.deathDetails?.dateofDeathString}} </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Details of Death: </strong>{{claim?.deathDetails?.detailsofDeath}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Place of Death: </strong>{{claim?.deathDetails?.placeofDeath}} </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n\r\n                                </fieldset>\r\n                                <header>Death Attachments</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <a (click)=\"viewAttachment()\" class=\"smart-form-link\">View All Attachments</a>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </div>\r\n                            <header>Time Line</header>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <!-- row -->\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\" style=\"width:98%\">\r\n                                            <div class=\"well well-sm\">\r\n                                                <div class=\"smart-timeline\">\r\n                                                    <ul class=\"smart-timeline-list\">\r\n\r\n                                                        <li *ngFor=\"let item of claimsTrack\">\r\n                                                            <div class=\"smart-timeline-icon\">\r\n                                                                <i class=\"fa fa-user\"></i>\r\n                                                            </div>\r\n                                                            <div class=\"smart-timeline-time\">\r\n                                                                <small>{{formatDate(item.actionDate)}}</small>\r\n                                                            </div>\r\n                                                            <div class=\"smart-timeline-content\">\r\n                                                                <p>\r\n                                                                    <a href=\"javascript:void(0);\"><strong>{{item.userName}} - {{item.action}}</strong></a>\r\n                                                                </p>\r\n                                                                <p>\r\n                                                                    {{item.actionComments}}\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </li>\r\n\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </section>\r\n                            </fieldset>\r\n                            <footer class=\"modal-footer\">\r\n                                <a class=\"btn btn-danger\" (click)=\"onBackClaimClick()\">Cancel</a>\r\n                            </footer>\r\n                        </form>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </article>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n<div bsModal #attachmentsModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" backdrop=\"static\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"attachmentsModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Attachments</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p id=\"mesgSubmit\"></p>\r\n            </div>\r\n            <!--<div class=\"modal-footer\">\r\n            </div>-->\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #attachModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" backdrop=\"static\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"attachModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Attachment Details</h4>\r\n            </div>\r\n            <div class=\"modal-body\" style=\"max-height:500px\">\r\n                <div class=\"row\" style=\"display:inline-flex;width:100%\">\r\n                    <div style=\"width:50%;padding:5px;overflow:scroll;max-height:470px\">\r\n                        <app-claimviewdata [claimId]=\"claimId\" [claimType]=\"claimType\" [transactionId]=\"transactionId\"></app-claimviewdata>\r\n                        <!--<div *ngIf=\"claim.attachment[0].fileName.split('.')[claim.attachment[0].fileName.split('.').length-1]!='pdf'\">\r\n                            <img [src]=\"'data:image/'+claim.attachment[0].fileName.split('.')[claim.attachment[0].fileName.split('.').length-1]+';base64,'+ claim.attachment[0].fileContent\" style=\"max-width:100%\" />\r\n                        </div>\r\n                        <div *ngIf=\"claim.attachment[0].fileName.split('.')[claim.attachment[0].fileName.split('.').length-1]=='pdf'\">\r\n                            <object [attr.data]=\"claim.attachment[0].attachmenturl\" style=\"width:100%;height:400px\" type=\"application/pdf\"></object>\r\n                        </div>-->\r\n                    </div>\r\n                    <div style=\"width:50%;padding:5px;overflow:scroll;max-height:470px\">\r\n                        <accordion>\r\n                            <accordion-group heading=\"{{item.attachmentTypeString}}\" *ngFor=\"let item of attachmentList\">\r\n                                <div *ngIf=\"item.fileName.split('.')[item.fileName.split('.').length-1]!='pdf'\">\r\n                                    <img [src]=\"'data:image/'+item.fileName.split('.')[item.fileName.split('.').length-1]+';base64,'+ item.fileContent\" style=\"max-width:100%\" />\r\n                                </div>\r\n                                <div *ngIf=\"item.fileName.split('.')[item.fileName.split('.').length-1]=='pdf'\">\r\n                                    <object [attr.data]=\"item.attachmenturl\" style=\"width:100%;height:400px\" type=\"application/pdf\"></object>\r\n                                </div>\r\n                            </accordion-group>\r\n                        </accordion>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"attachModal.hide()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/claim/claim-view/claim-view.component.ts":
/*!**********************************************************!*\
  !*** ./src/app/claim/claim-view/claim-view.component.ts ***!
  \**********************************************************/
/*! exports provided: ClaimViewComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimViewComponent", function() { return ClaimViewComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var ClaimViewComponent = /** @class */ (function () {
    function ClaimViewComponent(router, route, dataService, userService, sanitizer) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.userService = userService;
        this.sanitizer = sanitizer;
        this.claim = {};
        this.educationDetails = {};
        this.beneficiary = {};
        this.claimsTrack = {};
        this.attachmentList = [];
        this.educationList = [];
        this.viewMetWithAnAccident = false;
        this.packages = [];
        this.selectedPackages = [];
        this.healthFamilyPackages = [];
        this.isPrematureClaim = false;
        //this.route$ = this.route.params.subscribe(
        //    (params: Params) => {
        //        this.claimId = params["claimId"];
        //        this.claimType = ClaimConstants.Education;
        //        this.tranctionId = params["claimRefernceNo"]
        //    }
        //);
    }
    ClaimViewComponent.prototype.ngOnDestroy = function () {
        if (this.route$)
            this.route$.unsubscribe();
    };
    ClaimViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        debugger;
        this.route$ = this.route.params.subscribe(function (params) {
            _this.claimId = params["claimId"];
            _this.claimType = params["tranctionType"];
            _this.transactionId = params["transactionId"];
            _this.mode = params["mode"];
            _this.workflowId = params["workflowId"];
        });
        this.getPackages();
        this.getClaimDetailsByClaimId(this.claimId, this.transactionId, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__["ClaimConstants"][this.claimType]);
    };
    ClaimViewComponent.prototype.getClaimDetailsByClaimId = function (id, tranctionId, claimType) {
        var _this = this;
        this.dataService
            .getClaimDetailsByClaimId(id, tranctionId, claimType)
            .subscribe(function (data) {
            debugger;
            _this.claim = data;
            if (_this.claim.educationDetails != null) {
                _this.educationList = _this.claim.educationDetails.educationDetailList;
                if (_this.claim.educationDetails.educationDetailList.length > 0) {
                    for (var i = 0; i < _this.claim.educationDetails.educationDetailList.length; i++) {
                        if (_this.claim.educationDetails.educationDetailList[i].attachmentDetailsList.length > 0) {
                            for (var j = 0; j < _this.claim.educationDetails.educationDetailList[i].attachmentDetailsList.length; j++) {
                                var attachment = _this.claim.educationDetails.educationDetailList[i].attachmentDetailsList[j];
                                if (attachment.fileName.split('.')[attachment.fileName.split('.').length - 1] == 'pdf') {
                                    attachment.attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + attachment.fileContent);
                                }
                                _this.attachmentList.push(attachment);
                            }
                        }
                    }
                }
            }
            if (_this.claim.healthFamilyDetails != null) {
                for (var j = 0; j < _this.claim.healthFamilyDetails.attachmentDTOList.length; j++) {
                    var attachment = _this.claim.healthFamilyDetails.attachmentDTOList[j];
                    if (attachment.fileName.split('.')[attachment.fileName.split('.').length - 1] == 'pdf') {
                        attachment.attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + attachment.fileContent);
                    }
                    _this.attachmentList.push(attachment);
                }
                if (_this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                    if (_this.claim.healthFamilyDetails.typeOfClaim == 5) {
                        _this.viewMetWithAnAccident = true;
                    }
                }
                var data_1 = _this.claim.healthFamilyDetails.healthFamilyPackages;
                for (var i = 0; i < data_1.length; i++) {
                    _this.packages.filter(function (x) { return x.packageID == data_1[i].packageID; })[0].isChecked = true;
                }
                _this.selectedPackages = _this.packages.filter(function (x) { return x.isChecked == true; });
            }
            if (_this.claim.disabilityDetails != null) {
                if (_this.claim.disabilityDetails.attachmentDTOList != null) {
                    for (var j = 0; j < _this.claim.disabilityDetails.attachmentDTOList.length; j++) {
                        var attachment = _this.claim.disabilityDetails.attachmentDTOList[j];
                        if (attachment.fileName.split('.')[attachment.fileName.split('.').length - 1] == 'pdf') {
                            attachment.attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + attachment.fileContent);
                        }
                        _this.attachmentList.push(attachment);
                    }
                }
            }
            if (_this.claim.deathDetails != null) {
                if (_this.claim.deathDetails.attachmentDTOList != null) {
                    for (var j = 0; j < _this.claim.deathDetails.attachmentDTOList.length; j++) {
                        var attachment = _this.claim.deathDetails.attachmentDTOList[j];
                        if (attachment.fileName.split('.')[attachment.fileName.split('.').length - 1] == 'pdf') {
                            attachment.attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + attachment.fileContent);
                        }
                        _this.attachmentList.push(attachment);
                    }
                }
            }
            if (_this.claim.providentFundDetails != null) {
                if (_this.claim.providentFundDetails.typeOfClaim != null && _this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__["PFTypeOfClaim"].Premature) {
                    _this.isPrematureClaim = true;
                }
            }
            if (_this.claim.attachment != null) {
                debugger;
                for (var k = 0; k < _this.claim.attachment.length; k++) {
                    if (_this.claim.attachment[k].fileName != null) {
                        var attachment = _this.claim.attachment[k];
                        if (attachment.fileName.split('.')[attachment.fileName.split('.').length - 1] == 'pdf') {
                            attachment.attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + attachment.fileContent);
                        }
                        _this.claim.attachment[k] = attachment;
                        _this.attachmentList.push(attachment);
                    }
                }
            }
            _this.getBenBasicDetails(_this.claim.benSno);
            _this.getClaimTrackDetailsByClaimId(_this.transactionId, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__["ClaimConstants"][_this.claimType], _this.workflowId);
            console.log(_this.claim);
            //  this.getUrlOfPdf();
        });
    };
    ClaimViewComponent.prototype.getPackages = function () {
        var _this = this;
        this.dataService
            .getPackages()
            .subscribe(function (data) {
            _this.packages = data;
            console.log(_this.packages);
            var groups = new Set(_this.packages.map(function (item) { return item.ailmentName; }));
        });
    };
    ClaimViewComponent.prototype.getBenBasicDetails = function (benNo) {
        var _this = this;
        debugger;
        this.dataService
            .getBeneficiaryBasicDetailsById(benNo)
            .subscribe(function (data) {
            _this.beneficiary = data;
            console.log(_this.beneficiary);
        });
    };
    ClaimViewComponent.prototype.viewAttachment = function () {
        this.attachModel.show();
    };
    ClaimViewComponent.prototype.Getimage = function (imageData) {
        var data = imageData.fileName.split('.')[imageData.fileName.split('.').length - 1];
        if (data.toLowerCase() == "pdf") {
            console.log(imageData.stringContent);
            return true;
        }
        else {
            return false;
        }
    };
    ClaimViewComponent.prototype.getDate = function (datestring) {
        return new Date(datestring).toLocaleDateString();
    };
    ClaimViewComponent.prototype.getClaimTrackDetailsByClaimId = function (transactionId, tranctionType, wfId) {
        var _this = this;
        this.dataService
            .getClaimTrackDetailsByTransactionId(transactionId, tranctionType, wfId)
            .subscribe(function (data) {
            _this.claimsTrack = data;
        });
    };
    ClaimViewComponent.prototype.formatDate = function (date) {
        var month_names = ["January", "February", "March",
            "April", "May", "June",
            "July", "Aug", "September",
            "October", "November", "December"];
        var dt = new Date(date);
        var day = dt.getDate();
        var month_index = dt.getMonth();
        var year = dt.getFullYear();
        return "" + day + this.nthDay(day) + " " + month_names[month_index] + " " + year;
    };
    ClaimViewComponent.prototype.nthDay = function (day) {
        if (day > 3 && day < 21)
            return 'th';
        switch (day % 10) {
            case 1: return "st";
            case 2: return "nd";
            case 3: return "rd";
            default: return "th";
        }
    };
    ClaimViewComponent.prototype.getUrlOfPdf = function (imageData) {
        this.dataService
            .getAttachment()
            .then(function (data) {
            var url = URL.createObjectURL(data);
            console.log(url);
        });
    };
    ClaimViewComponent.prototype.getPdfUrl1 = function (imageData) {
        var file = new Blob([(imageData.fileContent)], {
            type: 'application/pdf'
        });
        return file;
    };
    ClaimViewComponent.prototype.onBackClaimClick = function () {
        if (this.userService.user.userid != undefined && this.userService.user.userid != 0 && this.userService.user.userid.toString() != "") {
            if (this.mode == "referal") {
                this.router.navigate(['claim/referralclaims'], { skipLocationChange: true });
            }
            else {
                this.router.navigate(['claim/Claims'], { skipLocationChange: true });
            }
        }
        else {
            if (this.mode == "referal") {
                this.router.navigate(['claim/agentreferral'], { skipLocationChange: true });
            }
            else {
                this.router.navigate(['claim/agentclaims'], { skipLocationChange: true });
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('attachModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_4__["ModalDirective"])
    ], ClaimViewComponent.prototype, "attachModel", void 0);
    ClaimViewComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-claim-view',
            template: __webpack_require__(/*! ./claim-view.component.html */ "./src/app/claim/claim-view/claim-view.component.html"),
            styles: [__webpack_require__(/*! ./claim-view.component.css */ "./src/app/claim/claim-view/claim-view.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"], _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__["DomSanitizer"]])
    ], ClaimViewComponent);
    return ClaimViewComponent;
}());



/***/ }),

/***/ "./src/app/claim/claim.module.ts":
/*!***************************************!*\
  !*** ./src/app/claim/claim.module.ts ***!
  \***************************************/
/*! exports provided: ClaimModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimModule", function() { return ClaimModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _claimlanding_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./claimlanding.component */ "./src/app/claim/claimlanding.component.ts");
/* harmony import */ var _claim_entry_claim_entry_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./claim-entry/claim-entry.component */ "./src/app/claim/claim-entry/claim-entry.component.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _claim_view_claim_view_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./claim-view/claim-view.component */ "./src/app/claim/claim-view/claim-view.component.ts");
/* harmony import */ var _claims_claims_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./claims/claims.component */ "./src/app/claim/claims/claims.component.ts");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var angular_6_datatable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! angular-6-datatable */ "./node_modules/angular-6-datatable/index.js");
/* harmony import */ var angular_6_datatable__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(angular_6_datatable__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _pipes_grd_filter_pipe__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pipes/grd-filter.pipe */ "./src/app/claim/pipes/grd-filter.pipe.ts");
/* harmony import */ var _claim_track_claim_track_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./claim-track/claim-track.component */ "./src/app/claim/claim-track/claim-track.component.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _agent_claims_agent_claims_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./agent-claims/agent-claims.component */ "./src/app/claim/agent-claims/agent-claims.component.ts");
/* harmony import */ var _agent_claim_entry_agent_claim_entry_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./agent-claim-entry/agent-claim-entry.component */ "./src/app/claim/agent-claim-entry/agent-claim-entry.component.ts");
/* harmony import */ var _directives_number_directive__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./directives/number.directive */ "./src/app/claim/directives/number.directive.ts");
/* harmony import */ var _claim_draft_claim_draft_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./claim-draft/claim-draft.component */ "./src/app/claim/claim-draft/claim-draft.component.ts");
/* harmony import */ var _agent_draft_agent_draft_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./agent-draft/agent-draft.component */ "./src/app/claim/agent-draft/agent-draft.component.ts");
/* harmony import */ var _claims_referral_claims_referral_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./claims-referral/claims-referral.component */ "./src/app/claim/claims-referral/claims-referral.component.ts");
/* harmony import */ var _agent_referrall_agent_referrall_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./agent-referrall/agent-referrall.component */ "./src/app/claim/agent-referrall/agent-referrall.component.ts");
/* harmony import */ var ng2_pdf_viewer__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ng2-pdf-viewer */ "./node_modules/ng2-pdf-viewer/ng2-pdf-viewer.es5.js");
/* harmony import */ var _legacy_list_legacy_list_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./legacy-list/legacy-list.component */ "./src/app/claim/legacy-list/legacy-list.component.ts");
/* harmony import */ var _legacy_claim_entry_legacy_claim_entry_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./legacy-claim-entry/legacy-claim-entry.component */ "./src/app/claim/legacy-claim-entry/legacy-claim-entry.component.ts");
/* harmony import */ var _claimviewdata_claimviewdata_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./claimviewdata/claimviewdata.component */ "./src/app/claim/claimviewdata/claimviewdata.component.ts");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "./node_modules/@ng-bootstrap/ng-bootstrap/fesm5/ng-bootstrap.js");
/* harmony import */ var _agent_pf_collection_form_agent_pf_collection_form_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./agent-pf-collection-form/agent-pf-collection-form.component */ "./src/app/claim/agent-pf-collection-form/agent-pf-collection-form.component.ts");
/* harmony import */ var _agent_pf_deposit_agent_pf_deposit_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./agent-pf-deposit/agent-pf-deposit.component */ "./src/app/claim/agent-pf-deposit/agent-pf-deposit.component.ts");
/* harmony import */ var _agent_pf_deposited_list_agent_pf_deposited_list_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./agent-pf-deposited-list/agent-pf-deposited-list.component */ "./src/app/claim/agent-pf-deposited-list/agent-pf-deposited-list.component.ts");
/* harmony import */ var ng_multiselect_dropdown__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ng-multiselect-dropdown */ "./node_modules/ng-multiselect-dropdown/fesm5/ng-multiselect-dropdown.js");
/* harmony import */ var _bulkpfdeposit_bulkpfdeposit_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./bulkpfdeposit/bulkpfdeposit.component */ "./src/app/claim/bulkpfdeposit/bulkpfdeposit.component.ts");
/* harmony import */ var _bulkpfdepositlist_bulkpfdepositlist_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./bulkpfdepositlist/bulkpfdepositlist.component */ "./src/app/claim/bulkpfdepositlist/bulkpfdepositlist.component.ts");
/* harmony import */ var _bulkpfdepositcollection_list_bulkpfdepositcollection_list_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./bulkpfdepositcollection-list/bulkpfdepositcollection-list.component */ "./src/app/claim/bulkpfdepositcollection-list/bulkpfdepositcollection-list.component.ts");
/* harmony import */ var _payinslip_deposited_list_payinslip_deposited_list_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./payinslip-deposited-list/payinslip-deposited-list.component */ "./src/app/claim/payinslip-deposited-list/payinslip-deposited-list.component.ts");
/* harmony import */ var _ben_pf_details_ben_pf_details_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./ben-pf-details/ben-pf-details.component */ "./src/app/claim/ben-pf-details/ben-pf-details.component.ts");
/* harmony import */ var _legacypfdetails_legacypfdetails_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./legacypfdetails/legacypfdetails.component */ "./src/app/claim/legacypfdetails/legacypfdetails.component.ts");
/* harmony import */ var _submittedlegacypfdetails_submittedlegacypfdetails_component__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./submittedlegacypfdetails/submittedlegacypfdetails.component */ "./src/app/claim/submittedlegacypfdetails/submittedlegacypfdetails.component.ts");
/* harmony import */ var _adjustemententryform_adjustemententryform_component__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./adjustemententryform/adjustemententryform.component */ "./src/app/claim/adjustemententryform/adjustemententryform.component.ts");
/* harmony import */ var _gripsresponse_gripsresponse_component__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./gripsresponse/gripsresponse.component */ "./src/app/claim/gripsresponse/gripsresponse.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






































var routes = [
    {
        path: '',
        component: _claimlanding_component__WEBPACK_IMPORTED_MODULE_3__["ClaimLandingComponent"],
        children: [
            { path: '', redirectTo: 'Entry', pathMatch: 'full' },
            { path: 'Entry', component: _claim_entry_claim_entry_component__WEBPACK_IMPORTED_MODULE_4__["ClaimEntryComponent"] },
            { path: 'ClaimTrack', component: _claim_track_claim_track_component__WEBPACK_IMPORTED_MODULE_11__["ClaimTrackComponent"] },
            { path: 'ClaimView', component: _claim_view_claim_view_component__WEBPACK_IMPORTED_MODULE_6__["ClaimViewComponent"] },
            { path: 'ClaimView/:claimId/:claimType/:tranctionId', component: _claim_view_claim_view_component__WEBPACK_IMPORTED_MODULE_6__["ClaimViewComponent"] },
            { path: 'Entry/:claimId/:claimType', component: _claim_entry_claim_entry_component__WEBPACK_IMPORTED_MODULE_4__["ClaimEntryComponent"] },
            { path: 'Claims', component: _claims_claims_component__WEBPACK_IMPORTED_MODULE_7__["ClaimsComponent"] },
            { path: 'agentclaims', component: _agent_claims_agent_claims_component__WEBPACK_IMPORTED_MODULE_13__["AgentClaimsComponent"] },
            { path: 'agentclaimentry', component: _agent_claim_entry_agent_claim_entry_component__WEBPACK_IMPORTED_MODULE_14__["AgentClaimEntryComponent"] },
            { path: 'agentclaimentry/:claimId/:claimType', component: _agent_claim_entry_agent_claim_entry_component__WEBPACK_IMPORTED_MODULE_14__["AgentClaimEntryComponent"] },
            { path: 'claimdraft', component: _claim_draft_claim_draft_component__WEBPACK_IMPORTED_MODULE_16__["ClaimDraftComponent"] },
            { path: 'agentdraft', component: _agent_draft_agent_draft_component__WEBPACK_IMPORTED_MODULE_17__["AgentDraftComponent"] },
            { path: 'agentreferral', component: _agent_referrall_agent_referrall_component__WEBPACK_IMPORTED_MODULE_19__["AgentReferrallComponent"] },
            { path: 'referralclaims', component: _claims_referral_claims_referral_component__WEBPACK_IMPORTED_MODULE_18__["ClaimsReferralComponent"] },
            { path: 'legacylist', component: _legacy_list_legacy_list_component__WEBPACK_IMPORTED_MODULE_21__["LegacyListComponent"] },
            { path: 'legacyclaimentry', component: _legacy_claim_entry_legacy_claim_entry_component__WEBPACK_IMPORTED_MODULE_22__["LegacyClaimEntryComponent"] },
            { path: 'PfCollectionForm', component: _agent_pf_collection_form_agent_pf_collection_form_component__WEBPACK_IMPORTED_MODULE_25__["AgentPfCollectionFormComponent"] },
            { path: 'PfDeposit', component: _agent_pf_deposit_agent_pf_deposit_component__WEBPACK_IMPORTED_MODULE_26__["AgentPfDepositComponent"] },
            { path: 'PfDepositedList', component: _agent_pf_deposited_list_agent_pf_deposited_list_component__WEBPACK_IMPORTED_MODULE_27__["AgentPfDepositedListComponent"] },
            // { path: 'bulkpfdeposit', component: BulkpfdepositComponent },
            { path: 'bulkpfdepositlist', component: _bulkpfdepositlist_bulkpfdepositlist_component__WEBPACK_IMPORTED_MODULE_30__["BulkpfdepositlistComponent"] },
            { path: 'bulkpfdepositcollectionlist', component: _bulkpfdepositcollection_list_bulkpfdepositcollection_list_component__WEBPACK_IMPORTED_MODULE_31__["BulkpfdepositcollectionListComponent"] },
            { path: 'pfPayInSlipDepositedList', component: _payinslip_deposited_list_payinslip_deposited_list_component__WEBPACK_IMPORTED_MODULE_32__["PayInSlipDepositedListComponent"] },
            { path: 'benpfdetails', component: _ben_pf_details_ben_pf_details_component__WEBPACK_IMPORTED_MODULE_33__["BenPfDetailsComponent"] },
            { path: 'bulkpfdeposit', component: _legacypfdetails_legacypfdetails_component__WEBPACK_IMPORTED_MODULE_34__["LegacypfdetailsComponent"] },
            { path: 'submittedlegacypfdetails', component: _submittedlegacypfdetails_submittedlegacypfdetails_component__WEBPACK_IMPORTED_MODULE_35__["SubmittedlegacypfdetailsComponent"] },
            { path: 'adjustemententryform', component: _adjustemententryform_adjustemententryform_component__WEBPACK_IMPORTED_MODULE_36__["AdjustemententryformComponent"] },
            { path: 'gripsresponse', component: _gripsresponse_gripsresponse_component__WEBPACK_IMPORTED_MODULE_37__["GripsresponseComponent"] }
        ]
    },
];
var ClaimModule = /** @class */ (function () {
    function ClaimModule() {
    }
    ClaimModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
            imports: [
                _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["ReactiveFormsModule"], ng2_pdf_viewer__WEBPACK_IMPORTED_MODULE_20__["PdfViewerModule"], angular_6_datatable__WEBPACK_IMPORTED_MODULE_9__["DataTableModule"], ngx_bootstrap__WEBPACK_IMPORTED_MODULE_12__["ModalModule"].forRoot(), ngx_bootstrap__WEBPACK_IMPORTED_MODULE_12__["AccordionModule"].forRoot(), ngx_bootstrap__WEBPACK_IMPORTED_MODULE_12__["BsDatepickerModule"].forRoot(), _angular_router__WEBPACK_IMPORTED_MODULE_5__["RouterModule"].forChild(routes), _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_24__["NgbModule"], ng_multiselect_dropdown__WEBPACK_IMPORTED_MODULE_28__["NgMultiSelectDropDownModule"].forRoot()
            ],
            declarations: [_claim_entry_claim_entry_component__WEBPACK_IMPORTED_MODULE_4__["ClaimEntryComponent"], _directives_number_directive__WEBPACK_IMPORTED_MODULE_15__["NumberOnlyDirective"], _agent_claim_entry_agent_claim_entry_component__WEBPACK_IMPORTED_MODULE_14__["AgentClaimEntryComponent"], _agent_claims_agent_claims_component__WEBPACK_IMPORTED_MODULE_13__["AgentClaimsComponent"], _claim_view_claim_view_component__WEBPACK_IMPORTED_MODULE_6__["ClaimViewComponent"], _claimlanding_component__WEBPACK_IMPORTED_MODULE_3__["ClaimLandingComponent"], _claims_claims_component__WEBPACK_IMPORTED_MODULE_7__["ClaimsComponent"], _pipes_grd_filter_pipe__WEBPACK_IMPORTED_MODULE_10__["GrdFilterPipe"], _claim_track_claim_track_component__WEBPACK_IMPORTED_MODULE_11__["ClaimTrackComponent"], _claim_draft_claim_draft_component__WEBPACK_IMPORTED_MODULE_16__["ClaimDraftComponent"], _agent_draft_agent_draft_component__WEBPACK_IMPORTED_MODULE_17__["AgentDraftComponent"], _claims_referral_claims_referral_component__WEBPACK_IMPORTED_MODULE_18__["ClaimsReferralComponent"], _agent_referrall_agent_referrall_component__WEBPACK_IMPORTED_MODULE_19__["AgentReferrallComponent"], _legacy_list_legacy_list_component__WEBPACK_IMPORTED_MODULE_21__["LegacyListComponent"], _legacy_claim_entry_legacy_claim_entry_component__WEBPACK_IMPORTED_MODULE_22__["LegacyClaimEntryComponent"], _claimviewdata_claimviewdata_component__WEBPACK_IMPORTED_MODULE_23__["ClaimviewdataComponent"], _agent_pf_collection_form_agent_pf_collection_form_component__WEBPACK_IMPORTED_MODULE_25__["AgentPfCollectionFormComponent"], _agent_pf_deposit_agent_pf_deposit_component__WEBPACK_IMPORTED_MODULE_26__["AgentPfDepositComponent"], _agent_pf_deposited_list_agent_pf_deposited_list_component__WEBPACK_IMPORTED_MODULE_27__["AgentPfDepositedListComponent"], _bulkpfdeposit_bulkpfdeposit_component__WEBPACK_IMPORTED_MODULE_29__["BulkpfdepositComponent"], _bulkpfdepositlist_bulkpfdepositlist_component__WEBPACK_IMPORTED_MODULE_30__["BulkpfdepositlistComponent"], _bulkpfdepositcollection_list_bulkpfdepositcollection_list_component__WEBPACK_IMPORTED_MODULE_31__["BulkpfdepositcollectionListComponent"], _payinslip_deposited_list_payinslip_deposited_list_component__WEBPACK_IMPORTED_MODULE_32__["PayInSlipDepositedListComponent"], _ben_pf_details_ben_pf_details_component__WEBPACK_IMPORTED_MODULE_33__["BenPfDetailsComponent"], _legacypfdetails_legacypfdetails_component__WEBPACK_IMPORTED_MODULE_34__["LegacypfdetailsComponent"], _submittedlegacypfdetails_submittedlegacypfdetails_component__WEBPACK_IMPORTED_MODULE_35__["SubmittedlegacypfdetailsComponent"], _adjustemententryform_adjustemententryform_component__WEBPACK_IMPORTED_MODULE_36__["AdjustemententryformComponent"], _gripsresponse_gripsresponse_component__WEBPACK_IMPORTED_MODULE_37__["GripsresponseComponent"]],
            providers: [_services_claim_data_service__WEBPACK_IMPORTED_MODULE_8__["ClaimDataService"]]
        })
    ], ClaimModule);
    return ClaimModule;
}());



/***/ }),

/***/ "./src/app/claim/claimlanding.component.html":
/*!***************************************************!*\
  !*** ./src/app/claim/claimlanding.component.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<router-outlet></router-outlet>"

/***/ }),

/***/ "./src/app/claim/claimlanding.component.ts":
/*!*************************************************!*\
  !*** ./src/app/claim/claimlanding.component.ts ***!
  \*************************************************/
/*! exports provided: ClaimLandingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimLandingComponent", function() { return ClaimLandingComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ClaimLandingComponent = /** @class */ (function () {
    function ClaimLandingComponent(router) {
        this.router = router;
    }
    ClaimLandingComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-claimlanding',
            template: __webpack_require__(/*! ./claimlanding.component.html */ "./src/app/claim/claimlanding.component.html"),
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], ClaimLandingComponent);
    return ClaimLandingComponent;
}());



/***/ }),

/***/ "./src/app/claim/claims-referral/claims-referral.component.css":
/*!*********************************************************************!*\
  !*** ./src/app/claim/claims-referral/claims-referral.component.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/claims-referral/claims-referral.component.html":
/*!**********************************************************************!*\
  !*** ./src/app/claim/claims-referral/claims-referral.component.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2> Refer Claims </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n                        <div class=\"ssv-search\">\r\n                            <input type=\"text\" [(ngModel)]=\"claimReferenceNoText\" placeholder=\"Claim Reference No Search..\" class=\"advancedSearchTextbox\" NumbersOnly minlength=\"12\" maxlength=\"12\">\r\n                            <button (click)=\"GetResults()\"><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n                        <p></p>\r\n                        <table class=\"table table-striped\" [mfData]=\"claimsData\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimRefernceNo\">Claim Reference No</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"submittedDate\">Submission Date</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"entryPointName\">Mode</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimType\">Category</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimAmount\">Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"statusName\">Status</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"lastActionDateString\">Last Action</mfDefaultSorter>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let claims of mf.data|grdFilter: { claimRefernceNo: searchText,submittedDateString: searchText, claimAmount: searchText, claimType: searchText,\r\n                                       statusName: searchText, lastActionDateString: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <a (click)=\"onEditClaimClick(claims)\" *ngIf=\"claims.isEdit\" title=\"Edit\" class=\"txt-color-red\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n                                        <a (click)=\"onViewClaimClick(claims)\" *ngIf=\"!claims.isEdit\" title=\"View\" class=\"txt-color-red\"><i class=\"fa fa-eye\"></i></a>\r\n                                        <a (click)=\"downloadRecept(claims)\" title=\"Receipt\" class=\"txt-color-red\"><i class=\"fa fa-file-pdf-o\"></i></a>\r\n                                        <a (click)=\"onTrackClaimClick(claims)\" title=\"Track\" class=\"txt-color-red\"><i class=\"fa fa-recycle\"></i></a>\r\n                                    </td>\r\n                                    <td>{{claims.claimRefernceNo}}</td>\r\n                                    <td>{{claims.submittedDateString}}</td>\r\n                                    <td>{{claims.entryPointName}}</td>\r\n                                    <td>{{getTypeName(claims.claimType)}}</td>\r\n                                    <td>{{claims.claimAmount}}</td>\r\n                                    <td>{{claims.statusName}}</td>\r\n                                    <td>{{claims.lastActionDateString}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n\r\n\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"9\">\r\n                                        <div *ngIf=\"claimsData.length>0\">\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                            <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</section>"

/***/ }),

/***/ "./src/app/claim/claims-referral/claims-referral.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/claim/claims-referral/claims-referral.component.ts ***!
  \********************************************************************/
/*! exports provided: ClaimsReferralComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimsReferralComponent", function() { return ClaimsReferralComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var ClaimsReferralComponent = /** @class */ (function () {
    //Paging props end
    function ClaimsReferralComponent(router, dataService, userService) {
        this.router = router;
        this.dataService = dataService;
        this.userService = userService;
        this.claimsData = [];
        this.p = 1;
        this.order = 'description';
        this.reverse = false;
        //Paging props start
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
    }
    ClaimsReferralComponent.prototype.setOrder = function (value) {
        if (this.order === value) {
            this.reverse = !this.reverse;
        }
    };
    ClaimsReferralComponent.prototype.getTypeName = function (claimType) {
        if (_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["ClaimConstants"][claimType] == 2) {
            return "Health & Family";
        }
        return claimType;
    };
    ClaimsReferralComponent.prototype.ngOnInit = function () {
        //Todo: change parameters 
        this.getReferralClaimsByBenID(this.userService.user.userid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Beneficiary, this.userService.user.userTpe, "0", this.page, this.pageSize);
    };
    ClaimsReferralComponent.prototype.onChangePage = function (pageOfItems) {
        // update current page of items
        this.pageOfItems = pageOfItems;
    };
    ClaimsReferralComponent.prototype.getReferralClaimsByBenID = function (id, entrypoint, userType, claimRefNo, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getAllReferralClaimsByBenficiary(id, entrypoint, userType, claimRefNo, pageNo, pageSize)
            .subscribe(function (data) {
            _this.claimsData = data.results;
            _this.totalRows = data.rowCount;
            console.log(data);
        });
    };
    ClaimsReferralComponent.prototype.onEditClaimClick = function (item) {
        this.router.navigate(['claim/Entry', { claimId: item.claimId, tranctionType: item.claimType, claimStatus: item.statusId, mode: "referal" }], { skipLocationChange: true });
    };
    ClaimsReferralComponent.prototype.onViewClaimClick = function (item) {
        this.router.navigate(['claim/ClaimView', { claimId: item.claimId, tranctionType: item.claimType, transactionId: item.transactionId, mode: "referal", workflowId: _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["WorkflowTrans"].workflowreferral }], { skipLocationChange: true });
    };
    ClaimsReferralComponent.prototype.getDate = function (datestring) {
        return new Date(datestring).toLocaleDateString();
    };
    ClaimsReferralComponent.prototype.downloadRecept = function (claim) {
        this.dataService
            .downloadReceipt(claim.benName, claim.ssin, claim.claimRefernceNo, claim.claimAmount, this.getTypeName(claim.claimType))
            .then(function (data) {
            var dd = data;
            var url = window.URL.createObjectURL(data);
            window.open(url);
        });
    };
    ClaimsReferralComponent.prototype.onTrackClaimClick = function (item) {
        this.router.navigate(['claim/ClaimTrack', { transactionId: item.transactionId, tranctionType: item.claimType, workflowId: _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["WorkflowTrans"].workflow, mode: "referal" }], { skipLocationChange: true });
        //this.router.navigate(['claim/ClaimTrack', { transactionId: item.transactionId, tranctionType: item.claimType, workflowId: WorkflowTrans.workflowreferral }], { skipLocationChange: true });
    };
    ClaimsReferralComponent.prototype.changepage = function (page) {
        this.getReferralClaimsByBenID(this.userService.user.userid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Beneficiary, this.userService.user.userTpe, "0", this.page, this.pageSize);
    };
    ClaimsReferralComponent.prototype.GetResults = function () {
        if (this.claimReferenceNoText != null && this.claimReferenceNoText != undefined && this.claimReferenceNoText != "")
            this.strClaimRefNo = this.claimReferenceNoText.trim();
        else
            this.strClaimRefNo = "0";
        //this.dataService
        //    .getSearchAllReferralClaimsByBenficiary(this.userService.user.userid, EntryPoint.Beneficiary, this.userService.user.userTpe, this.strSSIN, this.strClaimRefNo, pagination.pageNo, pagination.pageSize)
        //    .subscribe((data: any) => {
        //        this.claimsData = data.results;
        //        this.totalRows = data.rowCount;
        //    });
        this.getReferralClaimsByBenID(this.userService.user.userid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Beneficiary, this.userService.user.userTpe, this.strClaimRefNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize);
    };
    ClaimsReferralComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-claims-referral',
            template: __webpack_require__(/*! ./claims-referral.component.html */ "./src/app/claim/claims-referral/claims-referral.component.html"),
            styles: [__webpack_require__(/*! ./claims-referral.component.css */ "./src/app/claim/claims-referral/claims-referral.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], ClaimsReferralComponent);
    return ClaimsReferralComponent;
}());



/***/ }),

/***/ "./src/app/claim/claims/claims.component.css":
/*!***************************************************!*\
  !*** ./src/app/claim/claims/claims.component.css ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "@import \"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\";\r\n@import \"//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\";\r\n"

/***/ }),

/***/ "./src/app/claim/claims/claims.component.html":
/*!****************************************************!*\
  !*** ./src/app/claim/claims/claims.component.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>Claim Status </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body\" *ngIf=\"IsBeneficiary\">\r\n                        <strong>Claim Utilization Details:</strong>\r\n                        <table id=\"datatable_fixed_column\" class=\"table table-striped table-bordered\" width=\"100%\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Claim Type</th>\r\n                                    <th>Annual Limit</th>\r\n                                    <th>Claim Amount</th>\r\n                                    <th>Approved Amount</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let data of UtilizationDetails\">\r\n                                    <td>{{data.claimName}}</td>\r\n                                    <td>{{data.annualLimit}}</td>\r\n                                    <td>{{data.claimAmount}}</td>\r\n                                    <td>{{data.approvedAmount}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div class=\"widget-body no-padding\">\r\n                        <!--<div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>-->\r\n                        <div class=\"ssv-search\">\r\n                            <input type=\"text\" [(ngModel)]=\"claimReferenceNoText\" placeholder=\"Claim Reference No Search..\" class=\"advancedSearchTextbox\" NumbersOnly minlength=\"12\" maxlength=\"12\">\r\n                            <button (click)=\"GetResults()\"><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n                        <p></p>\r\n                        <table class=\"table table-striped\" [mfData]=\"claimsData\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimRefernceNo\">Claim Reference No</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"submittedDate\">Submission Date</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"entryPointName\">Mode</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimType\">Category</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimAmount\">Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"statusName\">Status</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"lastActionDate\">Last Action</mfDefaultSorter>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let claims of mf.data|grdFilter: { claimRefernceNo: searchText,submittedDateString: searchText, claimAmount: searchText, claimType: searchText,\r\n                                       statusName: searchText, lastActionDateString: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <a (click)=\"onEditClaimClick(claims)\" *ngIf=\"claims.isEdit\" title=\"Edit\" class=\"txt-color-red\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n                                        <a (click)=\"onViewClaimClick(claims)\" *ngIf=\"!claims.isEdit\" title=\"View\" class=\"txt-color-red\"><i class=\"fa fa-eye\"></i></a>\r\n                                        <a (click)=\"downloadRecept(claims)\" title=\"Receipt\" class=\"txt-color-red\"><i class=\"fa fa-file-pdf-o\"></i></a>\r\n                                        <a (click)=\"onTrackClaimClick(claims)\" title=\"Track\" class=\"txt-color-red\"><i class=\"fa fa-recycle\"></i></a>\r\n                                    </td>\r\n                                    <td>{{claims.claimRefernceNo}}</td>\r\n                                    <td>{{claims.submittedDateString}}</td>\r\n                                    <td>{{claims.entryPointName}}</td>\r\n                                    <td>{{getTypeName(claims.claimType)}}</td>\r\n                                    <td>{{claims.claimAmount}}</td>\r\n                                    <td>{{claims.statusName}}</td>\r\n                                    <td>{{claims.lastActionDateString}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n\r\n\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"9\">\r\n                                        <div *ngIf=\"claimsData.length>0\">\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                            <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</section>"

/***/ }),

/***/ "./src/app/claim/claims/claims.component.ts":
/*!**************************************************!*\
  !*** ./src/app/claim/claims/claims.component.ts ***!
  \**************************************************/
/*! exports provided: ClaimsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimsComponent", function() { return ClaimsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var ClaimsComponent = /** @class */ (function () {
    //Paging props end
    function ClaimsComponent(router, dataService, userService) {
        this.router = router;
        this.dataService = dataService;
        this.userService = userService;
        this.claimsData = [];
        this.p = 1;
        this.order = 'description';
        this.reverse = false;
        this.IsBeneficiary = false;
        this.UtilizationDetails = [];
        //Paging props start
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
    }
    ClaimsComponent.prototype.setOrder = function (value) {
        if (this.order === value) {
            this.reverse = !this.reverse;
        }
    };
    ClaimsComponent.prototype.ngOnInit = function () {
        //this.getClaimsByBenID(14843, EntryPoint.Agent);
        this.getClaimsByBenID(this.userService.user.userid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Beneficiary, this.userService.user.userTpe, "0", this.page, this.pageSize);
    };
    ClaimsComponent.prototype.onChangePage = function (pageOfItems) {
        // update current page of items
        this.pageOfItems = pageOfItems;
    };
    ClaimsComponent.prototype.getTypeName = function (claimType) {
        if (_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["ClaimConstants"][claimType] == 2) {
            return "Health & Family";
        }
        return claimType;
    };
    ClaimsComponent.prototype.getClaimsByBenID = function (id, entrypoint, userType, claimRefNo, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getClaimsByBenficiary(id, entrypoint, userType, claimRefNo, pageNo, pageSize)
            .subscribe(function (data) {
            _this.claimsData = data.results;
            _this.totalRows = data.rowCount;
            if (_this.userService.user.userTpe == "10") {
                _this.IsBeneficiary = true;
                _this.getClaimUtilizationDetails();
            }
            console.log(data);
        });
    };
    ClaimsComponent.prototype.onEditClaimClick = function (item) {
        this.router.navigate(['claim/Entry', { claimId: item.claimId, tranctionType: item.claimType, claimStatus: item.statusId }], { skipLocationChange: true });
    };
    ClaimsComponent.prototype.onViewClaimClick = function (item) {
        this.router.navigate(['claim/ClaimView', { claimId: item.claimId, tranctionType: item.claimType, transactionId: item.transactionId, mode: "claim", workflowId: _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["WorkflowTrans"].workflow }], { skipLocationChange: true });
    };
    ClaimsComponent.prototype.getDate = function (datestring) {
        return new Date(datestring).toLocaleDateString();
    };
    ClaimsComponent.prototype.downloadRecept = function (claim) {
        this.dataService
            .downloadReceipt(claim.benName, claim.ssin, claim.claimRefernceNo, claim.claimAmount, this.getTypeName(claim.claimType))
            .then(function (data) {
            var dd = data;
            var url = window.URL.createObjectURL(data);
            window.open(url);
        });
    };
    ClaimsComponent.prototype.onTrackClaimClick = function (item) {
        this.router.navigate(['claim/ClaimTrack', { transactionId: item.transactionId, tranctionType: item.claimType, workflowId: _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["WorkflowTrans"].workflow }], { skipLocationChange: true });
    };
    ClaimsComponent.prototype.getClaimUtilizationDetails = function () {
        var _this = this;
        this.dataService
            .getClaimConfigurationMaster()
            .subscribe(function (data) {
            _this.group = [];
            _this.result = [];
            var groups = new Set(_this.claimsData.map(function (item) { return item.claimType; }));
            groups.forEach(function (g) {
                return _this.group.push({
                    name: g,
                    values: _this.claimsData.filter(function (i) { return i.claimType === g; })
                });
            });
            for (var i = 0; i < _this.group.length; i++) {
                var sumClaimAmount = 0;
                var sumApprovedAmount = 0;
                for (var j = 0; j < _this.group[i].values.length; j++) {
                    sumClaimAmount += _this.group[i].values[j].claimAmount;
                    sumApprovedAmount += _this.group[i].values[j].approvedAmount;
                }
                _this.result.push({
                    claimName: _this.group[i].name,
                    claimAmount: sumClaimAmount,
                    approvedAmount: sumApprovedAmount
                });
            }
            for (var k = 0; k < data.length; k++) {
                var isAdd = false;
                for (var l = 0; l < _this.result.length; l++) {
                    if (data[k].claimName == _this.result[l].claimName) {
                        var test = __assign({}, data[k], _this.result[l]);
                        _this.UtilizationDetails.push({
                            claimName: test.claimName,
                            claimAmount: test.claimAmount,
                            approvedAmount: test.approvedAmount,
                            annualLimit: test.annualLimit
                        });
                        isAdd = true;
                        break;
                    }
                }
                if (!isAdd) {
                    _this.UtilizationDetails.push({
                        claimName: data[k].claimName,
                        claimAmount: 0,
                        approvedAmount: 0,
                        annualLimit: data[k].annualLimit
                    });
                }
            }
        });
    };
    ClaimsComponent.prototype.changepage = function (page) {
        this.getClaimsByBenID(this.userService.user.userid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Beneficiary, this.userService.user.userTpe, "0", this.page, this.pageSize);
    };
    ClaimsComponent.prototype.GetResults = function () {
        if (this.claimReferenceNoText != null && this.claimReferenceNoText != undefined && this.claimReferenceNoText != "")
            this.strClaimRefNo = this.claimReferenceNoText.trim();
        else
            this.strClaimRefNo = "0";
        //this.dataService
        //    .getSearchClaimsByBenficiary(this.userService.user.deptUserid, EntryPoint.Beneficiary, this.userService.user.userTpe, this.strSSIN, this.strClaimRefNo, pagination.pageNo, pagination.pageSize)
        //    .subscribe((data: any) => {
        //        this.claimsData = data.results;
        //        this.totalRows = data.rowCount;
        //    });
        this.getClaimsByBenID(this.userService.user.userid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["EntryPoint"].Beneficiary, this.userService.user.userTpe, this.strClaimRefNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize);
    };
    ClaimsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-claims',
            template: __webpack_require__(/*! ./claims.component.html */ "./src/app/claim/claims/claims.component.html"),
            styles: [__webpack_require__(/*! ./claims.component.css */ "./src/app/claim/claims/claims.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_1__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], ClaimsComponent);
    return ClaimsComponent;
}());



/***/ }),

/***/ "./src/app/claim/claimviewdata/claimviewdata.component.css":
/*!*****************************************************************!*\
  !*** ./src/app/claim/claimviewdata/claimviewdata.component.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/claimviewdata/claimviewdata.component.html":
/*!******************************************************************!*\
  !*** ./src/app/claim/claimviewdata/claimviewdata.component.html ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"widget-grid\" class=\"\">\r\n\r\n\r\n    <div class=\"row\">\r\n        <article class=\"col-sm-12 col-md-12 col-lg-12 nocollapse\">\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>Claim Entry View </h2>\r\n                </header>\r\n\r\n                <div>\r\n\r\n                    <!-- widget edit box -->\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n                    <!-- end widget edit box -->\r\n                    <!-- widget content -->\r\n                    <div class=\"widget-body no-padding\">\r\n\r\n                        <!-- Success states for elements -->\r\n                        <form class=\"smart-form smart-form-main\">\r\n                            <header>Beneficiary Details</header>\r\n\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Name: </strong>{{beneficiary?.benFullName}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>SSIN: </strong>{{beneficiary?.ssI_Number}}</label>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Bank Name: </strong>{{beneficiary?.benBankName}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Account No: </strong>{{beneficiary?.benBankAccNo}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>IFSC Code: </strong>{{beneficiary?.benBankIfscCode}}</label>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label><strong>Branch: </strong>{{beneficiary?.benBankBranch}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n\r\n                            </fieldset>\r\n                            <div *ngIf=\"claim.providentFundDetails != null\">\r\n                                <header>Provident Fund</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong> PF No.: </strong>{{claim.providentFundDetails.pfno}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong> Claim Amount:</strong> {{claim.providentFundDetails.claimAmount}} /-\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong>  Date of Maturity:</strong> {{claim.providentFundDetails.maturityDateString}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong>  Locking Period Up-to:</strong> {{claim.providentFundDetails.lockingPeriodDateString}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6 \">\r\n                                                <label>\r\n                                                    <strong> Type of Claim:</strong> {{claim.providentFundDetails.typeOfClaimName}}\r\n                                                </label>\r\n\r\n                                            </div>\r\n                                            <div class=\"col col-6 \" *ngIf=\"isPrematureClaim\">\r\n                                                <label>\r\n                                                    <strong> Reason for Preclosure:</strong> {{claim.providentFundDetails.reasonForPreClosure}}\r\n                                                </label>\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </div>\r\n                            <div *ngIf=\"claim.educationDetails != null\">\r\n                                <header>Education</header>\r\n\r\n                                <fieldset>\r\n\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n\r\n                                                <div><strong>Claim Amount : </strong> {{claim?.educationDetails?.claimAmount}}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>Dependent Details</header>\r\n                                <fieldset>\r\n                                    <section *ngFor=\"let detail of educationList\">\r\n\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Name of the Student: </strong>{{detail?.dependentName}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label> <strong>Name of the Institution: </strong> {{detail?.institutionName}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Name of the Principal/Head Master of the institution:</strong>{{detail?.institutionPrinicipleName}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label> <strong> Contact Number of the Institution: </strong>{{detail?.institutionContact}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Registration No./Roll No. of last exam passed: </strong>{{detail?.registrationRollNo}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Year of Examination: </strong>{{detail?.year}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Date of Admission: </strong>{{detail?.dateofAdmissionString}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Last Exam Passed: </strong>{{detail?.lastExamPassedName}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Presently Reading: </strong>{{detail?.presentlyReadingName}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>Eligible Amount :</strong>{{detail?.eligibleAmount}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n\r\n                            </div>\r\n                            <div *ngIf=\"this.claim.healthFamilyDetails != null\">\r\n                                <header>Health & Family</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n\r\n                                                <div><strong>Claim Amount : </strong> {{claim?.healthFamilyDetails?.claimAmount}}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>Health & Family Details</header>\r\n                                <fieldset>\r\n                                    <section>\r\n\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Type of Claim: </strong>{{claim?.healthFamilyDetails?.typeOfClaimName}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong>Hospital : </strong> {{claim?.healthFamilyDetails?.hospitalName}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong> Hospitalization/OPD:</strong>{{claim?.healthFamilyDetails?.typeOfHospitalizationName}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong> Patient Id: </strong>{{claim?.healthFamilyDetails?.patientId}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalization==2\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Name of Disease: </strong>{{claim?.healthFamilyDetails?.nameOfTheDiseaseString}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\" *ngIf=\"claim?.healthFamilyDetails?.nameOfTheDisease==56\">\r\n                                                <label><strong> Name of clinical test: </strong>{{claim?.healthFamilyDetails?.nameOfClinicalTestString}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"viewMetWithAnAccident\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong> Met with an Accident:</strong>{{claim?.healthFamilyDetails?.isAccident}}\r\n                                                </label>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Cost of Clinical Test: </strong>{{claim?.healthFamilyDetails?.costOfClinicalTest}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Cost of Medicine: </strong>{{claim?.healthFamilyDetails?.costOfMedicine}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalization==2\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Date of First Appointment: </strong>{{claim?.healthFamilyDetails?.firstAppointmentDateString}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>Claim for: </strong>{{claim?.healthFamilyDetails?.claimForName}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\" *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalization==1\">\r\n                                                <label><strong> Cost of Hospitalization: </strong>{{claim?.healthFamilyDetails?.costOfHospitalization}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalization==1\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Date of Admission to Hospital: </strong>{{claim?.healthFamilyDetails?.admittedDateString}}</label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>Date of Discharge :</strong>{{claim?.healthFamilyDetails?.dischargeDateString}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.familyMemberId != undefined && claim?.healthFamilyDetails?.familyMemberId !=0\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Family Member Name: </strong>{{claim?.healthFamilyDetails?.familyMemberName}}</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\" *ngIf=\"claim?.healthFamilyDetails?.reasonForDelaySubmission != undefined || claim?.healthFamilyDetails?.reasonForDelaySubmission != null\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>  Reason for Delay Submission: </strong>{{claim?.healthFamilyDetails?.reasonForDelaySubmission}} </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <div *ngIf=\"claim?.healthFamilyDetails?.typeOfHospitalizationName!='OPD' && claim?.healthFamilyDetails?.claimFor == 5\">\r\n                                    <header>Loss of Employment</header>\r\n                                    <fieldset>\r\n                                        <section>\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col col-6\">\r\n                                                    <label><strong> From Date: </strong>{{claim?.healthFamilyDetails?.loeFromDateString}}</label>\r\n                                                </div>\r\n                                                <div class=\"col col-6\">\r\n                                                    <label><strong>To Date :</strong>{{claim?.healthFamilyDetails?.loeToDateString}}</label>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col col-6\">\r\n                                                    <label><strong> Amount: </strong>{{claim?.healthFamilyDetails?.loeAmount}}</label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </section>\r\n                                    </fieldset>\r\n                                </div>\r\n\r\n                                <header>View Packages</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\" *ngIf=\"selectedPackages.length>0\">\r\n                                            <table class=\"table table-striped\" [mfData]=\"selectedPackages\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th><mfDefaultSorter by=\"packageName\">Package Name</mfDefaultSorter></th>\r\n                                                        <th><mfDefaultSorter by=\"packageCode\">Package Code</mfDefaultSorter></th>\r\n                                                        <th><mfDefaultSorter by=\"ailmentName\">Ailment Name</mfDefaultSorter></th>\r\n                                                        <th><mfDefaultSorter by=\"amount\">Amount</mfDefaultSorter></th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    <tr *ngFor=\"let pak of mf.data;\">\r\n                                                        <td>{{pak.packageName}}</td>\r\n                                                        <td>{{pak.packageCode}}</td>\r\n                                                        <td>{{pak.ailmentName}}</td>\r\n                                                        <td>{{pak.amount}}</td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                                <tfoot><tr><td colspan=\"4\"><mfBootstrapPaginator></mfBootstrapPaginator></td></tr></tfoot>\r\n                                            </table>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                            </div>\r\n                            <div *ngIf=\"this.claim.disabilityDetails != null\">\r\n                                <header>Disability</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n\r\n                                                <div><strong>Claim Amount : </strong> {{claim?.disabilityDetails?.claimAmount}}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>Disability Details</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Date of release from hospital/Accident: </strong>{{claim?.disabilityDetails?.dateofReleaseString}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong>Nature of Disability : </strong> {{claim?.disabilityDetails?.natureOfDisabilityName}}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Details of Disability: </strong>{{claim?.disabilityDetails?.detailsOfDisability}} </label>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </section>\r\n\r\n                                </fieldset>\r\n                            </div>\r\n                            <div *ngIf=\"this.claim.deathDetails != null\">\r\n                                <header>Death</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n\r\n                                                <div><strong>Claim Amount : </strong> {{claim?.deathDetails?.claimAmount}}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                </fieldset>\r\n                                <header>Death Details</header>\r\n                                <fieldset>\r\n                                    <section>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label>\r\n                                                    <strong>Nature of Death : </strong> {{claim?.deathDetails?.natureofDeathName}}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong>Date of Death: </strong>{{claim?.deathDetails?.dateofDeathString}} </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Details of Death: </strong>{{claim?.deathDetails?.detailsofDeath}} </label>\r\n                                            </div>\r\n                                            <div class=\"col col-6\">\r\n                                                <label><strong> Place of Death: </strong>{{claim?.deathDetails?.placeofDeath}} </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n\r\n                                </fieldset>\r\n                            </div>\r\n                        </form>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </article>\r\n\r\n    </div>\r\n\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/claim/claimviewdata/claimviewdata.component.ts":
/*!****************************************************************!*\
  !*** ./src/app/claim/claimviewdata/claimviewdata.component.ts ***!
  \****************************************************************/
/*! exports provided: ClaimviewdataComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimviewdataComponent", function() { return ClaimviewdataComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var ClaimviewdataComponent = /** @class */ (function () {
    function ClaimviewdataComponent(router, route, dataService, userService, sanitizer) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.userService = userService;
        this.sanitizer = sanitizer;
        this.claim = {};
        this.educationDetails = {};
        this.beneficiary = {};
        this.claimsTrack = {};
        this.attachmentList = [];
        this.educationList = [];
        this.viewMetWithAnAccident = false;
        this.packages = [];
        this.selectedPackages = [];
        this.healthFamilyPackages = [];
        this.isPrematureClaim = false;
    }
    ClaimviewdataComponent.prototype.ngOnInit = function () {
        this.getPackages();
        this.getClaimDetailsByClaimId(this.claimId, this.transactionId, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__["ClaimConstants"][this.claimType]);
    };
    ClaimviewdataComponent.prototype.getClaimDetailsByClaimId = function (id, tranctionId, claimType) {
        var _this = this;
        this.dataService
            .getClaimDetailsByClaimId(id, tranctionId, claimType)
            .subscribe(function (data) {
            _this.claim = data;
            if (_this.claim.educationDetails != null) {
                _this.educationList = _this.claim.educationDetails.educationDetailList;
                if (_this.claim.educationDetails.educationDetailList.length > 0) {
                    for (var i = 0; i < _this.claim.educationDetails.educationDetailList.length; i++) {
                        if (_this.claim.educationDetails.educationDetailList[i].attachmentDetailsList.length > 0) {
                            for (var j = 0; j < _this.claim.educationDetails.educationDetailList[i].attachmentDetailsList.length; j++) {
                                var attachment = _this.claim.educationDetails.educationDetailList[i].attachmentDetailsList[j];
                                if (attachment.fileName.split('.')[attachment.fileName.split('.').length - 1] == 'pdf') {
                                    attachment.attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + attachment.fileContent);
                                }
                                _this.attachmentList.push(attachment);
                            }
                        }
                    }
                }
            }
            if (_this.claim.healthFamilyDetails != null) {
                for (var j = 0; j < _this.claim.healthFamilyDetails.attachmentDTOList.length; j++) {
                    var attachment = _this.claim.healthFamilyDetails.attachmentDTOList[j];
                    if (attachment.fileName.split('.')[attachment.fileName.split('.').length - 1] == 'pdf') {
                        attachment.attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + attachment.fileContent);
                    }
                    _this.attachmentList.push(attachment);
                }
                if (_this.claim.healthFamilyDetails.typeOfHospitalization == 1) {
                    if (_this.claim.healthFamilyDetails.typeOfClaim == 5) {
                        _this.viewMetWithAnAccident = true;
                    }
                }
                var data_1 = _this.claim.healthFamilyDetails.healthFamilyPackages;
                for (var i = 0; i < data_1.length; i++) {
                    _this.packages.filter(function (x) { return x.packageID == data_1[i].packageID; })[0].isChecked = true;
                }
                _this.selectedPackages = _this.packages.filter(function (x) { return x.isChecked == true; });
            }
            if (_this.claim.providentFundDetails != null) {
                if (_this.claim.providentFundDetails.typeOfClaim != null && _this.claim.providentFundDetails.typeOfClaim == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__["PFTypeOfClaim"].Premature) {
                    _this.isPrematureClaim = true;
                }
            }
            if (_this.claim.attachment != null) {
                for (var k = 0; k < _this.claim.attachment.length; k++) {
                    var attachment = _this.claim.attachment[k];
                    if (attachment.fileName.split('.')[attachment.fileName.split('.').length - 1] == 'pdf') {
                        attachment.attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + attachment.fileContent);
                    }
                    _this.claim.attachment[k] = attachment;
                    // this.attachmentList.push(attachment);
                }
            }
            _this.getBenBasicDetails(_this.claim.benSno);
            console.log(_this.claim);
            //  this.getUrlOfPdf();
        });
    };
    ClaimviewdataComponent.prototype.getPackages = function () {
        var _this = this;
        this.dataService
            .getPackages()
            .subscribe(function (data) {
            _this.packages = data;
            console.log(_this.packages);
            var groups = new Set(_this.packages.map(function (item) { return item.ailmentName; }));
        });
    };
    ClaimviewdataComponent.prototype.getBenBasicDetails = function (benNo) {
        var _this = this;
        this.dataService
            .getBeneficiaryBasicDetailsById(benNo)
            .subscribe(function (data) {
            _this.beneficiary = data;
            console.log(_this.beneficiary);
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Number)
    ], ClaimviewdataComponent.prototype, "claimId", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Number)
    ], ClaimviewdataComponent.prototype, "claimType", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Number)
    ], ClaimviewdataComponent.prototype, "transactionId", void 0);
    ClaimviewdataComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-claimviewdata',
            template: __webpack_require__(/*! ./claimviewdata.component.html */ "./src/app/claim/claimviewdata/claimviewdata.component.html"),
            styles: [__webpack_require__(/*! ./claimviewdata.component.css */ "./src/app/claim/claimviewdata/claimviewdata.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"], _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__["DomSanitizer"]])
    ], ClaimviewdataComponent);
    return ClaimviewdataComponent;
}());



/***/ }),

/***/ "./src/app/claim/directives/number.directive.ts":
/*!******************************************************!*\
  !*** ./src/app/claim/directives/number.directive.ts ***!
  \******************************************************/
/*! exports provided: NumberOnlyDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberOnlyDirective", function() { return NumberOnlyDirective; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var NumberOnlyDirective = /** @class */ (function () {
    function NumberOnlyDirective(el) {
        var _this = this;
        this.el = el;
        this.DIGITS_REGEXP = new RegExp(/\D/g);
        // Sanatize clipboard by removing any non-numeric input after pasting
        this.el.nativeElement.onpaste = function (e) {
            e.preventDefault();
            var text;
            var clp = (e.originalEvent || e).clipboardData;
            if (clp === undefined || clp === null) {
                text = window.clipboardData.getData('text') || '';
                if (text !== '') {
                    text = text.replace(_this.DIGITS_REGEXP, '');
                    if (window.getSelection) {
                        var newNode = document.createElement('span');
                        newNode.innerHTML = text;
                        window.getSelection().getRangeAt(0).insertNode(newNode);
                    }
                    else {
                        window.selection.createRange().pasteHTML(text);
                    }
                }
            }
            else {
                text = clp.getData('text/plain') || '';
                if (text !== '') {
                    text = text.replace(_this.DIGITS_REGEXP, '');
                    document.execCommand('insertText', false, text);
                }
            }
        };
    }
    NumberOnlyDirective.prototype.onKeyDown = function (event) {
        var e = event;
        if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||
            // Allow: Ctrl+A
            (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||
            // Allow: Ctrl+C
            (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||
            // Allow: Ctrl+V
            (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||
            // Allow: Ctrl+X
            (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], NumberOnlyDirective.prototype, "onKeyDown", null);
    NumberOnlyDirective = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"])({
            selector: '[NumbersOnly]'
        }),
        __metadata("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]])
    ], NumberOnlyDirective);
    return NumberOnlyDirective;
}());



/***/ }),

/***/ "./src/app/claim/gripsresponse/gripsresponse.component.css":
/*!*****************************************************************!*\
  !*** ./src/app/claim/gripsresponse/gripsresponse.component.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/gripsresponse/gripsresponse.component.html":
/*!******************************************************************!*\
  !*** ./src/app/claim/gripsresponse/gripsresponse.component.html ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <!--<section class=\"row\">\r\n        <section class=\"col col-6\">\r\n            ENCDATA :\r\n            <textarea name=\"ENCDATA\" cols=\"70\" rows=\"5\">{{gripsResponse.eNCDATA}}\r\n            </textarea>\r\n           </section>\r\n        <section class=\"col col-6\">\r\n            Service Provider :\r\n            <input type=\"text\" name=\"DEPT_CD\" value=\"{{gripsResponse.serviceProvider}}\">\r\n        </section>\r\n    </section>-->\r\n   \r\n    <section class=\"col col-12\">\r\n        <label class=\"label\">Payment Status</label>\r\n        <label class=\"input\" style=\"text-decoration-color:green\">\r\n            <strong> {{status}} </strong>\r\n           \r\n        </label>\r\n    </section>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/gripsresponse/gripsresponse.component.ts":
/*!****************************************************************!*\
  !*** ./src/app/claim/gripsresponse/gripsresponse.component.ts ***!
  \****************************************************************/
/*! exports provided: GripsresponseComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GripsresponseComponent", function() { return GripsresponseComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var GripsresponseComponent = /** @class */ (function () {
    function GripsresponseComponent(router, route, dataService, userService) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.userService = userService;
        this.gripsResponse = {};
    }
    //@HostListener('window:beforeunload', ['$event'])
    //unloadNotification($event: any) {
    //    debugger;
    //    $event.returnValue = true;
    //    this.router.navigate(['.'], { relativeTo: this.route.parent });
    //}
    GripsresponseComponent.prototype.ngOnInit = function () {
        var _this = this;
        debugger;
        this.gripsResponse.eNCDATA = this.userService.user.encData;
        this.gripsResponse.serviceProvider = this.userService.user.serviceProvider;
        var x = this.route.parent;
        //Transaction Status => 1 success
        //                      2 pending
        //                      3 failure
        if (this.userService.user.isDoubleVerification) {
            this.dataService
                .decryptGripsDoubleVerificationResponse(this.gripsResponse)
                .then(function (data) {
                debugger;
                if (data == 1)
                    _this.status = "Payment is done successfully";
                else if (data == 2)
                    _this.status = "Payment is Pending";
                else
                    _this.status = "Payment Failed";
            });
        }
        else {
            this.dataService
                .decryptGripsResponse(this.gripsResponse)
                .then(function (data) {
                debugger;
                if (data == 1)
                    _this.status = "Payment is done successfully";
                else if (data == 2)
                    _this.status = "Payment is Pending";
                else
                    _this.status = "Payment Failed";
            });
        }
    };
    GripsresponseComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-gripsresponse',
            template: __webpack_require__(/*! ./gripsresponse.component.html */ "./src/app/claim/gripsresponse/gripsresponse.component.html"),
            styles: [__webpack_require__(/*! ./gripsresponse.component.css */ "./src/app/claim/gripsresponse/gripsresponse.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_1__["UserService"]])
    ], GripsresponseComponent);
    return GripsresponseComponent;
}());



/***/ }),

/***/ "./src/app/claim/legacy-claim-entry/legacy-claim-entry.component.css":
/*!***************************************************************************!*\
  !*** ./src/app/claim/legacy-claim-entry/legacy-claim-entry.component.css ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/legacy-claim-entry/legacy-claim-entry.component.html":
/*!****************************************************************************!*\
  !*** ./src/app/claim/legacy-claim-entry/legacy-claim-entry.component.html ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"widget-grid\">\r\n    <!--content-->\r\n    <div class=\"row\">\r\n        <article class=\"col-sm-12 col-md-12 col-lg-12 nocollapse\">\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n                <header>\r\n                    <h2>Legacy Claim Entry</h2>\r\n                </header>\r\n                <div>\r\n                    <div class=\"widget-body no-padding\">\r\n                        <form class=\"smart-form \">\r\n                            <!--smart-form-main-->\r\n                            <fieldset id=\"legacyEntry\">\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                    <!--<section class=\"col col-6\">\r\n                                            <label class=\"label\">Legacy Claim Ref No.: </label>\r\n                                            <label class=\"input\">\r\n                                                <input type=\"text\" name=\"leagacyCalimRefNo\" placeholder=\"Legacy Claim Ref No.\" [(ngModel)]=\"claim.claimRefernceNo\">\r\n                                            </label>\r\n                                        </section>-->\r\n                                        <section class=\"col col-6\">\r\n                                            <!--<label class=\"label\">Date of Payment: </label>\r\n                                                <label class=\"input\">\r\n                                                    <i class=\"icon-append fa fa-calendar\"></i>\r\n                                                    <input type=\"text\" name=\"date\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\" placeholder=\"DD/MM/YYYY\" value=\"{{ claim.claimDate | date: 'dd/MM/yyyy' }}\"\r\n                                                            [(ngModel)]=\"claim.claimDate\" readonly>\r\n                                                </label>-->\r\n                                            <label class=\"label\">Date of Payment <span [style.color]=\"!dateofPaymentValid?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <i class=\"icon-append fa fa-calendar\"></i>\r\n                                                <input type=\"text\" name=\"date\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                       placeholder=\"DD/MM/YYYY\" value=\"{{ claim.claimDate | date: 'dd/MM/yyyy' }}\"\r\n                                                       [(ngModel)]=\"claim.claimDate\" readonly\r\n                                                       #date=\"ngModel\"\r\n                                                       [ngClass]=\"{'invalid-data':date.invalid && (!dateofPaymentValid), 'valid-data': date.valid && dateofPaymentValid}\"\r\n                                                       required>\r\n                                            </label>\r\n                                            <div *ngIf=\"date.invalid && (!dateofPaymentValid)\">\r\n                                                <span style=\"color: red;\">Date of Payment is required </span>\r\n                                            </div>\r\n                                        </section>\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">Category <span [style.color]=\"!categoryValid?'red':''\"><b>*</b></span></label>\r\n                                            <select class=\"form-control\" name=\"category\" [(ngModel)]=\"claim.claimCategory\">\r\n                                                <option value=\"0\" selected disabled>Choose an Option</option>\r\n                                                <option value=\"{{category.lovDtlId}}\" *ngFor=\"let category of categoryLov\">{{category.optionName}}</option>\r\n                                                <!--<option value=\"1\">PF</option>\r\n                                                <option value=\"2\">Health&Family</option>\r\n                                                <option value=\"3\">DisabIlity</option>\r\n                                                <option value=\"4\">Death</option>\r\n                                                <option value=\"5\">Education</option>-->\r\n                                            </select>\r\n                                            <div *ngIf=\"!categoryValid\">\r\n                                                <span style=\"color: red;\">Category is required </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">Claim Amount Received <span [style.color]=\"!claimAmountValid?'red':''\"><b>*</b></span> </label>\r\n                                            <label class=\"input\">\r\n                                                <input type=\"text\" name=\"claimAmount\" placeholder=\"Claim Amount Received\" [(ngModel)]=\"claim.claimAmount\">\r\n                                            </label>\r\n                                            <div *ngIf=\"!claimAmountValid\">\r\n                                                <span style=\"color: red;\">Claim Amount Received is required </span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">Old Regd No. <span [style.color]=\"!oldRegdNoValid?'red':''\"><b>*</b></span> </label>\r\n                                            <label class=\"input\">\r\n                                                <input type=\"text\" name=\"oldRegdNo\" placeholder=\"Old Regd No.\" [(ngModel)]=\"claim.oldRegdNo\">\r\n                                            </label>\r\n                                            <div *ngIf=\"!oldRegdNoValid\">\r\n                                                <span style=\"color: red;\">Old Regd No is required </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <!--<div class=\"row\">\r\n                                                <div class=\"col col-6\">\r\n                                                    <label class=\"label\">Status:</label>\r\n                                                    <select class=\"form-control\" name=\"status\" [(ngModel)]=\"claim.status\">\r\n                                                        <option value=\"0\" selected>Choose an Option</option>\r\n                                                        <option value=\"1\">Saved</option>\r\n                                                        <option value=\"2\">Submitted</option>\r\n                                                        <option value=\"3\">Sendback from Inspector</option>\r\n                                                        <option value=\"4\">Forwarded to ALC</option>\r\n                                                        <option value=\"5\">Sendback from ALC</option>\r\n                                                        <option value=\"5\">Reject from ALC</option>\r\n                                                        <option value=\"5\">Approved by ALC</option>\r\n                                                        <option value=\"5\">Forced Closed</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                        </div>-->\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col col-6\">\r\n                                            <label class=\"label\">Remarks: </label>\r\n                                            <label class=\"textarea textarea-resizable\">\r\n                                                <textarea rows=\"3\" class=\"custom-scroll\" name=\"remarks\" [(ngModel)]=\"claim.remarks\" placeholder=\"Remarks\"></textarea>\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <form class=\"smart-form\">\r\n                <fieldset class=\"top-10\"></fieldset>\r\n                <footer>\r\n                    <a id=\"btnSava\" class=\"btn btn-success\" (click)=\"SaveLegacyClaim(claim)\"> Save </a>\r\n                    <a class=\"btn btn-danger\" (click)=\"CancelClick()\"> Cancel</a>\r\n                </footer>\r\n            </form>\r\n        </article>\r\n    </div>\r\n</div>\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">Success Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p id=\"mesgSubmit\">{{successMessage}}</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/legacy-claim-entry/legacy-claim-entry.component.ts":
/*!**************************************************************************!*\
  !*** ./src/app/claim/legacy-claim-entry/legacy-claim-entry.component.ts ***!
  \**************************************************************************/
/*! exports provided: LegacyClaimEntryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LegacyClaimEntryComponent", function() { return LegacyClaimEntryComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var LegacyClaimEntryComponent = /** @class */ (function () {
    function LegacyClaimEntryComponent(router, route, dataService, userService) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.userService = userService;
        this.claim = {};
        this.ssnNoValid = true;
        this.dateofPaymentValid = true;
        this.categoryValid = true;
        this.claimAmountValid = true;
        this.oldRegdNoValid = true;
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
    }
    LegacyClaimEntryComponent.prototype.ngOnDestroy = function () {
        if (this.route$)
            this.route$.unsubscribe();
    };
    LegacyClaimEntryComponent.prototype.ngOnInit = function () {
        this.getCategories();
    };
    LegacyClaimEntryComponent.prototype.SaveLegacyClaim = function (claimData) {
        var _this = this;
        debugger;
        if (this.validate(claimData)) {
            claimData.userId = this.userService.user.userid;
            claimData.userType = Number(this.userService.user.userTpe);
            if (confirm("Are you sure to proceed ")) {
                this.dataService
                    .saveLegacyClaimDetails(claimData)
                    .then(function (data) {
                    if (data) {
                        _this.successMessage = "Legacy claim successfully Saved";
                        _this.successModal.show();
                    }
                    else {
                        _this.successMessage = "Invalid transaction";
                        _this.successModal.show();
                    }
                });
            }
        }
        else
            return;
    };
    LegacyClaimEntryComponent.prototype.validate = function (claimData) {
        var isValid = true;
        if (claimData.claimDate == null || claimData.claimDate == undefined) {
            this.dateofPaymentValid = isValid = false;
        }
        if (claimData.claimCategory == 0 || claimData.claimCategory == undefined) {
            this.categoryValid = isValid = false;
        }
        if (claimData.claimAmount == null || claimData.claimAmount == undefined) {
            this.claimAmountValid = isValid = false;
        }
        if (claimData.oldRegdNo == null || claimData.oldRegdNo == undefined) {
            this.oldRegdNoValid = isValid = false;
        }
        return isValid;
    };
    LegacyClaimEntryComponent.prototype.CancelClick = function () {
        debugger;
        this.router.navigate(['claim/legacylist']);
    };
    LegacyClaimEntryComponent.prototype.okClick = function () {
        debugger;
        this.successModal.hide();
        window.location.href = "claim/legacylist";
    };
    LegacyClaimEntryComponent.prototype.getCategories = function () {
        var _this = this;
        this.dataService
            .getlovDetails(_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_5__["LovConstants"].LegacyClaimCategory)
            .subscribe(function (data) {
            _this.categoryLov = data;
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_2__["ModalDirective"])
    ], LegacyClaimEntryComponent.prototype, "successModal", void 0);
    LegacyClaimEntryComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-legacy-claim-entry',
            template: __webpack_require__(/*! ./legacy-claim-entry.component.html */ "./src/app/claim/legacy-claim-entry/legacy-claim-entry.component.html"),
            styles: [__webpack_require__(/*! ./legacy-claim-entry.component.css */ "./src/app/claim/legacy-claim-entry/legacy-claim-entry.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_3__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_4__["UserService"]])
    ], LegacyClaimEntryComponent);
    return LegacyClaimEntryComponent;
}());



/***/ }),

/***/ "./src/app/claim/legacy-list/legacy-list.component.css":
/*!*************************************************************!*\
  !*** ./src/app/claim/legacy-list/legacy-list.component.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/legacy-list/legacy-list.component.html":
/*!**************************************************************!*\
  !*** ./src/app/claim/legacy-list/legacy-list.component.html ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n                <header>\r\n                    <h2>Legacy Claim Status </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n                    </div>\r\n                    <div class=\"widget-body no-padding\">\r\n                        <div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n                        <p></p>\r\n                        <table class=\"table table-striped\" [mfData]=\"legacyClaimsData\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <!--<th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>-->\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"ssinNumber\">SSIN No.</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"oldRegdNo\">Old Regd No.</mfDefaultSorter>\r\n                                    </th>\r\n                                    <!--<th>\r\n                                        <mfDefaultSorter by=\"claimRefernceNo\">Claim Refernce No.</mfDefaultSorter>\r\n                                    </th>-->\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimDateString\">Claim Date</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimAmount\">Claim Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <!--<th>\r\n                                        <mfDefaultSorter by=\"statusName\">Satus</mfDefaultSorter>\r\n                                    </th>-->\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"claimCategoryName\">Claim Catagory</mfDefaultSorter>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let data of mf.data|grdFilter: {ssinNumber: searchText,oldRegdNo: searchText,claimDateString:searchText,claimAmount:searchText,claimCategoryName:searchText\r\n                                    }; let i=index;\">\r\n                                    <!--<td class=\"\">\r\n                                    <a (click)=\"onreviewClick(data)\" title=\"View\" class=\"txt-color-red\"><i class=\"fa fa-eye\"></i></a>\r\n                                                                </td>-->\r\n                                    <td>{{data.ssinNumber}}</td>\r\n                                    <td>{{data.oldRegdNo}}</td>\r\n                                    <!--<td>{{data.claimRefernceNo}}</td>-->\r\n                                    <td>{{data.claimDateString}}</td>\r\n                                    <td>{{data.claimAmount}}</td>\r\n                                    <!--<td>{{data.statusName}}</td>-->\r\n                                    <td>{{data.claimCategoryName}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"7\">\r\n                                        <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                        <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</section>\r\n"

/***/ }),

/***/ "./src/app/claim/legacy-list/legacy-list.component.ts":
/*!************************************************************!*\
  !*** ./src/app/claim/legacy-list/legacy-list.component.ts ***!
  \************************************************************/
/*! exports provided: LegacyListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LegacyListComponent", function() { return LegacyListComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var _UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../UserService */ "./src/app/UserService.ts");
/* harmony import */ var _claim_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../claim/pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var LegacyListComponent = /** @class */ (function () {
    //Paging props end
    function LegacyListComponent(router, dataService, userService) {
        this.router = router;
        this.dataService = dataService;
        this.userService = userService;
        //Paging props start
        this.page = _claim_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _claim_pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
    }
    LegacyListComponent.prototype.ngOnInit = function () {
        //if (this.userService.user.userTpe == UserType.Inspector.toString()) {
        //    this.getLegacyClaimsList(this.userService.user.deptUserid, this.page, this.pageSize);
        //}
        //else {
        this.getLegacyClaimsList(this.userService.user.userid, this.page, this.pageSize);
        //}
    };
    LegacyListComponent.prototype.getLegacyClaimsList = function (id, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getLegacyClaimsList(id, pageNo, pageSize)
            .subscribe(function (data) {
            debugger;
            _this.legacyClaimsData = data.results;
            _this.totalRows = data.rowCount;
        });
    };
    LegacyListComponent.prototype.onreviewClick = function (item) {
        debugger;
        // this.router.navigate(['alc/reviewpaymentprocess', { paymentProcessId: item.paymentProcessingID, mode: "view", statusId: item.statusId }], { skipLocationChange: true });
    };
    LegacyListComponent.prototype.changepage = function (page) {
        this.getLegacyClaimsList(this.userService.user.userid, this.page, this.pageSize);
    };
    LegacyListComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-legacy-list',
            template: __webpack_require__(/*! ./legacy-list.component.html */ "./src/app/claim/legacy-list/legacy-list.component.html"),
            styles: [__webpack_require__(/*! ./legacy-list.component.css */ "./src/app/claim/legacy-list/legacy-list.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], _UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], LegacyListComponent);
    return LegacyListComponent;
}());



/***/ }),

/***/ "./src/app/claim/legacypfdetails/legacypfdetails.component.css":
/*!*********************************************************************!*\
  !*** ./src/app/claim/legacypfdetails/legacypfdetails.component.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/legacypfdetails/legacypfdetails.component.html":
/*!**********************************************************************!*\
  !*** ./src/app/claim/legacypfdetails/legacypfdetails.component.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<section id=\"widget-grid\" class=\"\">\r\n    <div class=\"row\">\r\n        <article class=\"col-sm-12 col-md-12 col-lg-12 nocollapse\">\r\n\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n\r\n                <header>\r\n                    <h2>Legacy PF Data Entry </h2>\r\n                </header>\r\n\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <!-- widget edit box -->\r\n                    <div class=\"jarviswidget-editbox\">\r\n                        <!-- This area used as dropdown edit box -->\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <form class=\"smart-form \">\r\n                            <!--smart-form-main-->\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <section class=\"col col-4\" *ngIf=\"isDepartmentUser\">\r\n                                            <label class=\"input\">\r\n                                                <strong>ARN Number: </strong><span [style.color]=\"!ARNReq?'red':''\"><b>*</b></span>\r\n                                                <select class=\"form-control select\" name=\"agentName\" id=\"ddlAgentName\" [(ngModel)]=\"agentUserId\"\r\n                                                        (change)=\"agentChange($event.target.value)\" [disabled]=\"pfLegacyDtl1List.length>0\" tabindex=\"1\">\r\n                                                    <option value=\"0\" selected disabled>Choose ARN</option>\r\n                                                    <option value=\"{{agent.userid}}\" *ngFor=\"let agent of agentList\">{{agent.userCode}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                            <div *ngIf=\"!ARNReq\">\r\n                                                <span style=\"color: red;\">ARN Number is required </span>\r\n                                            </div>\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Agent Name: </strong>{{agentName}}</label>\r\n                                        </section>\r\n\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Location Name: </strong>{{locationName}}</label>\r\n                                        </section>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"row\">\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Worker Type: </strong><span [style.color]=\"!workerTypeReq?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <select class=\"form-control\" id=\"ddlWorkerType\" name=\"workerType\" [(ngModel)]=\"workerTypeId\"\r\n                                                        (change)=\"workerTypeChange($event.target.value)\" [disabled]=\"pfLegacyDtl1List.length>0\" tabindex=\"2\">\r\n                                                    <option value=\"0\" selected disabled>Choose an Option</option>\r\n                                                    <option value=\"{{type.workerTypeId}}\" *ngFor=\"let type of WorkerTypeList\">{{type.workerTypeName}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                            <div *ngIf=\"!workerTypeReq\">\r\n                                                <span style=\"color: red;\">Worker Type is required </span>\r\n                                            </div>\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label>\r\n                                                <strong>Deposit Date: </strong><span [style.color]=\"!depositDateReq?'red':''\"><b>*</b></span>\r\n                                            </label>\r\n                                            <label class=\"input\">\r\n                                                <!--autocomplete=\"off\"-->\r\n                                                <i class=\"icon-append fa fa-calendar\"></i>\r\n                                                <input type=\"text\" name=\"depositedDate\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                       [maxDate]=\"toDayDate\" (bsValueChange)=\"depositDateChange($event)\" [disabled]=\"pfLegacyDtl1List.length>0\"\r\n                                                       placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"depositDate\" tabindex=\"3\"\r\n                                                       value=\"{{depositDate | date: 'dd/MM/yyyy' }}\">\r\n                                            </label>\r\n                                            <div *ngIf=\"!depositDateReq\">\r\n                                                <span style=\"color: red;\">Deposit Date is required </span>\r\n                                            </div>\r\n                                            <div *ngIf=\"todayMinDepositDateReq\">\r\n                                                <span style=\"color: red;\">Deposit Date should be less than or equal to Today Date </span>\r\n                                            </div>\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Financial Year: </strong><span [style.color]=\"!financialYearValid?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <select class=\"form-control\" id=\"ddlFinanacialYear\" name=\"finanacialYear\" [(ngModel)]=\"financialYearId\"\r\n                                                        [disabled]=\"pfLegacyDtl1List.length>0\" tabindex=\"4\">\r\n                                                    <option value=\"0\" selected disabled>Choose an Option</option>\r\n                                                    <option value=\"{{type.financialYearId}}\" *ngFor=\"let type of finanacialYearList\">{{type.financialYear}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                            <div *ngIf=\"!financialYearValid\">\r\n                                                <span style=\"color: red;\">Financial Year is required </span>\r\n                                            </div>\r\n                                        </section>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Deposit Amount: </strong><span [style.color]=\"!depositedAmountReq?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <input type=\"text\" class=\"form-control\" name=\"depositedAmount\" placeholder=\"Deposit Amount\" [(ngModel)]=\"depositedAmount\"\r\n                                                       (change)=\"depositedAmountChange($event.target.value)\" (keydown.enter)=\"depositedAmountChange($event.target.value)\"\r\n                                                       NumbersOnly min=\"=1\" tabindex=\"5\"/>\r\n                                            </label>\r\n                                            <div *ngIf=\"!depositedAmountReq\">\r\n                                                <span style=\"color: red;\">Deposit Amount is required </span>\r\n                                            </div>\r\n                                            <!--<div *ngIf=\"agentDepositAmountValidation\">\r\n                                                <span style=\"color: red;\">Deposit amount allow only {{pfMasterConfig.agentCollectionLimit}} </span>\r\n                                            </div>-->\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Payin Slip: </strong></label>\r\n                                            <label class=\"input\">\r\n                                                <input type=\"text\" class=\"form-control\" name=\"payinSlip\" placeholder=\"Payin Slip\" [(ngModel)]=\"payinSlip\" tabindex=\"6\"/>\r\n                                            </label>\r\n                                        </section>\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Upload PayIn Slip: </strong> <span [style.color]=\"!payInSlipUploaded?'red':''\"><b>*</b></span></label>\r\n                                            <div class=\"input input-file\">\r\n                                                <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"onFileChanged($event)\" tabindex=\"7\">Browse</span>\r\n                                                <input type=\"text\" readonly>\r\n\r\n                                            </div>\r\n                                            <div *ngIf=\"(!payInSlipUploaded) && (payInSlipCertificate.fileName =='' || payInSlipCertificate.fileName == undefined )\">\r\n                                                <span style=\"color: red;\">Upload PayIn Slip is required </span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <table>\r\n                                                    <tr>\r\n                                                        <td>{{payInSlipCertificate.fileName}}</td>\r\n                                                    </tr>\r\n                                                </table>\r\n                                            </div>\r\n                                            <label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                        </section>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <section class=\"col col-4\">\r\n                                            <label><strong>Deposit A/c Number: </strong><span [style.color]=\"!depositBankValid?'red':''\"><b>*</b></span></label>\r\n                                            <label class=\"input\">\r\n                                                <select class=\"form-control\" id=\"ddlDepositBank\" name=\"depositBank\" [(ngModel)]=\"bankId\"\r\n                                                       tabindex=\"8\">\r\n                                                    <option value=\"0\" selected disabled>Choose an Option</option>\r\n                                                    <option value=\"{{bank.bankCode}}\" *ngFor=\"let bank of bankDetails\">{{bank.accountNumber}}</option>\r\n                                                </select>\r\n                                            </label>\r\n                                            <div *ngIf=\"!depositBankValid\">\r\n                                                <span style=\"color: red;\">Deposit A/c Number is required </span>\r\n                                            </div>\r\n                                        </section>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <fieldset>\r\n                                <section>\r\n                                    <div class=\"modal-footer\" *ngIf=\"isDepartmentUser\">\r\n                                        <div class=\"row\">\r\n                                            <button type=\"button\" class=\"btn btn-primary\" (click)=\"addReceiptBook()\">\r\n                                                Add Receipt Book\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <table class=\"table table-striped table-bordered\" width=\"100%\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>\r\n                                                        SSIN/PF No\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Beneficiary Name\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Beneficiary SSIN/PF No.\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Collection Date\r\n                                                    </th>\r\n                                                    <th width=\"300\">\r\n                                                        Month\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Amount\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Book No\r\n                                                    </th>\r\n                                                    <th>\r\n                                                        Receipt No\r\n                                                    </th>\r\n                                                    <th>Action</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr *ngFor=\"let field of pfLegacyMaster.pfLegacyDtl1List; let i = index\">\r\n                                                    <td width=\"130\">\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <span>{{field.ssI_Number}}</span>\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <input type=\"text\" id=\"benSno\" name=\"{{field.ssI_Number}}\" [(ngModel)]=\"field.ssI_Number\" placeholder=\"Beneficiary SSIN\"\r\n                                                                       (change)=\"searchSSINNo($event.target.value)\" (keydown.enter)=\"searchSSINNo($event.target.value)\" maxlength=\"50\"\r\n                                                                       [ngClass]=\"{'invalid-data':!ssinValid, 'valid-data': ssinValid}\"\r\n                                                                       required tabindex=\"1\">\r\n                                                            </label>\r\n                                                            <div *ngIf=\"(!ssinValid )\">\r\n                                                                <span style=\"color: red;\">Beneficiary SSIN is required </span>\r\n                                                            </div>\r\n                                                            <!--<div *ngIf=\"(!validPFNo )\">\r\n                                                                <span style=\"color: red;\">Beneficiary doesn't have PF Account NO. </span>\r\n                                                            </div>-->\r\n                                                            <div *ngIf=\"validWTBen\">\r\n                                                                <span style=\"color: red;\">Beneficiary SSIN/PF No. doesn't belong to selected Worker Type </span>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"benRegDateMinFinancialYear\">\r\n                                                                <span style=\"color: red;\">Beneficiary Registration Date later to the selected Financial year </span>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"validBenLocation\">\r\n                                                                <span style=\"color: red;\">Beneficiary doesn't belong to selected location </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <span>{{field.benFullName}}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <span>{{field.benSSINOrPFAccountNo}}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                {{field.collectionDate | date: 'dd/MM/yyyy' }}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <input type=\"text\" name=\"{{field.collectionDate}}\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                                       [maxDate]=\"collectionMinDt\" [minDate]=\"minDt\" [disabled]=\"disableCollectionDate\" (bsValueChange)=\"collectionDateChange($event)\"\r\n                                                                       placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"field.collectionDate\"\r\n                                                                       value=\"{{field.collectionDate | date: 'dd/MM/yyyy' }}\" [ngClass]=\"{'invalid-data': (!collectionDateReq), 'valid-data': collectionDateReq}\"\r\n                                                                       required tabindex=\"2\">\r\n                                                            </label>\r\n                                                            <div *ngIf=\"!collectionDateReq\">\r\n                                                                <span style=\"color: red;\">Collection Date is required </span>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"DepositMinDateReq\">\r\n                                                                <span style=\"color: red;\">Collection Date should be less than or equal to Deposit Date </span>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"todayMinCollectionDateReq\">\r\n                                                                <span style=\"color: red;\">Collection Date should be less than or equal to Today Date </span>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"isColDateinRangeYear\">\r\n                                                                <span style=\"color: red;\">Collection Date should be in between Financial Year</span>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"benRegDateMinCollectionDate\">\r\n                                                                <span style=\"color: red;\">Collection Date should be in greater than to Beneficiary Registration Date</span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td width=\"230\" style=\"padding-right:3%\">\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                {{field.monthName}}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <ng-multiselect-dropdown name=\"editMonths\" [placeholder]=\"'All'\"\r\n                                                                                     [data]=\"pfMonths\"\r\n                                                                                     [(ngModel)]=\"field.selectedMonths\"\r\n                                                                                     [settings]=\"monthSettings\"\r\n                                                                                     (onSelect)=\"onItemSelect($event, field,i)\"\r\n                                                                                     (onDeSelect)=\"onItemDeSelect($event, field)\"\r\n                                                                                     style=\"height:36%\" tabindex=\"3\">\r\n                                                            </ng-multiselect-dropdown>\r\n                                                            <div *ngIf=\"!pfMonthIsValid\">\r\n                                                                <span style=\"color: red;\">Month is required </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                {{field.amountPaid}}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <input type=\"text\" name=\"{{field.amountPaid}}\" placeholder=\"Amount\" [(ngModel)]=\"field.amountPaid\" NumbersOnly\r\n                                                                       required tabindex=\"4\"/>\r\n                                                            </label>\r\n                                                            <div *ngIf=\"!amountReq\">\r\n                                                                <span style=\"color: red;\">Amount is required </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                {{field.bookName}}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <select name=\"{{field.bookNo}}\" [(ngModel)]=\"field.bookNo\"\r\n                                                                        [ngClass]=\"{'invalid-data': !bookNoIsValid, 'valid-data': bookNoIsValid }\"\r\n                                                                        required (change)=\"bookChange($event)\" tabindex=\"5\">\r\n                                                                    <option value=\"0\" selected disabled>Choose book</option>\r\n                                                                    <option value=\"{{book.id}}\" *ngFor=\"let book of agentReceiptBooks\">{{book.bookNo}}</option>\r\n                                                                </select>\r\n                                                            </label>\r\n                                                            <div *ngIf=\"!bookNoIsValid\">\r\n                                                                <span style=\"color: red;\">Book No. is required </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <section *ngIf=\"!field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                {{field.receiptNo}}\r\n                                                            </label>\r\n                                                        </section>\r\n                                                        <section *ngIf=\"field.isEdit\">\r\n                                                            <label class=\"input\">\r\n                                                                <input type=\"text\" name=\"{{field.receiptNo}}\" placeholder=\"Receipt No\" [(ngModel)]=\"field.receiptNo\" NumbersOnly\r\n                                                                       (change)=\"receiptNoChange(field.bookNo, $event.target.value)\" (keydown.enter)=\"receiptNoChange(field.bookNo,$event.target.value)\"\r\n                                                                       [ngClass]=\"{'invalid-data':!receiptNoIsValid, 'valid-data':receiptNoIsValid}\"\r\n                                                                       required tabindex=\"6\"/>\r\n                                                            </label>\r\n                                                            <div *ngIf=\"!receiptNoIsValid\">\r\n                                                                <span style=\"color: red;\">Receipt No. is required </span>\r\n                                                            </div>\r\n                                                        </section>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <!--<a *ngIf=\"!field.isEdit\" (click)=\"editFieldValue(i,field)\" title=\"Edit\" class=\"txt-color-red\"><i class=\"fa fa-edit fa-lg\"></i></a>\r\n                                                        <a *ngIf=\"field.isEdit\" (click)=\"saveFieldValue(i,field)\" title=\"Save\" class=\"txt-color-blue\"><i class=\"glyphicon glyphicon-save\"></i></a>-->\r\n                                                        <a (click)=\"deleteFieldValue(i,field)\" title=\"Delete\" class=\"txt-color-red\"><i class=\"glyphicon glyphicon-trash\"></i></a>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr *ngIf=\"showAddRow\">\r\n                                                    <td width=\"130\">\r\n                                                        <label class=\"input\">\r\n                                                            <input type=\"text\" id=\"benSno\" name=\"benSno\" [(ngModel)]=\"newAttribute.ssI_Number\" placeholder=\"Beneficiary SSIN/PF No.\"\r\n                                                                   (change)=\"searchSSINNo($event.target.value)\" (keydown.enter)=\"searchSSINNo($event.target.value)\" maxlength=\"50\"\r\n                                                                   #benSno=\"ngModel\" [ngClass]=\"{'invalid-data':!ssinValid, 'valid-data': ssinValid}\"\r\n                                                                   required tabindex=\"9\">\r\n                                                        </label>\r\n                                                        <div *ngIf=\"(!ssinValid )\">\r\n                                                            <span style=\"color: red;\">Beneficiary SSIN is required </span>\r\n                                                        </div>\r\n                                                        <!--<div *ngIf=\"(!validPFNo )\">\r\n                                                            <span style=\"color: red;\">Beneficiary doesn't have PF Account NO. </span>\r\n                                                        </div>-->\r\n                                                        <div *ngIf=\"validWTBen\">\r\n                                                            <span style=\"color: red;\">Beneficiary SSIN/PF No. doesn't belong to selected Worker Type </span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"beneficiary.benSno==0\">\r\n                                                            <span style=\"color: red;\">{{beneficiary.errorMessage}}</span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"isInterestCalculated\">\r\n                                                            <span style=\"color: red;\">You can not enter transaction has interest already calculated for this Beneficiary SSIN/PF No.</span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"benRegDateMinFinancialYear\">\r\n                                                            <span style=\"color: red;\">Beneficiary Registration Date later to the selected Financial year </span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"validBenLocation\">\r\n                                                            <span style=\"color: red;\">Beneficiary doesn't belong to selected location </span>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <span>{{beneficiary.benFullName}}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <span>{{beneficiary.benSSINOrPFAccountNo}}</span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <label class=\"input\">\r\n                                                            <input type=\"text\" name=\"collectionDate\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                                                   [maxDate]=\"collectionMinDt\" [minDate]=\"minDt\" [disabled]=\"disableCollectionDate\" (bsValueChange)=\"collectionDateChange($event)\"\r\n                                                                   placeholder=\"DD/MM/YYYY\" [(ngModel)]=\"newAttribute.collectionDate\"\r\n                                                                   value=\"{{newAttribute.collectionDate | date: 'dd/MM/yyyy' }}\" [ngClass]=\"{'invalid-data': (!collectionDateReq), 'valid-data': collectionDateReq}\"\r\n                                                                   required tabindex=\"10\">\r\n                                                        </label>\r\n                                                        <div *ngIf=\"!collectionDateReq\">\r\n                                                            <span style=\"color: red;\">Collection Date is required </span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"DepositMinDateReq\">\r\n                                                            <span style=\"color: red;\">Collection Date should be less than or equal to Deposit Date </span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"todayMinCollectionDateReq\">\r\n                                                            <span style=\"color: red;\">Collection Date should be less than or equal to Today Date </span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"isColDateinRangeYear\">\r\n                                                            <span style=\"color: red;\">Collection Date should be in between Financial Year</span>\r\n                                                        </div>\r\n                                                        <div *ngIf=\"benRegDateMinCollectionDate\">\r\n                                                            <span style=\"color: red;\">Collection Date should be in greater than to Beneficiary Registration Date</span>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                    <td width=\"230\" style=\"padding-right:3%\">\r\n                                                        <ng-multiselect-dropdown name=\"pfselectionmonth\" [placeholder]=\"'All'\"\r\n                                                                                 [data]=\"pfMonths\"\r\n                                                                                 [(ngModel)]=\"newAttribute.selectedMonths\"\r\n                                                                                 [settings]=\"monthSettings\"\r\n                                                                                 (onSelect)=\"onItemSelect($event, newAttribute, -1)\" (onDeSelect)=\"onItemDeSelect($event, newAttribute)\"\r\n                                                                                 style=\"height:36%\" tabindex=\"11\">\r\n                                                        </ng-multiselect-dropdown>\r\n                                                        <div *ngIf=\"!pfMonthIsValid\">\r\n                                                            <span style=\"color: red;\">Month is required </span>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <label class=\"input\">\r\n                                                            <input type=\"text\" name=\"amount\" placeholder=\"Amount\" [(ngModel)]=\"newAttribute.amountPaid\" NumbersOnly\r\n                                                                   #amount=\"ngModel\" required tabindex=\"12\" />\r\n                                                        </label>\r\n                                                        <div *ngIf=\"!amountReq\">\r\n                                                            <span style=\"color: red;\">Amount is required </span>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <label class=\"input\">\r\n                                                            <select name=\"bookNo\" [(ngModel)]=\"newAttribute.bookNo\"\r\n                                                                    #bookNo=\"ngModel\" [ngClass]=\"{'invalid-data': !bookNoIsValid, 'valid-data': bookNoIsValid }\"\r\n                                                                    required (change)=\"bookChange($event)\" tabindex=\"13\">\r\n                                                                <option value=\"0\" selected disabled>Choose book</option>\r\n                                                                <option value=\"{{book.id}}\" *ngFor=\"let book of agentReceiptBooks\">{{book.bookNo}}</option>\r\n                                                            </select>\r\n                                                        </label>\r\n                                                        <div *ngIf=\"!bookNoIsValid\">\r\n                                                            <span style=\"color: red;\">Book No. is required </span>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <label class=\"input\">\r\n                                                            <input type=\"text\" name=\"ReceiptNo\" placeholder=\"Receipt No\" [(ngModel)]=\"newAttribute.receiptNo\" NumbersOnly\r\n                                                                   #ReceiptNo=\"ngModel\" (change)=\"receiptNoChange(newAttribute.bookNo, $event.target.value)\" (keydown.enter)=\"receiptNoChange(newAttribute.bookNo,$event.target.value)\"\r\n                                                                   [ngClass]=\"{'invalid-data':!receiptNoIsValid, 'valid-data':receiptNoIsValid}\"\r\n                                                                   required  tabindex=\"14\"/>\r\n                                                        </label>\r\n                                                        <div *ngIf=\"!receiptNoIsValid\">\r\n                                                            <span style=\"color: red;\">Receipt No. is required </span>\r\n                                                        </div>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <button (click)=\"addFieldValue()\" title=\"Add\" class=\"txt-color-green\" tabindex=\"15\" (keydown.enter)=\"addFieldValue()\">\r\n                                                            <i class=\"glyphicon glyphicon-plus\"></i>\r\n                                                        </button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"!noRecords\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Add atleast one entry</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\" *ngIf=\"isReceiptNoRange\">\r\n                                        <div class=\"col col-12\" style=\"color:red; margin-bottom:10px;\">\r\n                                            <label>Receipt No. not in the range</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <section class=\"col col-4\">\r\n                                            <label>\r\n                                                <strong>Remaining Amount: </strong>{{remainingAmount}}\r\n                                            </label>\r\n                                        </section>\r\n                                        <section class=\"col col-4\"> <label><strong>Total: </strong>{{total}}</label></section>\r\n                                    </div>\r\n                                </section>\r\n                            </fieldset>\r\n                            <footer>\r\n                                <button type=\"button\" [disabled]=\"!(pfLegacyDtl1List.length>0 && total==depositedAmount)\" name=\"submit\" class=\"btn btn-success\" (click)=\"saveLegacyPFDetails(pfLegacyMaster,2)\">\r\n                                    Submit\r\n                                </button>\r\n                                <!--<a *ngIf=\"pfCollectionDetailsList.length>0 && total==depositedAmount\" name=\"save\" class=\"btn btn-success\" (click)=\"saveLegacyPFDetails(pfCollectionDetailsList,2)\">Submit</a>-->\r\n                                <a class=\"btn btn-danger\" (click)=\"cancleClick()\">Cancel</a>\r\n                                <!--<a class=\"btn btn-warning\">Verify</a>-->\r\n                                <!--<a *ngIf=\"pfCollectionDetailsList.length>0\" class=\"btn btn-primary\" (click)=\"saveLegacyPFDetails(pfCollectionDetailsList,1)\">Save as Draft</a>-->\r\n                                <button type=\"button\" [disabled]=\"pfLegacyDtl1List.length<=0\" name=\"save\" class=\"btn btn-primary\" (click)=\"saveLegacyPFDetails(pfLegacyMaster,1)\">\r\n                                    Save as Draft\r\n                                </button>\r\n                            </footer>\r\n                        </form>\r\n\r\n                    </div>\r\n                    <!-- end widget content -->\r\n\r\n                </div>\r\n                <!-- end widget div -->\r\n\r\n            </div>\r\n            <!-- end widget -->\r\n\r\n        </article>\r\n        <!-- WIDGET END -->\r\n\r\n    </div>\r\n</section>\r\n<div bsModal #successModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p id=\"mesgSubmit\">{{successMessage}}</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"okClick()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/claim/legacypfdetails/legacypfdetails.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/claim/legacypfdetails/legacypfdetails.component.ts ***!
  \********************************************************************/
/*! exports provided: LegacypfdetailsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LegacypfdetailsComponent", function() { return LegacypfdetailsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _models_pf_months_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/pf.months.model */ "./src/app/claim/models/pf.months.model.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var LegacypfdetailsComponent = /** @class */ (function () {
    function LegacypfdetailsComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.agentList = [];
        this.depositDateReq = true;
        this.months = _models_pf_months_model__WEBPACK_IMPORTED_MODULE_2__["Months"];
        this.rowIndex = -1;
        this.ssinValid = true;
        this.pfMonthIsValid = true;
        this.pfAmountIsValid = true;
        this.collectionDateReq = true;
        this.receiptNoIsValid = true;
        this.bookNoIsValid = true;
        this.benficiaryInactive = false;
        this.beneficiary = {};
        this.pfMonths = [];
        this.pfSelectedMonths = [];
        this.pfMasterConfig = {};
        this.bankDetails = [];
        this.agentReceiptBooks = [];
        this.isValidSave = true;
        this.isMonthEnable = true;
        this.fieldArray = [];
        this.newAttribute = {};
        this.remainingAmount = 0;
        this.total = 0;
        this.depositedAmountReq = true;
        this.depositBankValid = true;
        this.ARNReq = true;
        this.workerTypeValid = false;
        this.monthSettings = {};
        this.selectedMonthIds = [];
        this.sMon = [];
        this.pfmonth1 = {};
        this.disableCollectionDate = true;
        this.isValidMonth = true;
        this.amountReq = true;
        this.payInSlipUploaded = true;
        this.payInSlipCertificate = {};
        this.noRecords = true;
        this.activeYear = {};
        this.isDepartmentUser = true;
        this.isReceiptNoRange = false;
        this.collectionYear = {};
        // validPFNo: boolean = true;
        this.showAddRow = true;
        this.workerTypeReq = true;
        this.pfLegacyMaster = {};
        this.pfLegacyDtl1List = [];
        this.pfLegacyDtl1 = {};
        this.pfLegacyDtl2 = {};
        this.pfLegacyMasterId = 0;
        this.validWTBen = false;
        this.editStr = "";
        this.DepositMinDateReq = false;
        this.todayMinDepositDateReq = false;
        this.todayMinCollectionDateReq = false;
        this.receiptGenerated = true;
        this.financialYearValid = true;
        this.isColDateinRangeYear = false;
        this.isInterestCalculated = false;
        this.benRegDateMinCollectionDate = false;
        this.benRegDateMinFinancialYear = false;
        this.validBenLocation = false;
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        debugger;
        this.toDayDate = new Date();
        this.currentyear = new Date().getFullYear();
        var currentMonth = new Date().getMonth();
        if (currentMonth <= 3) {
            this.fStartYear = this.currentyear - 1;
            this.fEndYear = this.currentyear;
        }
        else {
            this.fStartYear = this.currentyear;
            this.fEndYear = this.currentyear + 1;
        }
        this.currentyear = this.fStartYear + '-' + this.fEndYear;
    }
    LegacypfdetailsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.route$ = this.route.params.subscribe(function (params) {
            _this.pfLegacyMasterId = params["pfLegacyMasterId"] != null ? Number(params["pfLegacyMasterId"]) : 0;
        });
        this.getActiveFinancialYear();
        this.pfMonths = this.months;
        this.getWorkerTypeDetails();
        this.getPFMasterConfigDetails();
        //-------------------
        this.monthSettings = {
            singleSelection: false,
            idField: 'Id',
            textField: 'monthName',
            enableCheckAll: false,
            itemsShowLimit: 2,
        };
        if (Number(this.user.user.userTpe) == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__["UserType"].ServiceProvider || Number(this.user.user.userTpe) == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__["UserType"].CA) {
            this.isDepartmentUser = false;
            this.dataService
                .getUserDetails(this.user.user.deptUserid)
                .subscribe(function (data) {
                _this.userDetails = data;
                if (_this.userDetails != null) {
                    _this.agentUserId = _this.user.user.deptUserid;
                    _this.agentName = _this.user.user.userName;
                    _this.locationName = _this.userDetails.locationName;
                    _this.locationId = _this.userDetails.location;
                    _this.agentSubDivId = _this.userDetails.subDivId;
                    if (_this.userDetails.agentRLOInformation != null)
                        _this.rloOfficeId = _this.userDetails.agentRLOInformation.rloOfficeId;
                    _this.getAgentBooks(_this.agentUserId);
                    // this.getAgentLegacyPfDetails(this.agentUserId);
                }
            });
        }
        else {
            this.getAgentList();
        }
        debugger;
        if (this.pfLegacyMasterId > 0) {
            this.getLegacyPFCollectionDetails(this.pfLegacyMasterId);
        }
    };
    LegacypfdetailsComponent.prototype.validatePFCollectionDtl = function (pfDetails) {
        var isValid = true;
        debugger;
        if (pfDetails.ssI_Number == undefined || pfDetails.ssI_Number == "") {
            this.ssinValid = isValid = false;
        }
        if (pfDetails.selectedMonths == undefined || pfDetails.selectedMonths.length == 0) {
            this.pfMonthIsValid = isValid = false;
        }
        else {
            if (pfDetails.selectedMonths.length > 0 && this.pfMasterConfig != null && (pfDetails.amountPaid != undefined || pfDetails.amountPaid != null || pfDetails.amountPaid.toString() != "")) {
                var contAmount = 0;
                contAmount = (pfDetails.selectedMonths.length * this.pfMasterConfig.beneficiaryPFContribution);
                if (contAmount > pfDetails.amountPaid) {
                    alert("Collection Amount less than Contribution Amount");
                    isValid = false;
                }
            }
        }
        if (pfDetails.bookNo == undefined || pfDetails.bookNo == null) {
            this.bookNoIsValid = isValid = false;
        }
        if (pfDetails.receiptNo == undefined || pfDetails.receiptNo == null || pfDetails.receiptNo.toString() == "") {
            this.receiptNoIsValid = isValid = false;
        }
        if (pfDetails.collectionDate == undefined || pfDetails.collectionDate == null) {
            this.collectionDateReq = isValid = false;
        }
        if (pfDetails.amountPaid == undefined || pfDetails.amountPaid == null || pfDetails.amountPaid.toString() == "") {
            this.amountReq = isValid = false;
        }
        if (this.depositedAmount == undefined || this.depositedAmount == 0 || this.depositedAmount == null) {
            this.depositedAmountReq = isValid = false;
        }
        if (this.isReceiptNoRange) {
            isValid = false;
        }
        if ((this.depositedAmount != undefined || this.depositedAmount != 0 || this.depositedAmount != null) && (pfDetails.amountPaid != undefined || pfDetails.amountPaid != null)) {
            if (Number(this.depositedAmount) < Number(pfDetails.amountPaid)) {
                alert("Collection Amount exceeds Deposit Amount");
                isValid = false;
            }
        }
        if (this.validWTBen) {
            isValid = false;
        }
        if (this.DepositMinDateReq) {
            isValid = false;
        }
        if (this.todayMinCollectionDateReq) {
            isValid = false;
        }
        if (this.benRegDateMinCollectionDate) {
            isValid = false;
        }
        var amt = 0;
        for (var i = 0; i < this.pfLegacyDtl1List.length; i++) {
            amt = Number(amt) + Number(this.pfLegacyDtl1List[i].amountPaid);
        }
        amt = amt + Number(pfDetails.amountPaid);
        if (Number(this.depositedAmount) < Number(amt)) {
            alert("Collection Amount exceeds Deposit Amount");
            isValid = false;
        }
        if (this.validBenLocation) {
            isValid = false;
        }
        return isValid;
    };
    LegacypfdetailsComponent.prototype.addFieldValue = function () {
        var _this = this;
        if (this.validatePFCollectionDtl(this.newAttribute)) {
            debugger;
            if (this.isValidMonth) {
                this.monthSelection(this.newAttribute);
                var str = "";
                var newString = "";
                this.newAttribute.pfLegacyDtl2 = [];
                for (var i = 0; i < this.newAttribute.selectedMonths.length; i++) {
                    debugger;
                    if (this.pfLegacyDtl1List != null && this.pfLegacyDtl1List.length > 0) {
                        for (var j = 0; j < this.pfLegacyDtl1List.length; j++) {
                            if (this.pfLegacyDtl1List[j].benSno == this.beneficiary.benSno) {
                                for (var k = 0; k < this.pfLegacyDtl1List[j].selectedMonths.length; k++) {
                                    if (this.pfLegacyDtl1List[j].selectedMonths[k].monthId == this.newAttribute.selectedMonths[i].monthId
                                        && this.pfLegacyDtl1List[j].selectedMonths[k].year == this.newAttribute.selectedMonths[i].year) {
                                        str = "already " + this.newAttribute.selectedMonths[i].monthName + " this month is added to ssin";
                                        alert(str);
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    newString += this.newAttribute.selectedMonths[i].monthName + ",";
                    this.newAttribute.pfLegacyDtl2.push({ monthPaid: this.newAttribute.selectedMonths[i].monthId, yearPaid: this.newAttribute.selectedMonths[i].year, amount: this.newAttribute.selectedMonths[i].amount });
                }
                if (str == "") {
                    if (this.pfLegacyDtl1List.findIndex(function (x) { return x.bookNo == _this.newAttribute.bookNo && x.receiptNo == _this.newAttribute.receiptNo; }) == -1) {
                        this.newAttribute.benSno = this.beneficiary.benSno;
                        this.newAttribute.benFullName = this.beneficiary.benFullName;
                        this.newAttribute.benSSINOrPFAccountNo = this.beneficiary.benSSINOrPFAccountNo;
                        this.newAttribute.benPFAccountId = this.beneficiary.benPFAccountId;
                        this.newAttribute.monthName = newString.substr(0, newString.length - 1);
                        this.newAttribute.bookName = this.agentReceiptBooks.find(function (x) { return x.id == _this.newAttribute.bookNo; }).bookNo;
                        //this.remainingAmount = this.remainingAmount - Number(this.newAttribute.amountPaid);
                        //this.total = this.total + Number(this.newAttribute.amountPaid);
                        this.pfLegacyDtl1List.push(this.newAttribute);
                        var amt = 0;
                        for (var i = 0; i < this.pfLegacyDtl1List.length; i++) {
                            amt = Number(amt) + Number(this.pfLegacyDtl1List[i].amountPaid);
                        }
                        if (this.depositedAmount >= amt) {
                            this.remainingAmount = Number(this.depositedAmount) - Number(amt);
                        }
                        this.total = amt;
                        this.newAttribute = {};
                        this.selectedMonthIds = [];
                        if (this.total > 0 && this.total == this.depositedAmount)
                            this.showAddRow = false;
                        else {
                            this.showAddRow = true;
                            // this.newAttribute.ssI_Number = this.nextSSIN;
                            this.newAttribute.collectionDate = this.collectionDate;
                            this.newAttribute.bookNo = this.agentReceiptBooks.find(function (x) { return x.id == _this.bookId; }).id;
                            this.nextReceiptNo = Number(this.pfLegacyDtl1List[this.pfLegacyDtl1List.length - 1].receiptNo);
                            if (this.nextReceiptNo != null && this.nextReceiptNo != undefined) {
                                if (this.nextReceiptNo < this.receiptNoFrom || this.nextReceiptNo > this.receiptNoTo) {
                                    this.isReceiptNoRange = true;
                                }
                                else {
                                    this.isReceiptNoRange = false;
                                    var recNo = Number(this.nextReceiptNo) + 1;
                                    debugger;
                                    if (recNo >= this.receiptNoFrom && recNo <= this.receiptNoTo)
                                        this.nextReceiptNo = recNo;
                                }
                            }
                            this.newAttribute.receiptNo = this.nextReceiptNo;
                            if (Number(this.depositedAmount) < Number(amt)) {
                                alert("Collection Amount exceeds Deposit Amount");
                                this.remainingAmount = 0;
                                this.showAddRow = false;
                            }
                        }
                    }
                    else {
                        alert("already this receipt is generated");
                        return;
                    }
                }
                this.pfLegacyMaster.pfLegacyDtl1List = this.pfLegacyDtl1List;
                this.beneficiary.benFullName = '';
                this.beneficiary.benSSINOrPFAccountNo = '';
                this.nextReceiptNo = null;
            }
        }
    };
    LegacypfdetailsComponent.prototype.editFieldValue = function (index, field) {
        var _this = this;
        field.isEdit = true;
        this.searchSSINNo(field.ssI_Number);
        this.beneficiary.benFullName = "";
        this.beneficiary.benSSINOrPFAccountNo = "";
        this.remainingAmount = Number(this.remainingAmount) + Number(field.amountPaid);
        this.total = Number(this.total) - Number(field.amountPaid);
        if (field.collectionDate != null && field.collectionDate != undefined)
            field.collectionDate = new Date(field.collectionDate);
        if (this.agentReceiptBooks != null) {
            this.agentReceiptBooks.forEach(function (x) {
                if (x.id == field.bookNo) {
                    _this.minDt = new Date(x.date);
                }
            });
        }
    };
    LegacypfdetailsComponent.prototype.saveFieldValue = function (index, field) {
        if (this.validatePFCollectionDtl(field)) {
            field.isEdit = false;
            var newString = '';
            for (var i = 0; i < field.selectedMonths.length; i++) {
                newString += field.selectedMonths[i].monthName + ",";
            }
            field.monthName = newString.substr(0, newString.length - 1);
            this.pfLegacyDtl1List.splice(index, 1);
            this.pfLegacyDtl1List.push(field);
            this.pfLegacyMaster.pfLegacyDtl1List = this.pfLegacyDtl1List;
            this.remainingAmount = Number(this.remainingAmount) - Number(field.amountPaid);
            this.total = Number(this.total) + Number(field.amountPaid);
            if (this.total > 0 && this.total == this.depositedAmount)
                this.showAddRow = false;
            else
                this.showAddRow = true;
        }
    };
    LegacypfdetailsComponent.prototype.deleteFieldValue = function (index, field) {
        this.pfLegacyDtl1List.splice(index, 1);
        var amt = 0;
        for (var i = 0; i < this.pfLegacyDtl1List.length; i++) {
            amt = Number(amt) + Number(this.pfLegacyDtl1List[i].amountPaid);
        }
        if (this.depositedAmount >= amt) {
            this.remainingAmount = Number(this.depositedAmount) - Number(amt);
        }
        this.total = amt;
        if (this.total > 0 && this.total == this.depositedAmount)
            this.showAddRow = false;
        else {
            this.showAddRow = true;
            if (Number(this.depositedAmount) < Number(amt)) {
                alert("Collection Amount exceeds Deposit Amount");
                this.remainingAmount = 0;
                this.showAddRow = false;
            }
        }
    };
    LegacypfdetailsComponent.prototype.getAgentList = function () {
        var _this = this;
        this.dataService
            .getAgentLocationWise(Number(this.user.user.userTpe), this.user.user.deptUserid)
            .subscribe(function (data) {
            _this.agentList = data;
        });
    };
    LegacypfdetailsComponent.prototype.agentChange = function (eve) {
        this.agentUserId = eve;
        this.agentName = this.agentList.find(function (x) { return x.userid == eve; }).userName;
        this.locationName = this.agentList.find(function (x) { return x.userid == eve; }).locationName;
        this.locationId = this.agentList.find(function (x) { return x.userid == eve; }).location;
        this.agentSubDivId = this.agentList.find(function (x) { return x.userid == eve; }).subDivId;
        //this.getAgentLegacyPfDetails(eve);
    };
    LegacypfdetailsComponent.prototype.workerTypeChange = function (eve) {
        //Get subdiv wise rlo bank details
        //this.getSubDivRLOBankDetails(this.agentSubDivId, eve);
        this.getLWCBankDetails(this.agentUserId, eve);
    };
    LegacypfdetailsComponent.prototype.getPFMasterConfigDetails = function () {
        var _this = this;
        this.dataService
            .getPFMasterConfigDetails()
            .subscribe(function (data) {
            _this.pfMasterConfig = data;
        });
    };
    LegacypfdetailsComponent.prototype.getSubDivRLOBankDetails = function (id, workerTypeId) {
        var _this = this;
        this.dataService
            .getSubDivRLOBankDetails(id, workerTypeId)
            .subscribe(function (data) {
            _this.bankDetails = data;
        });
    };
    LegacypfdetailsComponent.prototype.getLWCBankDetails = function (userId, workerTypeId) {
        var _this = this;
        this.dataService
            .getLWCBankDetails(userId, workerTypeId)
            .subscribe(function (data) {
            _this.bankDetails = data;
        });
    };
    //bankChange(eve) {
    //    this.rloOfficeId = this.bankDetails.find(x => x.rloOfficeBankId == eve).rloOfficeId;
    //}
    LegacypfdetailsComponent.prototype.getAgentReceiptBooks = function (userId) {
        var _this = this;
        this.agentReceiptBooks = [];
        if (this.collectionDate != undefined && this.depositDate != undefined) {
            this.dataService
                .getAgentCollectionBooks(userId, new Date(this.collectionDate), new Date(this.depositDate))
                .subscribe(function (data) {
                _this.agentReceiptBooks = data;
            });
        }
    };
    LegacypfdetailsComponent.prototype.getAgentBooks = function (userId) {
        var _this = this;
        this.agentReceiptBooks = [];
        this.dataService
            .getAgentBooks(userId)
            .subscribe(function (data) {
            _this.agentReceiptBooks = data;
        });
    };
    //getAgentLegacyPfDetails(userId: number) {
    //    let collectionAmount = 0;
    //    this.dataService
    //        .getAgentLegacyPfDetails(userId)
    //        .subscribe((data: any) => {
    //            this.pfLegacyMaster = data;
    //            if (this.pfLegacyMaster != null) {
    //                this.depositDate = new Date(this.pfLegacyMaster.depositDate);
    //                this.depositedAmount = this.remainingAmount = this.pfLegacyMaster.depositAmount;
    //                this.workerTypeId = this.pfLegacyMaster.workerTypeId;
    //                this.bankId = this.pfLegacyMaster.bankId;
    //                this.rloOfficeId = this.bankDetails.find(x => x.rloOfficeBankId == this.pfLegacyMaster.bankId).rloOfficeId;
    //                this.payinSlip = this.pfLegacyMaster.payinSlipNo;
    //                if (this.pfLegacyMaster.payInSlip != null) {
    //                    this.payInSlipCertificate = this.pfLegacyMaster.payInSlip;
    //                }
    //                if (this.pfLegacyMaster.pfLegacyDtl1List != null && this.pfLegacyMaster.pfLegacyDtl1List.length > 0) {
    //                    for (let i = 0; i < this.pfLegacyMaster.pfLegacyDtl1List.length; i++) {
    //                        this.pfLegacyMaster.pfLegacyDtl1List[i].monthList = [];
    //                        this.pfLegacyMaster.pfLegacyDtl1List[i].bookName = this.agentReceiptBooks.find(x => x.id == this.pfLegacyMaster.pfLegacyDtl1List[i].bookNo).bookNo;
    //                        let newString = this.getSelectedMonths(this.pfLegacyMaster.pfLegacyDtl1List[i].pfLegacyDtl2List);
    //                        this.pfLegacyMaster.pfLegacyDtl1List[i].monthName = newString.substr(0, newString.length - 1);
    //                        this.pfLegacyMaster.pfLegacyDtl1List[i].monthList = this.getSelectedMonthList(this.pfLegacyMaster.pfLegacyDtl1List[i].pfLegacyDtl2List);
    //                        collectionAmount += this.pfLegacyMaster.pfLegacyDtl1List[i].amountPaid;
    //                        this.pfLegacyMaster.pfLegacyDtl1List[i].selectedMonths = this.getSelectedMonthArray(this.pfLegacyMaster.pfLegacyDtl1List[i].pfLegacyDtl2List);
    //                    }
    //                    this.remainingAmount = this.remainingAmount - collectionAmount;
    //                    this.total = this.total + collectionAmount;
    //                }
    //                //this.getSubDivRLOBankDetails(this.agentSubDivId, this.workerTypeId);
    //                this.getLWCBankDetails(this.agentUserId, this.workerTypeId);
    //            }
    //        });
    //}
    LegacypfdetailsComponent.prototype.getSelectedMonthList = function (pfCollectionDtlList) {
        var monthList = [];
        var _loop_1 = function (i) {
            var id = this_1.months.find(function (x) { return x.monthId == pfCollectionDtlList[i].monthPaid; }).Id;
            var m = this_1.months.filter(function (x) { return x.Id == id; });
            monthList.push(m[0].monthId);
        };
        var this_1 = this;
        for (var i = 0; i < pfCollectionDtlList.length; i++) {
            _loop_1(i);
        }
        return monthList;
    };
    LegacypfdetailsComponent.prototype.getSelectedMonths = function (pfCollectionDtlList) {
        debugger;
        var monName = "";
        var _loop_2 = function (i) {
            var id = this_2.months.find(function (x) { return x.monthId == pfCollectionDtlList[i].monthPaid; }).Id;
            var m = this_2.months.filter(function (x) { return x.Id == id; });
            monName += m[0].monthName + ",";
        };
        var this_2 = this;
        for (var i = 0; i < pfCollectionDtlList.length; i++) {
            _loop_2(i);
        }
        return monName;
    };
    LegacypfdetailsComponent.prototype.getSelectedMonthArray = function (pfCollectionDtlList) {
        var monthsSelected = [];
        var _loop_3 = function (i) {
            var id = this_3.months.find(function (x) { return x.monthId == pfCollectionDtlList[i].monthPaid; }).Id;
            var m = this_3.months.filter(function (x) { return x.Id == id; });
            this_3.pfmonth1 = {};
            this_3.pfmonth1.Id = m[0].Id;
            this_3.pfmonth1.monthId = m[0].monthId;
            this_3.pfmonth1.monthName = m[0].monthName;
            monthsSelected.push(this_3.pfmonth1);
        };
        var this_3 = this;
        for (var i = 0; i < pfCollectionDtlList.length; i++) {
            _loop_3(i);
        }
        return monthsSelected;
    };
    LegacypfdetailsComponent.prototype.saveLegacyPFDetails = function (depositDetails, type) {
        var _this = this;
        debugger;
        if (this.validateDetails(depositDetails, type)) {
            if (depositDetails != null) {
                this.pfLegacyMaster = {};
                this.pfLegacyMaster.pfLegacyMasterId = depositDetails.pfLegacyMasterId;
                this.pfLegacyMaster.agentNo = this.agentUserId;
                this.pfLegacyMaster.depositDate = new Date(this.depositDate);
                //this.pfLegacyMaster.bankId = this.bankId;
                this.pfLegacyMaster.lwcBankCode = this.bankId;
                this.pfLegacyMaster.payinSlipNo = this.payinSlip;
                this.pfLegacyMaster.depositAmount = this.depositedAmount;
                this.pfLegacyMaster.rloOfficeId = this.rloOfficeId;
                this.pfLegacyMaster.workerTypeId = this.workerTypeId;
                this.pfLegacyMaster.isSaveDraft = type;
                this.pfLegacyMaster.createdBy = this.user.user.deptUserid;
                this.pfLegacyMaster.updatedBy = this.user.user.deptUserid;
                this.pfLegacyMaster.payInSlip = this.payInSlipCertificate;
                this.pfLegacyMaster.financialYearId = this.financialYearId;
                //PFLegacyDtl1
                this.pfLegacyMaster.pfLegacyDtl1List = [];
                if (depositDetails.pfLegacyDtl1List != null && depositDetails.pfLegacyDtl1List.length > 0) {
                    var _loop_4 = function (i) {
                        this_4.pfLegacyDtl1 = {};
                        this_4.pfLegacyDtl1.amountPaid = depositDetails.pfLegacyDtl1List[i].amountPaid;
                        this_4.pfLegacyDtl1.benPFAccountId = depositDetails.pfLegacyDtl1List[i].benPFAccountId;
                        this_4.pfLegacyDtl1.benSno = depositDetails.pfLegacyDtl1List[i].benSno;
                        this_4.pfLegacyDtl1.collectionDate = depositDetails.pfLegacyDtl1List[i].collectionDate;
                        this_4.pfLegacyDtl1.bookNo = depositDetails.pfLegacyDtl1List[i].bookNo;
                        this_4.pfLegacyDtl1.receiptNo = depositDetails.pfLegacyDtl1List[i].receiptNo;
                        //PFLegacyDtl2
                        debugger;
                        if (depositDetails.pfLegacyDtl1List[i].selectedMonths != null && depositDetails.pfLegacyDtl1List[i].selectedMonths.length > 0) {
                            this_4.pfLegacyDtl1.pfLegacyDtl2List = [];
                            var _loop_5 = function (j) {
                                this_4.pfLegacyDtl2 = {};
                                debugger;
                                this_4.pfLegacyDtl2.monthPaid = depositDetails.pfLegacyDtl1List[i].selectedMonths[j].monthId;
                                var id = this_4.months.find(function (x) { return x.monthId == depositDetails.pfLegacyDtl1List[i].selectedMonths[j].monthId; }).Id;
                                if (id >= 10)
                                    //this.pfLegacyDtl2.yearPaid = this.fEndYear;
                                    this_4.pfLegacyDtl2.yearPaid = depositDetails.pfLegacyDtl1List[i].selectedMonths[j].year;
                                else
                                    //this.pfLegacyDtl2.yearPaid = this.fStartYear;
                                    this_4.pfLegacyDtl2.yearPaid = depositDetails.pfLegacyDtl1List[i].selectedMonths[j].year;
                                this_4.pfLegacyDtl2.amount = this_4.pfMasterConfig.beneficiaryPFContribution;
                                this_4.pfLegacyDtl1.pfLegacyDtl2List.push(this_4.pfLegacyDtl2);
                            };
                            for (var j = 0; j < depositDetails.pfLegacyDtl1List[i].selectedMonths.length; j++) {
                                _loop_5(j);
                            }
                        }
                        this_4.pfLegacyMaster.pfLegacyDtl1List.push(this_4.pfLegacyDtl1);
                    };
                    var this_4 = this;
                    for (var i = 0; i < depositDetails.pfLegacyDtl1List.length; i++) {
                        _loop_4(i);
                    }
                }
            }
            if (confirm("Are you sure to proceed ")) {
                this.dataService
                    .submitLegacyPFDetails(this.pfLegacyMaster)
                    .then(function (data) {
                    if (data) {
                        if (type == 1)
                            _this.successMessage = "Saved sucessfully";
                        else
                            _this.successMessage = "PF amount sucessfully deposited";
                    }
                    else {
                        _this.successMessage = "Invalid transaction";
                    }
                    _this.successModal.show();
                });
            }
        }
    };
    LegacypfdetailsComponent.prototype.validateDetails = function (depositDetails, id) {
        var isValid = true;
        this.ARNReq = this.depositDateReq = this.depositBankValid = this.depositedAmountReq = this.payInSlipUploaded = this.workerTypeReq = this.financialYearValid = true;
        if (this.agentUserId == undefined || this.agentUserId == 0) {
            this.ARNReq = isValid = false;
        }
        if (this.depositDate == undefined || this.depositDate == null) {
            this.depositDateReq = isValid = false;
        }
        if (this.bankId == undefined || this.bankId == 0) {
            this.depositBankValid = isValid = false;
        }
        if (this.depositedAmount == undefined || this.depositedAmount == null) {
            this.depositedAmountReq = isValid = false;
        }
        if (depositDetails == null || (depositDetails.pfLegacyDtl1List != null && depositDetails.pfLegacyDtl1List.length == 0)) {
            this.noRecords = isValid = false;
        }
        if (this.workerTypeId == undefined || this.workerTypeId == 0) {
            this.workerTypeReq = isValid = false;
        }
        if (this.financialYearId == undefined || this.financialYearId == 0) {
            this.financialYearValid = isValid = false;
        }
        if (this.todayMinDepositDateReq) {
            isValid = false;
        }
        if (id == 2)
            if (this.payInSlipCertificate.fileName == null && this.payInSlipCertificate.fileName == undefined) {
                isValid = this.payInSlipUploaded = false;
            }
        return isValid;
    };
    LegacypfdetailsComponent.prototype.monthSelection = function (pfDetails) {
        var _this = this;
        if (pfDetails.selectedMonths != null && pfDetails.selectedMonths != undefined && pfDetails.selectedMonths.length > 0) {
            var _loop_6 = function (i) {
                pfDetails.selectedMonths.find(function (x) { return x.Id == pfDetails.selectedMonths[i].Id; }).monthId = this_5.months.find(function (x) { return x.Id == pfDetails.selectedMonths[i].Id; }).monthId;
            };
            var this_5 = this;
            for (var i = 0; i < pfDetails.selectedMonths.length; i++) {
                _loop_6(i);
            }
            pfDetails.selectedMonths.filter(function (x) { return x.amount = _this.pfMasterConfig.beneficiaryPFContribution; });
            pfDetails.selectedMonths.filter(function (x) { return x.year = (x.Id >= 10 ? _this.fEndYear : _this.fStartYear); });
        }
    };
    LegacypfdetailsComponent.prototype.onItemSelect = function (eve, pfDetails, index) {
        var _this = this;
        this.pfSelectedMonth = eve;
        this.getPFMasterConfigDetails();
        this.pfTotalAmount = 0;
        //let id = this.months.find(x => x.monthId == eve.monthId).Id;
        var id = this.months.find(function (x) { return x.Id == eve.Id; }).Id;
        if (id >= 10) {
            //pfDetails.selectedMonths.find(x => x.monthId == eve.monthId).year = this.fEndYear;
            pfDetails.selectedMonths.find(function (x) { return x.Id == eve.Id; }).year = this.fEndYear;
            pfDetails.selectedMonths.find(function (x) { return x.Id == eve.Id; }).monthId = this.months.find(function (x) { return x.Id == eve.Id; }).monthId;
        }
        else {
            //pfDetails.selectedMonths.find(x => x.monthId == eve.monthId).year = this.fStartYear;
            pfDetails.selectedMonths.find(function (x) { return x.Id == eve.Id; }).year = this.fStartYear;
            pfDetails.selectedMonths.find(function (x) { return x.Id == eve.Id; }).monthId = this.months.find(function (x) { return x.Id == eve.Id; }).monthId;
        }
        pfDetails.selectedMonths.filter(function (x) { return x.year = (x.Id >= 10 ? _this.fEndYear : _this.fStartYear); });
        this.dataService
            //.isValidMonthSubmitted(this.beneficiary.benSno, eve.monthId, pfDetails.selectedMonths.find(x => x.monthId == eve.monthId).year)
            .isValidMonthSubmitted(this.beneficiary.benSno, pfDetails.selectedMonths.find(function (x) { return x.Id == eve.Id; }).monthId, pfDetails.selectedMonths.find(function (x) { return x.Id == eve.Id; }).year)
            .subscribe(function (data) {
            debugger;
            if (data) {
                _this.isValidMonth = false;
                alert("already added please select another month");
                return;
            }
            else {
                _this.isValidMonth = true;
                debugger;
                _this.monthContributionAmount = pfDetails.selectedMonths.length * _this.pfMasterConfig.beneficiaryPFContribution;
                if (pfDetails.isEdit) {
                    pfDetails.amountPaid = _this.monthContributionAmount;
                }
                else {
                    debugger;
                    _this.newAttribute.amountPaid = _this.monthContributionAmount;
                }
                //debugger;
                //if (this.colMonths != undefined && this.colMonths != null) {
                //    var test = new Date(pfDetails.selectedMonths.find(x => x.Id == eve.Id).year, pfDetails.selectedMonths.find(x => x.Id == eve.Id).monthId - 1, 1);
                //    var timeDiff1 = (test.getTime() - this.colMonths.getTime());
                //    var diffDays1 = Math.ceil(timeDiff1 / (1000 * 3600 * 24));
                //    if (diffDays1 < 0) {
                //        alert("Please select another month after beneficiary registration month");
                //    }
                //}
            }
        });
    };
    LegacypfdetailsComponent.prototype.onItemDeSelect = function (eve, pfDetails) {
        debugger;
        this.monthContributionAmount = pfDetails.selectedMonths.length * this.pfMasterConfig.beneficiaryPFContribution;
        if (pfDetails.isEdit) {
            pfDetails.amountPaid = this.monthContributionAmount;
        }
        else {
            debugger;
            this.newAttribute.amountPaid = this.monthContributionAmount;
        }
    };
    LegacypfdetailsComponent.prototype.pfMonthChange = function (value) {
        var _this = this;
        this.pfSelectedMonth = value;
        this.getPFMasterConfigDetails();
        this.pfTotalAmount = 0;
        var s = null;
        var id = this.months.find(function (x) { return x.monthId == value; }).Id;
        var m = this.months.filter(function (x) { return x.Id == id; });
        s = m;
        if (s != null && s != undefined) {
            this.pfSelectedMonths = s;
            this.pfSelectedMonths.filter(function (x) { return x.year = (x.Id >= 10 ? _this.fEndYear : _this.fStartYear); });
        }
        this.dataService
            .isValidMonthSubmitted(this.beneficiary.benSno, this.pfSelectedMonths[0].monthId, this.pfSelectedMonths[0].year)
            .subscribe(function (data) {
            if (data) {
                alert("already added please select another month");
            }
        });
    };
    LegacypfdetailsComponent.prototype.receiptNoChange = function (bookNo, receiptNo) {
        var _this = this;
        this.nextReceiptNo = null;
        this.dataService
            .isValidBookReceipt(bookNo, receiptNo)
            .subscribe(function (data) {
            if (data) {
                alert("already added please select another book and receipt");
            }
            else {
                if (receiptNo < _this.receiptNoFrom || receiptNo > _this.receiptNoTo) {
                    _this.isReceiptNoRange = true;
                }
                else {
                    _this.isReceiptNoRange = false;
                    //let recNo = Number(receiptNo) + 1; debugger;
                    //if (recNo >= this.receiptNoFrom && recNo <= this.receiptNoTo)
                    //    this.nextReceiptNo = recNo;
                }
            }
        });
    };
    LegacypfdetailsComponent.prototype.searchSSINNo = function (ssnNo) {
        var _this = this;
        this.isValidSave = this.isMonthEnable = true;
        this.benficiaryInactive = this.isInterestCalculated = this.benRegDateMinFinancialYear = this.validBenLocation = false;
        if (ssnNo != undefined && ssnNo.trim() != "") {
            this.clearValues();
            this.nextSSIN = ssnNo.trim();
            this.dataService
                .getLegacyPFBeneficiaryBasicDetailsByID(ssnNo.trim(), true)
                .subscribe(function (data) {
                debugger;
                _this.beneficiary = data;
                if (_this.beneficiary != null) {
                    _this.isValidSave = true;
                    //if (this.beneficiary.isActive && this.beneficiary.status == 1) {
                    //----------Ben location code
                    //if (this.beneficiary.benBmc != null && (this.locationId != undefined && this.locationId != null)) {
                    //    if (this.beneficiary.benBmc == this.locationId)
                    //    {
                    if (_this.financialYearId != undefined && _this.financialYearId > 0) {
                        //BenRegDate <= financial year end date
                        var financialYear = _this.finanacialYearList.find(function (x) { return x.financialYearId == _this.financialYearId; });
                        if (financialYear != null && (_this.beneficiary.benRegDate != undefined || _this.beneficiary.benRegDate != null)) {
                            var endDate = new Date(financialYear.endDate);
                            var regDate = new Date(_this.beneficiary.benRegDate);
                            var timeDiff = (endDate.getTime() - regDate.getTime());
                            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                            if (diffDays >= 0) {
                                _this.dataService
                                    .isInterestCalculatedforBen(_this.financialYearId, _this.beneficiary.benSno)
                                    .subscribe(function (data2) {
                                    if (!data2) {
                                        //this.ssinValid = true;
                                        _this.isValidSave = false;
                                        _this.isMonthEnable = false;
                                        //if (this.beneficiary.benSSINOrPFAccountNo == "")
                                        //    this.validPFNo = false;
                                        //else
                                        //    this.validPFNo = true;
                                        if (_this.beneficiary.benOccupationId != null && (_this.workerTypeId != null && _this.workerTypeId != undefined)) {
                                            if (_this.beneficiary.benOccupationId == _this.workerTypeId)
                                                _this.validWTBen = false;
                                            else
                                                _this.validWTBen = true;
                                        }
                                        if (_this.newAttribute.ssI_Number == undefined || _this.newAttribute.ssI_Number == "") {
                                            _this.beneficiary.benFullName = "";
                                            _this.beneficiary.benSSINOrPFAccountNo = "";
                                        }
                                    }
                                    else
                                        _this.isInterestCalculated = true;
                                });
                            }
                            else
                                _this.benRegDateMinFinancialYear = true;
                        }
                    }
                    //}
                    //else {
                    //    this.ssinValid = false;
                    //}
                    //----------Ben location code
                    //    } 
                    //    else
                    //        this.validBenLocation = true;
                    //}
                    //--------------
                }
                //else {
                //    this.ssinValid = false;
                //}
            });
        }
        else {
            this.beneficiary = {};
            this.ssinValid = true;
        }
    };
    LegacypfdetailsComponent.prototype.clearValues = function () {
        this.beneficiary = {};
        this.pfSelectedMonths = [];
        this.collectionDateReq = true;
        this.ssinValid = true;
        this.receiptNoIsValid = true;
        this.bookNoIsValid = true;
        this.pfMonthIsValid = true;
        this.depositedAmountReq = true;
        this.depositBankValid = true;
        this.ARNReq = true;
        this.amountReq = true;
        this.workerTypeReq = true;
    };
    LegacypfdetailsComponent.prototype.okClick = function () {
        this.successModal.hide();
        //this.clearValues();
        //this.pfLegacyMaster = {} as PFLegacyMaster;
        //this.pfLegacyDtl1List =[];
        //this.pfLegacyDtl1 = {} as PFLegacyDtl1;
        //this.pfLegacyDtl2 = {} as PFLegacyDtl2;
        //this.payInSlipCertificate = {} as PayInSlipAttachmentModel;
        //this.depositDate = null;
        //this.payinSlip = null;
        //this.depositedAmount = null;
        //this.remainingAmount = 0;
        //this.total = 0;
        //this.agentUserId = 0;
        //this.workerTypeId = 0;
        //this.bankId = 0;
        //this.showAddRow = true;
        window.location.href = "Agent/bulkpfdepositlist";
    };
    LegacypfdetailsComponent.prototype.addReceiptBook = function () {
        window.location.href = "pfconfig/receiptbook";
    };
    LegacypfdetailsComponent.prototype.cancleClick = function () {
        if (Number(this.user.user.userTpe) == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__["UserType"].ServiceProvider || Number(this.user.user.userTpe) == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__["UserType"].Others || Number(this.user.user.userTpe) == _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__["UserType"].CA) {
            window.location.href = "Agent/bulkpfdepositlist"; //"Agent/AgentDashboard";
        }
        else
            window.location.href = "Home/DeptDashboard";
    };
    LegacypfdetailsComponent.prototype.depositedAmountChange = function (amount) {
        if (this.total == 0)
            this.remainingAmount = amount;
        else {
            this.remainingAmount = amount - this.total;
            if (this.total > 0 && this.total == amount)
                this.showAddRow = false;
            else {
                this.showAddRow = true;
                if (Number(this.depositedAmount) < Number(this.total)) {
                    alert("Collection Amount exceeds Deposit Amount");
                }
            }
        }
    };
    LegacypfdetailsComponent.prototype.getWorkerTypeDetails = function () {
        var _this = this;
        this.dataService
            .getWorkerTypeMasterData()
            .subscribe(function (data) {
            _this.WorkerTypeList = data;
        });
    };
    LegacypfdetailsComponent.prototype.depositDateChange = function (eve) {
        debugger;
        this.todayMinDepositDateReq = false;
        this.disableCollectionDate = false;
        if (eve != undefined) {
            var deposDate = new Date(eve);
            var timeDiff = (this.toDayDate.getTime() - deposDate.getTime());
            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
            if (diffDays >= 0) {
                this.collectionMinDt = eve;
            }
            else
                this.todayMinDepositDateReq = true;
            this.getfinanacialYearListDetails(deposDate);
        }
    };
    LegacypfdetailsComponent.prototype.bookChange = function (args) {
        var _this = this;
        this.bookId = args.target.value;
        if (this.agentReceiptBooks != null) {
            this.agentReceiptBooks.forEach(function (x) {
                if (x.id == args.target.value) {
                    _this.minDt = new Date(x.date);
                    _this.receiptNoFrom = x.receiptNoFrom;
                    _this.receiptNoTo = x.receiptNoTo;
                }
            });
        }
    };
    LegacypfdetailsComponent.prototype.onFileChanged = function (inputValue) {
        var _this = this;
        var file = inputValue.target.files[0];
        if (file.type === "application/pdf" || file.type.includes("image/")) {
            if (file.size > 2000000) {
                alert("File is too big!");
                return;
            }
            ;
            var myReader = new FileReader();
            myReader.onloadend = function (e) {
                var model = {};
                model.fileName = file.name;
                model.filePath = "test";
                model.fileContent = myReader.result.toString().split(',')[1];
                model.statusId = 1;
                model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_6__["AttachmentType"].PayinSlip;
                model.createdBy = _this.user.user.deptUserid;
                _this.payInSlipCertificate = model;
            };
            myReader.readAsDataURL(file);
        }
        else {
            alert("Only accept pdf and images");
        }
    };
    LegacypfdetailsComponent.prototype.getActiveFinancialYear = function () {
        var _this = this;
        this.dataService
            .getActiveFinancialYear()
            .subscribe(function (data) {
            _this.activeYear = data;
        });
    };
    LegacypfdetailsComponent.prototype.collectionDateChange = function (eve) {
        var _this = this;
        debugger;
        this.colMonths = null;
        this.DepositMinDateReq = this.todayMinCollectionDateReq = this.isColDateinRangeYear = this.benRegDateMinCollectionDate = false;
        if (eve != undefined && this.depositDate != undefined) {
            this.collectionDate = new Date(eve);
            var dDate = new Date(this.depositDate);
            var timeDiff = (dDate.getTime() - this.collectionDate.getTime());
            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
            if (diffDays >= 0) {
                debugger;
                if (this.financialYearId != undefined && this.financialYearId > 0) {
                    this.dataService
                        .isValidCollectionYear(this.financialYearId, this.collectionDate)
                        .subscribe(function (data1) {
                        debugger;
                        if (data1) {
                            var timeDiff1 = (_this.toDayDate.getTime() - _this.collectionDate.getTime());
                            var diffDays1 = Math.ceil(timeDiff1 / (1000 * 3600 * 24));
                            if (diffDays1 >= 0) {
                                //BenRegDate < collection Date
                                if (_this.beneficiary != null && (_this.beneficiary.benRegDate != undefined || _this.beneficiary.benRegDate != null)) {
                                    var regDate1 = new Date(_this.beneficiary.benRegDate);
                                    debugger;
                                    //var regDate = new Date(regDate1.getFullYear(), regDate1.getMonth() + 1, regDate1.getDate());
                                    var regDate = new Date(regDate1.getFullYear(), regDate1.getMonth() + 1, 1);
                                    _this.colMonths = new Date(regDate);
                                    var timeDiff2 = (_this.collectionDate.getTime() - regDate.getTime());
                                    var diffDays2 = Math.ceil(timeDiff2 / (1000 * 3600 * 24));
                                    if (diffDays2 >= 0) {
                                        //------------------------
                                        _this.dataService
                                            .getCollectionFinancialYear(new Date(eve))
                                            .subscribe(function (data) {
                                            _this.collectionYear = data;
                                            if (_this.collectionYear != null) {
                                                _this.currentyear = new Date(eve).getFullYear();
                                                var currentMonth = new Date(eve).getMonth() + 1;
                                                if (currentMonth <= 3) {
                                                    _this.fStartYear = _this.currentyear - 1;
                                                    _this.fEndYear = _this.currentyear;
                                                }
                                                else {
                                                    _this.fStartYear = _this.currentyear;
                                                    _this.fEndYear = _this.currentyear + 1;
                                                }
                                            }
                                            _this.getAgentReceiptBooks(_this.agentUserId);
                                        });
                                    }
                                    else
                                        _this.benRegDateMinCollectionDate = true;
                                }
                            }
                            else
                                _this.todayMinCollectionDateReq = true;
                        }
                        else {
                            _this.isColDateinRangeYear = true;
                        }
                    });
                }
            }
            else {
                this.DepositMinDateReq = true;
            }
        }
    };
    LegacypfdetailsComponent.prototype.getLegacyPFCollectionDetails = function (pfLegacyMasterId) {
        var _this = this;
        var collectionAmount = 0;
        this.dataService
            .getLegacyPFCollectionDetails(pfLegacyMasterId)
            .subscribe(function (data) {
            debugger;
            _this.pfLegacyMaster = data;
            if (_this.pfLegacyMaster != null) {
                _this.depositDate = new Date(_this.pfLegacyMaster.depositDate);
                if (_this.pfLegacyMaster.pfLegacyDtl1List != null && _this.pfLegacyMaster.pfLegacyDtl1List.length > 0) {
                    _this.agentReceiptBooks = [];
                    var x = _this.pfLegacyMaster.pfLegacyDtl1List.sort(function (a, b) { return new Date(b.collectionDate).getTime() - new Date(a.collectionDate).getTime(); });
                    if (x[_this.pfLegacyMaster.pfLegacyDtl1List.length - 1].collectionDate != undefined && _this.depositDate != undefined) {
                        _this.dataService
                            .getAgentCollectionBooks(_this.agentUserId, new Date(x[_this.pfLegacyMaster.pfLegacyDtl1List.length - 1].collectionDate), new Date(_this.depositDate))
                            .subscribe(function (data1) {
                            _this.agentReceiptBooks = data1;
                            _this.depositedAmount = _this.remainingAmount = _this.pfLegacyMaster.depositAmount;
                            _this.workerTypeId = _this.pfLegacyMaster.workerTypeId;
                            //this.getSubDivRLOBankDetails(this.agentSubDivId, this.workerTypeId);
                            _this.getLWCBankDetails(_this.agentUserId, _this.workerTypeId);
                            //this.bankId = this.pfLegacyMaster.bankId;
                            _this.bankId = _this.pfLegacyMaster.lwcBankCode;
                            _this.rloOfficeId = _this.pfLegacyMaster.rloOfficeId; //this.bankDetails.find(x => x.rloOfficeBankId == this.pfLegacyMaster.bankId).rloOfficeId;
                            _this.financialYearId = _this.pfLegacyMaster.financialYearId;
                            _this.payinSlip = _this.pfLegacyMaster.payinSlipNo;
                            if (_this.pfLegacyMaster.payInSlip != null) {
                                _this.payInSlipCertificate = _this.pfLegacyMaster.payInSlip;
                            }
                            if (_this.pfLegacyMaster.pfLegacyDtl1List != null && _this.pfLegacyMaster.pfLegacyDtl1List.length > 0) {
                                debugger;
                                _this.pfLegacyDtl1List = _this.pfLegacyMaster.pfLegacyDtl1List;
                                var _loop_7 = function (i) {
                                    _this.pfLegacyMaster.pfLegacyDtl1List[i].monthList = [];
                                    debugger;
                                    _this.pfLegacyMaster.pfLegacyDtl1List[i].bookName = _this.agentReceiptBooks.find(function (x) { return x.id == _this.pfLegacyMaster.pfLegacyDtl1List[i].bookNo; }).bookNo;
                                    var newString = _this.getSelectedMonths(_this.pfLegacyMaster.pfLegacyDtl1List[i].pfLegacyDtl2List);
                                    _this.pfLegacyMaster.pfLegacyDtl1List[i].monthName = newString.substr(0, newString.length - 1);
                                    _this.pfLegacyMaster.pfLegacyDtl1List[i].monthList = _this.getSelectedMonthList(_this.pfLegacyMaster.pfLegacyDtl1List[i].pfLegacyDtl2List);
                                    collectionAmount = collectionAmount + _this.pfLegacyMaster.pfLegacyDtl1List[i].amountPaid;
                                    _this.pfLegacyMaster.pfLegacyDtl1List[i].selectedMonths = _this.getSelectedMonthArray(_this.pfLegacyMaster.pfLegacyDtl1List[i].pfLegacyDtl2List);
                                };
                                for (var i = 0; i < _this.pfLegacyMaster.pfLegacyDtl1List.length; i++) {
                                    _loop_7(i);
                                }
                                _this.remainingAmount = _this.remainingAmount - collectionAmount;
                                _this.total = _this.total + collectionAmount;
                                debugger;
                                var pfDtlList = _this.pfLegacyMaster.pfLegacyDtl1List[_this.pfLegacyMaster.pfLegacyDtl1List.length - 1];
                                if (pfDtlList != null) {
                                    _this.collectionDate = new Date(pfDtlList.collectionDate);
                                    _this.bookId = pfDtlList.bookNo;
                                    _this.nextReceiptNo = Number(pfDtlList.receiptNo) + 1;
                                    _this.newAttribute.collectionDate = _this.collectionDate;
                                    _this.newAttribute.bookNo = _this.agentReceiptBooks.find(function (x) { return x.id == _this.bookId; }).id;
                                    _this.newAttribute.receiptNo = _this.nextReceiptNo;
                                }
                            }
                            if (_this.total > 0 && _this.total == _this.depositedAmount)
                                _this.showAddRow = false;
                            else
                                _this.showAddRow = true;
                        });
                    }
                }
            }
        });
    };
    LegacypfdetailsComponent.prototype.getfinanacialYearListDetails = function (deposDate) {
        var _this = this;
        this.dataService
            .getfinanacialYearListDetails(deposDate)
            .subscribe(function (data) {
            _this.finanacialYearList = data;
            if (_this.finanacialYearList != null && _this.finanacialYearList.length > 0) {
                _this.financialYearId = _this.finanacialYearList[_this.finanacialYearList.length - 1].financialYearId;
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('successModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_1__["ModalDirective"])
    ], LegacypfdetailsComponent.prototype, "successModal", void 0);
    LegacypfdetailsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-legacypfdetails',
            template: __webpack_require__(/*! ./legacypfdetails.component.html */ "./src/app/claim/legacypfdetails/legacypfdetails.component.html"),
            styles: [__webpack_require__(/*! ./legacypfdetails.component.css */ "./src/app/claim/legacypfdetails/legacypfdetails.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_4__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_5__["UserService"]])
    ], LegacypfdetailsComponent);
    return LegacypfdetailsComponent;
}());



/***/ }),

/***/ "./src/app/claim/models/pf.months.model.ts":
/*!*************************************************!*\
  !*** ./src/app/claim/models/pf.months.model.ts ***!
  \*************************************************/
/*! exports provided: FinancialYearMonths, Months, CollectionMonths, PfMonths, PfPaidDetails, PFMasterConfigAmount */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FinancialYearMonths", function() { return FinancialYearMonths; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Months", function() { return Months; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollectionMonths", function() { return CollectionMonths; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PfMonths", function() { return PfMonths; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PfPaidDetails", function() { return PfPaidDetails; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PFMasterConfigAmount", function() { return PFMasterConfigAmount; });
var FinancialYearMonths = /** @class */ (function () {
    function FinancialYearMonths() {
    }
    return FinancialYearMonths;
}());

var Months = [
    { Id: 1, monthId: 4, monthName: 'April' },
    { Id: 2, monthId: 5, monthName: 'May' },
    { Id: 3, monthId: 6, monthName: 'June' },
    { Id: 4, monthId: 7, monthName: 'July' },
    { Id: 5, monthId: 8, monthName: 'August' },
    { Id: 6, monthId: 9, monthName: 'September' },
    { Id: 7, monthId: 10, monthName: 'October' },
    { Id: 8, monthId: 11, monthName: 'November' },
    { Id: 9, monthId: 12, monthName: 'December' },
    { Id: 10, monthId: 1, monthName: 'January' },
    { Id: 11, monthId: 2, monthName: 'February' },
    { Id: 12, monthId: 3, monthName: 'March' },
];
var CollectionMonths = [
    { Id: 0, monthId: 0, monthName: 'March' },
    { Id: 1, monthId: 4, monthName: 'April' },
    { Id: 2, monthId: 5, monthName: 'May' },
    { Id: 3, monthId: 6, monthName: 'June' },
    { Id: 4, monthId: 7, monthName: 'July' },
    { Id: 5, monthId: 8, monthName: 'August' },
    { Id: 6, monthId: 9, monthName: 'September' },
    { Id: 7, monthId: 10, monthName: 'October' },
    { Id: 8, monthId: 11, monthName: 'November' },
    { Id: 9, monthId: 12, monthName: 'December' },
    { Id: 10, monthId: 1, monthName: 'January' },
    { Id: 11, monthId: 2, monthName: 'February' },
    { Id: 12, monthId: 3, monthName: 'March' },
];
var PfMonths = /** @class */ (function () {
    function PfMonths() {
    }
    return PfMonths;
}());

var PfPaidDetails = /** @class */ (function () {
    function PfPaidDetails() {
    }
    return PfPaidDetails;
}());

var PFMasterConfigAmount = /** @class */ (function () {
    function PFMasterConfigAmount() {
    }
    return PFMasterConfigAmount;
}());



/***/ }),

/***/ "./src/app/claim/payinslip-deposited-list/payinslip-deposited-list.component.css":
/*!***************************************************************************************!*\
  !*** ./src/app/claim/payinslip-deposited-list/payinslip-deposited-list.component.css ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/payinslip-deposited-list/payinslip-deposited-list.component.html":
/*!****************************************************************************************!*\
  !*** ./src/app/claim/payinslip-deposited-list/payinslip-deposited-list.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div id=\"content\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>PF PayIn Slips Deposited List </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <!--<div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>-->\r\n                        <div class=\"ssv-search\">\r\n                            <input type=\"text\" name=\"depositfromDateSearch\" autocomplete=\"off\" class=\"advancedSearchTextbox\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                   placeholder=\"Deposit From Date Search..\" [maxDate]=\"toDayDate\"\r\n                                   #depositfromDateSearch=\"ngModel\" value=\"{{ depositFromDate | date: 'dd/MM/yyyy' }}\" [(ngModel)]=\"depositFromDate\" />\r\n                            <input type=\"text\" name=\"deposittoDateSearch\" autocomplete=\"off\" class=\"advancedSearchTextbox\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                   placeholder=\"Deposit To Date Search..\" [maxDate]=\"toDayDate\" [minDate]=\"depositFromDate\"\r\n                                   #deposittoDateSearch=\"ngModel\" value=\"{{ depositToDate | date: 'dd/MM/yyyy' }}\" [(ngModel)]=\"depositToDate\" />\r\n                            <button (click)=\"GetResults()\"><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n\r\n                        <p></p>\r\n\r\n                        <table class=\"table table-striped\" [mfData]=\"pFDepositDetails.results\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"agentCode\">Agent Code</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"agentName\">Agent Name</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"depositAmount\">Deposit Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"depositDateString\">Deposit Date</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"bankDepositDateString\">Bank Deposit Date</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"transactionType\">Transaction Type</mfDefaultSorter>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let deposits of mf.data|grdFilter: {agentCode:searchText, agentName: searchText, depositAmount: searchText, depositDateString: searchText, bankDepositDateString: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <a (click)=\"viewCollections(deposits.pfDepositId,deposits.transactionType)\" title=\"View\" class=\"txt-color-red\"><i class=\"fa fa-eye\"></i></a>\r\n                                        <a *ngIf=\"deposits.transactionType !='Legacy'\" (click)=\"viewPayInSlip(deposits.pfDepositId,deposits.transactionType)\" title=\"PayInSlip\" class=\"txt-color-red\"><i class=\"fa fa-file-pdf-o\"></i></a>\r\n                                        <a (click)=\"viewFormIV(deposits)\" *ngIf=\"deposits.transactionType =='Legacy'\"title=\"View Form IV\" class=\"txt-color-red\"><i class=\"fa fa-file-o\"></i></a>\r\n                                    </td>\r\n                                    <td>{{deposits.agentCode}}</td>\r\n                                    <td>{{deposits.agentName}}</td>\r\n                                    <td>{{deposits.depositAmount}}</td>\r\n                                    <td>{{deposits.depositDateString}}</td>\r\n                                    <td>{{deposits.bankDepositDateString}}</td>\r\n                                    <td>{{deposits.transactionType}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"9\">\r\n                                        <div>\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\" [maxSize]=\"10\" [rotate]=\"true\"></ngb-pagination>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</div>\r\n<div bsModal #attachModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" backdrop=\"static\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"attachModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Attachment Details</h4>\r\n            </div>\r\n            <div class=\"modal-body\" style=\"max-height:500px\">\r\n                <div class=\"row\" style=\"display:inline-flex;width:100%\">\r\n                    <div style=\"width:100%;padding:5px;overflow:scroll;max-height:470px\">\r\n                        <accordion>\r\n                            <accordion-group heading=\"{{item?.fileName}}\" *ngFor=\"let item of payInSlipCertificate\">\r\n                            <div *ngIf=\"item?.fileName?.split('.')[item?.fileName?.split('.').length-1]!='pdf'\">\r\n                                <img [src]=\"'data:image/'+item?.fileName?.split('.')[item?.fileName?.split('.').length-1]+';base64,'+ item?.fileContent\" style=\"max-width:100%\" />\r\n                            </div>\r\n                            <div *ngIf=\"item?.fileName?.split('.')[item?.fileName?.split('.').length-1]=='pdf'\">\r\n                                <object [attr.data]=\"item?.attachmenturl\" style=\"width:100%;height:400px\" type=\"application/pdf\"></object>\r\n                            </div>\r\n                            </accordion-group>\r\n                        </accordion>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"attachModal.hide()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #collectionsModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" backdrop=\"static\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"collectionsModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Collection Details</h4>\r\n            </div>\r\n            <div class=\"modal-body\" style=\"max-height:500px\">\r\n                <div class=\"row\">\r\n                    <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n                        <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                            <header>\r\n                                <h2>PF Collections </h2>\r\n                            </header>\r\n                            <!-- widget div-->\r\n                            <div>\r\n\r\n                                <div class=\"jarviswidget-editbox\">\r\n\r\n\r\n                                </div>\r\n\r\n                                <div class=\"widget-body no-padding\" *ngIf=\"isVisible1\">\r\n                                    <div class=\"ssv-search\">\r\n                                        <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                                        <button><i class=\"fa fa-search\"></i></button>\r\n                                    </div>\r\n\r\n\r\n                                    <p></p>\r\n\r\n                                    <table id=\"datatable_fixed_column\" class=\"table table-striped table-bordered\"\r\n                                           [mfData]=\"pfCollectionDetails\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\" width=\"100%\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>\r\n                                                    <mfDefaultSorter by=\"ssI_Number\">SSIN</mfDefaultSorter>\r\n                                                </th>\r\n                                                <th>\r\n                                                    <mfDefaultSorter by=\"benFullName\">Beneficiary Name</mfDefaultSorter>\r\n                                                </th>\r\n                                                <th>\r\n                                                    <mfDefaultSorter by=\"receiptNo\">Receipt No</mfDefaultSorter>\r\n\r\n                                                </th>\r\n                                                <th>\r\n                                                    <mfDefaultSorter by=\"bookNo\">Book No</mfDefaultSorter>\r\n\r\n                                                </th>\r\n                                                <th>\r\n                                                    <mfDefaultSorter by=\"collectionDateString\">Collection Date</mfDefaultSorter>\r\n                                                </th>\r\n\r\n                                                <th>\r\n                                                    <mfDefaultSorter by=\"paidFromMonth\">Paid From</mfDefaultSorter>\r\n                                                </th>\r\n                                                <th>\r\n                                                    <mfDefaultSorter by=\"paidToMonth\">Paid To</mfDefaultSorter>\r\n                                                </th>\r\n                                                <th>\r\n                                                    <mfDefaultSorter by=\"collectionAmount\">Amount</mfDefaultSorter>\r\n                                                </th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr *ngFor=\"let col of mf.data; let i=index;\">\r\n                                                <td>{{col.ssI_Number}}</td>\r\n                                                <td>{{col.benFullName}}</td>\r\n                                                <td>{{col.receiptNo}}</td>\r\n                                                <td>{{col.bookNo}}</td>\r\n                                                <td>{{col.collectionDateString}}</td>\r\n                                                <td>{{col.paidFromMonth}}</td>\r\n                                                <td>{{col.paidToMonth}}</td>\r\n                                                <td>{{col.collectionAmount}}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                        <tfoot>\r\n                                            <tr>\r\n                                                <td colspan=\"8\">\r\n                                                    <div>\r\n                                                        <mfBootstrapPaginator></mfBootstrapPaginator>\r\n                                                    </div>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tfoot>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </article>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"collectionsModal.hide()\">\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #attachModalFormIV=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" backdrop=\"static\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"attachModalFormIV.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Form-IV</h4>\r\n            </div>\r\n            <div class=\"modal-body\" style=\"max-height:600px\">\r\n                <div class=\"row\" style=\"display:inline-flex;width:100%\">\r\n                    <div style=\"display:inline-flex;width:100%\">\r\n                        <div style=\"width:100%;padding:5px;overflow:scroll;max-height:470px;min-height:inherit\">\r\n                            <div>\r\n                                <!--<img [src]=\"ImageSource\" style=\"max-width:100%\" />-->\r\n                                <object [attr.data]=\"attachmenturl\" style=\"width:100%;height:400px\" type=\"application/pdf\"></object>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-primary\" (click)=\"attachModalFormIV.hide()\">\r\n                            Ok\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/claim/payinslip-deposited-list/payinslip-deposited-list.component.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/claim/payinslip-deposited-list/payinslip-deposited-list.component.ts ***!
  \**************************************************************************************/
/*! exports provided: PayInSlipDepositedListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PayInSlipDepositedListComponent", function() { return PayInSlipDepositedListComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var PayInSlipDepositedListComponent = /** @class */ (function () {
    function PayInSlipDepositedListComponent(router, route, dataService, user, sanitizer) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.sanitizer = sanitizer;
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
        this.pFDepositDetails = {};
        this.payInSlipUploaded = true;
        this.dateOfDepostValid = true;
        this.payInSlipNumberValid = true;
        this.payInSlipCertificate = [];
        this.isVisible = false;
        this.isVisible1 = false;
        this.pfCollectionDetails = [];
        this.formIVContent = {};
        this.FormIVDetail = {};
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        this.toDayDate = new Date();
    }
    PayInSlipDepositedListComponent.prototype.ngOnInit = function () {
        debugger;
        this.getPFDepositedItemsByAgent(this.user.user.deptUserid, Number(this.user.user.userTpe), "0", "0", this.page, this.pageSize);
    };
    PayInSlipDepositedListComponent.prototype.getPFDepositedItemsByAgent = function (userId, userType, depositFromDate, depositToDate, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getPFDepositStatusDetailsByUser(userId, userType, depositFromDate, depositToDate, pageNo, pageSize)
            .subscribe(function (data) {
            debugger;
            _this.pFDepositDetails = data;
            _this.totalRows = _this.pFDepositDetails.rowCount;
            //this.payInSlipCertificate[0] = this.pFDepositDetails.results[0].payInSlip;
        });
    };
    PayInSlipDepositedListComponent.prototype.changepage = function (page) {
        if (this.depositFromDate != null && this.depositFromDate != undefined)
            this.strDepositFromDate = this.depositFromDate.toISOString();
        else
            this.strDepositFromDate = "0";
        if (this.depositToDate != null && this.depositToDate != undefined)
            this.strDepositToDate = this.depositToDate.toISOString();
        else
            this.strDepositToDate = "0";
        this.getPFDepositedItemsByAgent(this.user.user.deptUserid, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["PFDepositeStatus"].deposited, this.strDepositFromDate, this.strDepositToDate, page, this.pageSize);
    };
    PayInSlipDepositedListComponent.prototype.viewPayInSlipOld = function (payInSlip) {
        debugger;
        this.isVisible = true;
        //if (payInSlip.fileName.split('.')[payInSlip.fileName.split('.').length - 1] == 'pdf') {
        //    this.payInSlipCertificate.attachmenturl = this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + payInSlip.fileContent);
        //}
        if (payInSlip != null && payInSlip.length > 0) {
            for (var j = 0; j < payInSlip.length; j++) {
                //let attachment = this.claim.educationDetails.educationDetailList[i].attachmentDetailsList[j];
                if (payInSlip[j].fileName.split('.')[payInSlip[j].fileName.split('.').length - 1] == 'pdf') {
                    payInSlip[j].attachmenturl = this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + payInSlip[j].fileContent);
                }
            }
            this.payInSlipCertificate = payInSlip;
        }
        this.attachModal.show();
    };
    PayInSlipDepositedListComponent.prototype.viewPayInSlip = function (pfDepositId, transactionType) {
        var _this = this;
        debugger;
        this.isVisible = true;
        this.dataService.getPFDepositAttachments(pfDepositId)
            .subscribe(function (data) {
            debugger;
            _this.payInSlipCertificate = data;
            if (_this.payInSlipCertificate != null && _this.payInSlipCertificate.length > 0) {
                for (var j = 0; j < _this.payInSlipCertificate.length; j++) {
                    if (_this.payInSlipCertificate[j].fileName.split('.')[_this.payInSlipCertificate[j].fileName.split('.').length - 1] == 'pdf') {
                        _this.payInSlipCertificate[j].attachmenturl = _this.sanitizer.bypassSecurityTrustResourceUrl("data:application/pdf;base64," + _this.payInSlipCertificate[j].fileContent);
                    }
                }
            }
            _this.attachModal.show();
        });
    };
    PayInSlipDepositedListComponent.prototype.viewCollections = function (pfDepositId, transactionType) {
        var _this = this;
        this.isVisible1 = true;
        if (transactionType.toLowerCase() == 'online') {
            this.dataService
                .getCollections(pfDepositId)
                .subscribe(function (data) {
                debugger;
                _this.pfCollectionDetails = data;
                _this.collectionsModal.show();
            });
        }
        else {
            this.dataService
                .getLegacyCollections(pfDepositId)
                .subscribe(function (data) {
                debugger;
                _this.pfCollectionDetails = data;
                _this.collectionsModal.show();
            });
        }
    };
    PayInSlipDepositedListComponent.prototype.GetResults = function () {
        if (this.depositFromDate != null && this.depositFromDate != undefined)
            this.strDepositFromDate = this.depositFromDate.toISOString();
        else
            this.strDepositFromDate = "0";
        if (this.depositToDate != null && this.depositToDate != undefined)
            this.strDepositToDate = this.depositToDate.toISOString();
        else
            this.strDepositToDate = "0";
        if (this.strDepositFromDate == "0" || this.strDepositToDate == "0")
            alert("please enter the from and to dates");
        this.getPFDepositedItemsByAgent(this.user.user.deptUserid, Number(this.user.user.userTpe), this.strDepositFromDate, this.strDepositToDate, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo, _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize);
    };
    PayInSlipDepositedListComponent.prototype.viewFormIV = function (pfLegacyMasterDetails) {
        debugger;
        this.FormIVDetail.lwfccode = this.userName;
        this.FormIVDetail.bankdepositdate = pfLegacyMasterDetails.depositDate;
        this.FormIVDetail.scrollno = 0;
        this.FormIVDetail.depositId = pfLegacyMasterDetails.pfDepositId;
        this.dataService
            .genaratePdfLegacyFormIV(this.FormIVDetail)
            .then(function (data) {
            debugger;
            var blob = new Blob([data.body], { type: 'application/pdf' });
            var blobUrl = URL.createObjectURL(blob);
            //window.location.href = blobUrl;
            window.open(blobUrl, "_blank");
            //this.attachmenturl = this.sanitizer.bypassSecurityTrustResourceUrl(blobUrl);
            //this.attachModalFormIV.show();
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('attachModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], PayInSlipDepositedListComponent.prototype, "attachModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('collectionsModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], PayInSlipDepositedListComponent.prototype, "collectionsModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('attachModalFormIV'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], PayInSlipDepositedListComponent.prototype, "attachModalFormIV", void 0);
    PayInSlipDepositedListComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-payinslip-deposited-list',
            template: __webpack_require__(/*! ./payinslip-deposited-list.component.html */ "./src/app/claim/payinslip-deposited-list/payinslip-deposited-list.component.html"),
            styles: [__webpack_require__(/*! ./payinslip-deposited-list.component.css */ "./src/app/claim/payinslip-deposited-list/payinslip-deposited-list.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"], _angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__["DomSanitizer"]])
    ], PayInSlipDepositedListComponent);
    return PayInSlipDepositedListComponent;
}());



/***/ }),

/***/ "./src/app/claim/services/api-dictionary.ts":
/*!**************************************************!*\
  !*** ./src/app/claim/services/api-dictionary.ts ***!
  \**************************************************/
/*! exports provided: ApiDictionary */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiDictionary", function() { return ApiDictionary; });
var ApiDictionary = {
    beneficiaryBasicDetails: {
        url: 'GetBeneficiaryBasicDetailsByID',
        params: { id: 'id' }
    },
    beneficiaryBankDetails: {
        url: 'GetBeneficiaryBankDetailsByBeneficiaryID',
        params: { benSno: 'benSno' }
    },
    beneficiaryNomineeDetails: {
        url: 'GetBeneficiaryNomineeDetailsByBeneficiaryID',
        params: { benSno: 'benSno' }
    },
    beneficiaryFamilyDetails: {
        url: 'GetBeneficiaryFamilyDetailsByBeneficiaryID',
        params: { benSno: 'benSno' }
    },
    GetLOVDetailsByLovId: {
        url: 'GetLOVDetailsByLovId',
        params: { lovId: 'lovId' }
    },
    GetClaimConfigDetails: {
        url: 'GetClaimConfigDetailsByCliamMasterId',
        params: { claimMasterId: 'claimMasterId' }
    },
    GetClaimConfigMasterDetails: {
        url: 'GetClaimConfigDetails',
        params: null
    },
    getClaims: {
        url: 'GetAllClaims',
        params: { benSno: 'benSno' }
    },
    GetAllHospitals: {
        url: 'GetAllHospitals',
        params: null
    },
    getAllClaimsByAgentId: {
        url: 'GetAllClaimsByAgentId',
        params: null
    },
    getAllClaimsbByDraft: {
        url: 'GetAllClaimsbByDraft',
        params: null
    },
    getAllClaimsbByAgentDraft: {
        url: 'GetAllClaimsbByAgentDraft',
        params: null
    },
    createClaim: {
        url: 'createClaim',
        params: null
    },
    updateClaim: {
        url: 'updateClaim',
        params: null
    },
    beneficiaryEduCount: {
        url: 'GetBeneficiaryDependentClaimsbyEdu',
        params: { benSno: 'benSno' }
    },
    getReceipt: {
        url: 'getReceipt',
        params: null
    },
    getClaimDetailsByClaimId: {
        url: 'getClaimDetails',
        params: { claimId: 'claimId' }
    },
    getClaimDetailsById: {
        url: 'getClaimDetailsByClaimId',
        params: { claimId: 'claimId' }
    },
    getClaimTrackDetailsByTransactionId: {
        url: "GetWorkflowTransactionLogDetails",
        params: { baseTransactionId: 'transactionId', transactionType: 'transactionType', wfId: 'wfId' }
    },
    genarateFormV: {
        url: "getFormV",
        params: { baseTransactionId: 'transactionId', transactionType: 'transactionType' }
    },
    getAttachment: {
        url: "getAttachment",
        params: { baseTransactionId: 'transactionId', transactionType: 'transactionType' }
    },
    deleteClaimById: {
        url: "deleteClaim",
        params: { claimId: 'claimId' }
    },
    getAllBeneficiaryClaimRefers: {
        url: "GetAllBeneficiaryClaimRefers",
        params: { benSno: 'benSno', entryPoint: 'entrypoint', userType: 'usertype' }
    },
    getAllAgentClaimRefers: {
        url: "GetAllAgentClaimRefers",
        //params: { agentId: 'agentId', entryPoint: 'entrypoint' }
        params: null
    },
    getActiveFinancialYear: {
        url: "GetActiveFinancialYear"
    },
    getBeneficiaryHealthClaimAmount: {
        url: "GetBeneficiaryHealthClaimAmount",
        params: { benSno: 'benSno', typeOfClaim: 'typeOfClaim?' }
    },
    getPackages: {
        url: 'getPackages',
        params: null
    },
    getLegacyClaimsList: {
        url: 'GetLegacyClaimsList',
        params: null
    },
    saveLegacyClaimDetails: {
        url: 'SaveLegacyClaimDetails',
        params: null
    },
    beneficiaryAppliedDisabilities: {
        url: 'getBeneficiaryAppliedDisabilities',
        params: { benSno: 'benSno' }
    },
    getPfBalance: {
        url: "GetPfBalance"
    },
    validatePfSubmit: {
        url: "ValidatePfSubmit"
    },
    getLastPaidPfDetails: {
        url: "getBeneficiaryLastPaidCollectionDetails",
        // url: 'src/assets/data/PfPaymentDetails.json',
        params: { ssin: 'ssin', benSno: 'benSno' }
    },
    getBeneficiaryDetailsBySearch: {
        url: 'getPFBeneficiaryBasicDetailsByID',
        params: { searchId: 'searchId' }
    },
    getLegacyPFBeneficiaryBasicDetailsByID: {
        url: 'GetLegacyPFBeneficiaryBasicDetailsByID',
        params: { searchId: 'searchId' }
    },
    savePFCollectionDetails: {
        url: 'savePFCollection',
        params: { pfcollectionObj: 'pfObj' }
    },
    getPFMasterConfigDetails: {
        url: 'getPFContribution',
    },
    getAgentCollectedAmount: {
        url: 'getMaxCashAtAgent',
        params: { userId: 'userId' }
    },
    getPFDepositDetailsByAgentId: {
        url: 'getCollectionMasterDetailsByAgent',
        params: { userid: 'id', status: '0/1', page: '1', pageSize: '10' }
    },
    submitPFDepositDetails: {
        url: 'savePFDeposit',
        params: { pfDepositObj: 'pfObj' }
    },
    isBenNomineeClaimSubmitted: {
        url: 'isBenNomineeSubmittedClaim',
        params: { benSno: 'benSno' }
    },
    isSameBenNomineeClaimSubmitted: {
        url: 'isSameBenNomineeSubmittedClaim',
        params: { benSno: 'benSno' }
    },
    getNomineeClaimEntryValidation: {
        url: "GetNomineeClaimEntryValidation"
    },
    getAgentList: {
        url: "GetDeptUsers"
    },
    getBenefitConfigurationDetails: {
        url: "GetBenefitConfigurationDetails"
    },
    getPFConfigurationDetails: {
        url: 'getPFConfigurationDetails',
        params: null
    },
    isValidMonthSubmitted: {
        url: 'IsValidMonthSubmitted',
        params: null
    },
    isValidBookReceipt: {
        url: 'IsValidBookReceipt',
        params: null
    },
    submitLegacyPFDetails: {
        url: 'SaveLegacyPFDetails',
        params: null
    },
    getSubDivRLOBankDetails: {
        url: 'GetSubDivRLOBankDetails',
        params: null
    },
    getAgentBooks: {
        url: 'getAgentBooks',
        params: null
    },
    getAgentLocationWise: {
        url: "GetAgentLocationWise",
        params: null
    },
    //getAgentBooks: {
    //    url: 'getAgentBooks',
    //    params: null
    //},
    getNextReceiptNo: {
        url: 'getNextReceiptNo',
        params: null
    },
    getWorkerTypeDetails: {
        url: 'getWorkerTypeDetails',
        params: null
    },
    getAgentLegacyPfDetails: {
        url: "GetAgentLegacyPfDetails",
        params: null
    },
    getAgentDetailsForDeposit: {
        url: 'getAgentDetailsForDeposit',
        params: null
    },
    savePayInSlip: {
        url: 'SavePayInSlip',
        params: null
    },
    getPFDepositStatusDetailsByAgentId: {
        url: 'getDepositMasterDetailsByAgent',
        params: { userid: 'id', status: '0/1', page: '1', pageSize: '10' }
    },
    isAgentAllDepositsPayInSlipsUploaded: {
        url: 'isAgentAllDepositsPayInSlipsUploaded',
        params: null
    },
    getPFDeposits: {
        url: 'getPFDeposits',
        params: null
    },
    getCollections: {
        url: 'getCollectionMasterDetailsByDepositId',
        params: null
    },
    getLegacyCollections: {
        url: 'getLegacyCollectionMasterDetailsByDepositId',
        params: null
    },
    getPFDepositStatusDetailsByUser: {
        url: 'getDepositMasterDetailsByUser',
        params: null
    },
    getUserDetails: {
        url: 'getUserDetails',
        params: null
    },
    checkReceiptNoForAgentBook: {
        url: 'checkReceiptNoForAgentBook',
        params: null
    },
    getCollectionFinancialYear: {
        url: "GetCollectionFinancialYearDetails",
        params: null
    },
    getBeneficiaryPFDetails: {
        url: "GetBenPFDetails",
        params: null
    },
    isDuplicateDependentSubmitted: {
        url: "IsDuplicateDependentSubmitted",
        params: null
    },
    getAgentCollectionBooks: {
        url: "GetAgentCollectionBooks",
        params: null
    },
    getLegacyPFDetails: {
        url: "GetLegacyPFDetails",
        params: null
    },
    getLegacyPFCollectionDetails: {
        url: "GetLegacyPFCollectionDetails",
        params: null
    },
    getLegacyPFCollections: {
        url: 'GetLegacyPFCollections',
        params: null
    },
    deleteClaimExceptions: {
        url: "DeleteClaimExceptions"
    },
    genaratePdfFormIV: {
        url: "getFormIV",
        params: null
    },
    genaratePdfLegacyFormIV: {
        url: "getLegacyFormIV",
        params: null
    },
    getfinanacialYearListDetails: {
        url: "GetFinanacialYearListDetails",
        params: null
    },
    isValidCollectionYear: {
        url: "IsValidCollectionYear",
        params: null
    },
    isInterestCalculatedforBen: {
        url: "IsInterestCalculatedforBen",
        params: null
    },
    getSubmittedLegacyPFDetails: {
        url: "GetSubmittedLegacyPFDetails",
        params: null
    },
    saveAdjustment: {
        url: "saveAdjustment",
        params: null
    },
    getAdjustmentBeneficiaryBasicDetailsByID: {
        url: "getAdjustmentBeneficiaryBasicDetailsByID",
        params: null
    },
    genaratePdfPayInSlip: {
        url: "getPayInSlip",
        params: null
    },
    isCAFUpdated: {
        url: "IsCAFUpdated",
        params: null
    },
    decryptGripsResponse: {
        url: "decryptGripsResponse",
        params: null
    },
    decryptGripsDoubleVerificationResponse: {
        url: "decryptGripsDoubleVerificationResponse",
        params: null
    },
    repayToGrips: {
        url: "repayToGrips",
        params: null
    },
    postDoubleVerificationGrips: {
        url: "postDoubleVerificationGrips",
        params: null
    },
    downloadPFDepositDetails: {
        url: "getPFDepositDetails",
        params: null
    },
    getRegistrationNumber: {
        url: "getRegistrationNumber",
        params: null
    },
    getPFDepositAttachments: {
        url: "getPFDepositAttachments",
        params: null
    },
    getLWCBankDetails: {
        url: "getLWFCBankDetailsByUserId",
        params: null
    },
    getBeneficiaryPFAccountDetails: {
        url: "getBeneficiaryPFAccountDetails",
        params: null
    },
};


/***/ }),

/***/ "./src/app/claim/services/claim-data.service.ts":
/*!******************************************************!*\
  !*** ./src/app/claim/services/claim-data.service.ts ***!
  \******************************************************/
/*! exports provided: ClaimDataService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClaimDataService", function() { return ClaimDataService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_api_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/api.service */ "./src/app/services/api.service.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _api_dictionary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api-dictionary */ "./src/app/claim/services/api-dictionary.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var ClaimDataService = /** @class */ (function () {
    function ClaimDataService(apiService, _http) {
        this.apiService = apiService;
        this._http = _http;
    }
    ClaimDataService.prototype.getBeneficiaryBasicDetailsByNo = function (id, isRegistrationNo) {
        var paramsMap = new Map();
        paramsMap.set('ssiNum', id);
        paramsMap.set('isRegistrationNo', isRegistrationNo);
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        paramsMap.forEach(function (value, key) {
            params = params.set(key, value);
        });
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].beneficiaryBasicDetails.url, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryBasicDetailsById = function (id) {
        var paramsMap = new Map();
        paramsMap.set('benSno', id);
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        paramsMap.forEach(function (value, key) {
            params = params.set(key, value);
        });
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].beneficiaryBasicDetails.url, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryBankDetails = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].beneficiaryBankDetails.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryNomineeDetails = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].beneficiaryNomineeDetails.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryFamilyDetails = function (id, type) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        if (type == undefined) {
            type = "";
        }
        ;
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].beneficiaryFamilyDetails.url + "/" + id + "/" + type, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryEduCount = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].beneficiaryEduCount.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAllHospitals = function () {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].GetAllHospitals.url, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getlovDetails = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].GetLOVDetailsByLovId.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getClaimConfiguration = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].GetClaimConfigDetails.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getClaimConfigurationMaster = function () {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].GetClaimConfigMasterDetails.url, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.createClaim = function (claim) {
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].createClaim.url, claim).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.updateClaim = function (claim) {
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].createClaim.url, claim).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getClaimsByBenficiary = function (id, entrypoint, userType, claimReferenceNoText, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getClaims.url + "/" + id + "/" + entrypoint + "/" + userType + "/" + pageNo + "/" + pageSize + "/" + claimReferenceNoText, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAllClaimsByAgent = function (id, entrypoint, ssinSearchText, claimReferenceNoText, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAllClaimsByAgentId.url + "/" + id + "/" + entrypoint + "/" + pageNo + "/" + pageSize + "/" + ssinSearchText + "/" + claimReferenceNoText, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAllDraftClaimsByAgent = function (id, entrypoint, ssinSearchText, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAllClaimsbByAgentDraft.url + "/" + id + "/" + entrypoint + "/" + pageNo + "/" + pageSize + "/" + ssinSearchText, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAllDraftClaimsByBen = function (id, entrypoint, userType, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAllClaimsbByDraft.url + "/" + id + "/" + entrypoint + "/" + userType + "/" + pageNo + "/" + pageSize, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.downloadReceipt = function (benName, ssin, claimRefernceNo, amount, name) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getReceipt.url + "/" + benName + "/" + ssin + "/" + claimRefernceNo + "/" + amount + "/" + name, { params: params });
        return this.apiService.downloadResource(options);
    };
    ClaimDataService.prototype.getClaimDetailsByClaimId = function (id, referenceId, claimType) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getClaimDetailsByClaimId.url + "/" + id + "/" + referenceId + "/" + claimType, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getClaimDetailsById = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getClaimDetailsById.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getClaimTrackDetailsByTransactionId = function (id, transactionType, wfId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        if (wfId == undefined) {
            wfId = "";
        }
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getClaimTrackDetailsByTransactionId.url + "/" + id + "/" + transactionType + "/" + wfId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.genaratePdfFormV = function (claim) {
        return this.apiService.genaratePdf(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].genarateFormV.url, claim);
    };
    ClaimDataService.prototype.getAttachment = function () {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAttachment.url, { params: params });
        return this.apiService.downloadResource(options);
    };
    ClaimDataService.prototype.deleteClaimById = function (claimId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].deleteClaimById.url + "/" + claimId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAllReferralClaimsByBenficiary = function (id, entrypoint, userType, claimReferenceNoText, pageNo, pageSize) {
        debugger;
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAllBeneficiaryClaimRefers.url + "/" + id + "/" + entrypoint + "/" + userType + "/" + pageNo + "/" + pageSize + "/" + claimReferenceNoText, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAllReferralClaimsByAgent = function (id, entrypoint, ssinSearchText, claimReferenceNoText, pageNo, pageSize) {
        debugger;
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAllAgentClaimRefers.url + "/" + id + "/" + entrypoint + "/" + pageNo + "/" + pageSize + "/" + ssinSearchText + "/" + claimReferenceNoText, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getActiveFinancialYear = function () {
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getActiveFinancialYear.url);
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getPackages = function () {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getPackages.url, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryHealthClaimAmount = function (benSno, typeOfClaim) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options;
        if (typeOfClaim == undefined || typeOfClaim == null) {
            options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getBeneficiaryHealthClaimAmount.url + "/" + benSno, { params: params });
        }
        else {
            options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getBeneficiaryHealthClaimAmount.url + "/" + benSno + "/" + typeOfClaim, { params: params });
        }
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getLegacyClaimsList = function (id, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getLegacyClaimsList.url + "/" + id + "/" + pageNo + "/" + pageSize, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.saveLegacyClaimDetails = function (claim) {
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].saveLegacyClaimDetails.url, claim).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryAppliedDisabilities = function (id, claimId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].beneficiaryAppliedDisabilities.url + "/" + id + "/" + claimId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getPfBalance = function (bensno) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getPfBalance.url + "/" + bensno, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.validatePfSubmit = function (ssiNumber, nomineeId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].validatePfSubmit.url + "/" + ssiNumber + "/" + nomineeId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getLastPaidPfDetails = function (benSno) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getLastPaidPfDetails.url + "/" + benSno, { params: params });
        // const options = new HttpRequest<any>('GET', ApiDictionary.getLastPaidPfDetails.url, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) { return res; });
    };
    ClaimDataService.prototype.getBeneficiaryDetailsBySearch = function (searchId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getBeneficiaryDetailsBySearch.url + "/" + searchId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryDetailsBySearch1 = function (searchId, isPFDeposit) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getBeneficiaryDetailsBySearch.url + "/" + searchId + "/" + isPFDeposit, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getLegacyPFBeneficiaryBasicDetailsByID = function (searchId, isPFDeposit) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getLegacyPFBeneficiaryBasicDetailsByID.url + "/" + searchId + "/" + isPFDeposit, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.savePFCollectionDetails = function (pfCollection) {
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].savePFCollectionDetails.url, pfCollection).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getPFMasterConfigDetails = function () {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getPFMasterConfigDetails.url, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAgentCollectedAmount = function (userId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAgentCollectedAmount.url + "/" + userId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getPFDepositDetailsByAgentId = function (id, entrypoint, workerTypeId, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getPFDepositDetailsByAgentId.url + "/" + id + "/" + entrypoint + "/" + workerTypeId + "/" + pageNo + "/" + pageSize, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    //submitPFDepositDetails(pfDeposit: any) {
    //    return this.apiService.PostData(ApiDictionary.submitPFDepositDetails.url, pfDeposit).then((res: any) => {
    //        return res;
    //    });
    //}
    ClaimDataService.prototype.submitPFDepositDetails1 = function (userId, rloId, bankId, payInslipNo) {
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].submitPFDepositDetails.url + "/" + userId + "/" + rloId + "/" + bankId + "/" + payInslipNo, null).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.submitPFDepositDetails = function (pfDepositDetails) {
        return this.apiService.PostData2(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].submitPFDepositDetails.url, pfDepositDetails).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.isBenNomineeClaimSubmitted = function (benSno) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].isBenNomineeClaimSubmitted.url + "/" + benSno, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.isSameBenNomineeClaimSubmitted = function (benSno, nomineeId, claimType) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].isSameBenNomineeClaimSubmitted.url + "/" + benSno + "/" + nomineeId + "/" + claimType, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getNomineeClaimEntryValidation = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getNomineeClaimEntryValidation.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    //getAgentList
    ClaimDataService.prototype.getAgentList = function (userTypeId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAgentList.url + "/" + userTypeId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBenefitConfigurationDetails = function (benefitType) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getBenefitConfigurationDetails.url + "/" + benefitType, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getPFConfigurationDetails = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getPFConfigurationDetails.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.isValidMonthSubmitted = function (benSno, monthId, year) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].isValidMonthSubmitted.url + "/" + benSno + "/" + monthId + "/" + year, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.isValidBookReceipt = function (bookId, receiptId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].isValidBookReceipt.url + "/" + bookId + "/" + receiptId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.submitLegacyPFDetails = function (pfCollectionMasterList) {
        debugger;
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].submitLegacyPFDetails.url, pfCollectionMasterList).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getSubDivRLOBankDetails = function (id, workerTypeId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getSubDivRLOBankDetails.url + "/" + id + "/" + workerTypeId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    //getAgentBooks(id: any) {
    //    let params = new HttpParams();
    //    const options = new HttpRequest<any>('GET', ApiDictionary.getAgentBooks.url + "/" + id, { params: params });
    //    return this.apiService.getDropdownData(options).map((res: any) => {
    //        return res;
    //    });
    //}
    ClaimDataService.prototype.getAgentLocationWise = function (userTypeId, userid) {
        debugger;
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAgentLocationWise.url + "/" + userTypeId + "/" + userid, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAgentBooks = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAgentBooks.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getNextReceiptNo = function (bookId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getNextReceiptNo.url + "/" + bookId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.savePayInSlip = function (payInSlip) {
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].savePayInSlip.url, payInSlip).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getPFDepositStatusDetailsByAgentId = function (id, entrypoint, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getPFDepositStatusDetailsByAgentId.url + "/" + id + "/" + entrypoint + "/" + pageNo + "/" + pageSize, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.isAgentAllDepositsPayInSlipsUploaded = function (agentId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].isAgentAllDepositsPayInSlipsUploaded.url + "/" + agentId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getWorkerTypeMasterData = function () {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getWorkerTypeDetails.url, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAgentLegacyPfDetails = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAgentLegacyPfDetails.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAgentDetailsForDeposit = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAgentDetailsForDeposit.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getPFDeposits = function (userId, userType, status, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getPFDeposits.url + "/" + userId + "/" + userType + "/" + status + "/" + pageNo + "/" + pageSize, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getCollections = function (pfDepositId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getCollections.url + "/" + pfDepositId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getLegacyCollections = function (pfDepositId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getLegacyCollections.url + "/" + pfDepositId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getPFDepositStatusDetailsByUser = function (id, userType, depositFromDate, depositToDate, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getPFDepositStatusDetailsByUser.url + "/" + id + "/" + userType + "/" + depositFromDate + "/" + depositToDate + "/" + pageNo + "/" + pageSize, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getUserDetails = function (userId) {
        debugger;
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getUserDetails.url + "/" + userId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.checkReceiptNoForAgentBook = function (bookId, receiptNo) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].checkReceiptNoForAgentBook.url + "/" + bookId + "/" + receiptNo, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getCollectionFinancialYear = function (collectionDate) {
        debugger;
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getCollectionFinancialYear.url + "/" + collectionDate.toISOString(), { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryPFDetails = function (id, page, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getBeneficiaryPFDetails.url + "/" + id + "/" + page + "/" + pageSize, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.isDuplicateDependentSubmitted = function (benSno, dependentId, claimId, onBehalfBen) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].isDuplicateDependentSubmitted.url + "/" + benSno + "/" + dependentId + "/" + claimId + "/" + onBehalfBen, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAgentCollectionBooks = function (id, collectionDate, depositDate) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAgentCollectionBooks.url + "/" + id + "/" + collectionDate.toISOString() + "/" + depositDate.toISOString(), { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getLegacyPFDetails = function (id, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getLegacyPFDetails.url + "/" + id + "/" + pageNo + "/" + pageSize, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getLegacyPFCollectionDetails = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getLegacyPFCollectionDetails.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getLegacyPFCollections = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getLegacyPFCollections.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.deleteClaimExceptions = function (id) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].deleteClaimExceptions.url + "/" + id, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.genaratePdfFormIV = function (formDetails) {
        return this.apiService.genaratePdf(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].genaratePdfFormIV.url, formDetails);
    };
    ClaimDataService.prototype.genaratePdfLegacyFormIV = function (formDetails) {
        return this.apiService.genaratePdf(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].genaratePdfLegacyFormIV.url, formDetails);
    };
    ClaimDataService.prototype.getfinanacialYearListDetails = function (depositDate) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getfinanacialYearListDetails.url + "/" + depositDate.toISOString(), { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.isValidCollectionYear = function (financialYearId, collectionDate) {
        debugger;
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].isValidCollectionYear.url + "/" + financialYearId + "/" + collectionDate.toISOString(), { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.isInterestCalculatedforBen = function (financialYearId, bensno) {
        debugger;
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].isInterestCalculatedforBen.url + "/" + financialYearId + "/" + bensno, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getSubmittedLegacyPFDetails = function (id, pageNo, pageSize) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getSubmittedLegacyPFDetails.url + "/" + id + "/" + pageNo + "/" + pageSize, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.saveAdjustment = function (adjustment) {
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].saveAdjustment.url, adjustment).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getAdjustmentBeneficiaryBasicDetailsByID = function (searchId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getAdjustmentBeneficiaryBasicDetailsByID.url + "/" + searchId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.genaratePdfPayInSlip = function (formDetails) {
        return this.apiService.genaratePdf(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].genaratePdfPayInSlip.url, formDetails);
    };
    ClaimDataService.prototype.isCAFUpdated = function (id, isRegistrationNo) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].isCAFUpdated.url + "/" + id + "/" + isRegistrationNo, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.decryptGripsResponse = function (gripsResponse) {
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].decryptGripsResponse.url, gripsResponse).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.decryptGripsDoubleVerificationResponse = function (gripsResponse) {
        return this.apiService.PostData(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].decryptGripsDoubleVerificationResponse.url, gripsResponse).then(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.repayToGrips = function (pfDepositId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].repayToGrips.url + "/" + pfDepositId, { params: params });
        return this.apiService.getDropdownData2(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.postDoubleVerificationGrips = function (pfDepositId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].postDoubleVerificationGrips.url + "/" + pfDepositId, { params: params });
        return this.apiService.getDropdownData2(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.downloadPFDepositDetails = function (pfDepositId) {
        return this.apiService.genaratePdf(_api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].downloadPFDepositDetails.url + "/" + pfDepositId, pfDepositId);
    };
    ClaimDataService.prototype.getRegistrationNumber = function (ssin) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getRegistrationNumber.url + "/" + ssin, { params: params });
        return this.apiService.getDropdownData2(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getPFDepositAttachments = function (pfDepositId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getPFDepositAttachments.url + "/" + pfDepositId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getLWCBankDetails = function (userId, workerTypeId) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getLWCBankDetails.url + "/" + userId + "/" + workerTypeId, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService.prototype.getBeneficiaryPFAccountDetails = function (bensno) {
        var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        var options = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('GET', _api_dictionary__WEBPACK_IMPORTED_MODULE_3__["ApiDictionary"].getBeneficiaryPFAccountDetails.url + "/" + bensno, { params: params });
        return this.apiService.getDropdownData(options).map(function (res) {
            return res;
        });
    };
    ClaimDataService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_services_api_service__WEBPACK_IMPORTED_MODULE_1__["ApiService"], _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]])
    ], ClaimDataService);
    return ClaimDataService;
}());



/***/ }),

/***/ "./src/app/claim/submittedlegacypfdetails/submittedlegacypfdetails.component.css":
/*!***************************************************************************************!*\
  !*** ./src/app/claim/submittedlegacypfdetails/submittedlegacypfdetails.component.css ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/claim/submittedlegacypfdetails/submittedlegacypfdetails.component.html":
/*!****************************************************************************************!*\
  !*** ./src/app/claim/submittedlegacypfdetails/submittedlegacypfdetails.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div id=\"content\">\r\n    <div class=\"row\">\r\n        <article class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n\r\n            <div class=\"jarviswidget jarviswidget-color-blueDark\" id=\"wid-id-1\" data-widget-editbutton=\"false\" data-widget-sortable=\"false\">\r\n\r\n                <header>\r\n                    <h2>PF Deposited </h2>\r\n                </header>\r\n                <!-- widget div-->\r\n                <div>\r\n\r\n                    <div class=\"jarviswidget-editbox\">\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"widget-body no-padding\">\r\n                        <div class=\"ssv-search\">\r\n                            <input [(ngModel)]=\"searchText\" placeholder=\"Search..\" class=\"advancedSearchTextbox\">\r\n                            <button><i class=\"fa fa-search\"></i></button>\r\n                        </div>\r\n\r\n\r\n                        <p></p>\r\n\r\n                        <table class=\"table table-striped\" [mfData]=\"pfDepositDetails\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        <mfDefaultSorter>Action</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"legacyNo\">Legacy No</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"payinSlipNo\">Payin Slip No</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"depositAmount\">Deposit Amount</mfDefaultSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                        <mfDefaultSorter by=\"depositDateString\">Deposit Date</mfDefaultSorter>\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr *ngFor=\"let deposits of mf.data|grdFilter: {depositAmount:searchText, depositDateString: searchText, payinSlipNo: searchText, scrollNumber: searchText, bankDepositDateString: searchText}; let i=index;\">\r\n                                    <td class=\"\">\r\n                                        <!--<a (click)=\"onEditCollection(deposits.pfLegacyMasterId)\" *ngIf=\"deposits.isEdit\" title=\"Edit\" class=\"txt-color-red\"><i class=\"fa fa-edit fa-lg\"></i></a>-->\r\n                                        <a (click)=\"viewCollections(deposits.pfLegacyMasterId)\" *ngIf=\"!deposits.isEdit\" title=\"View Collections\" class=\"txt-color-red\"><i class=\"fa fa-eye\"></i></a>\r\n                                    </td>\r\n                                    <td>{{deposits.pfLegacyMasterId}}</td>\r\n                                    <td>{{deposits.payinSlipNo}}</td>\r\n                                    <td>{{deposits.depositAmount}}</td>\r\n                                    <td>{{deposits.depositDateString}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"5\">\r\n                                        <div>\r\n                                            <ngb-pagination [collectionSize]=\"totalRows\" [(pageSize)]=\"pageSize\" [(page)]=\"page\" (pageChange)=\"changepage($event)\" [boundaryLinks]=\"true\"></ngb-pagination>\r\n                                            <!--<mfBootstrapPaginator></mfBootstrapPaginator>-->\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </div>\r\n</div>\r\n\r\n<div bsModal #payInSlipModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"payInSlipModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <fieldset id=\"divUploadPayInSlip\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <label>Bank Deposited Date <span [style.color]=\"!dateOfDepostValid?'red':''\"><b>*</b></span></label>\r\n                            <label class=\"input\">\r\n                                <!--<i class=\"icon-append fa fa-calendar\"></i>-->\r\n                                <input type=\"text\" name=\"depositDate\" autocomplete=\"off\" class=\"form-control\" bsDatepicker [bsConfig]=\"datePickerConfig\"\r\n                                       placeholder=\"DD/MM/YYYY\"\r\n                                       #depositDate=\"ngModel\"\r\n                                       [maxDate]=\"toDayDate\"\r\n                                       [(ngModel)]=\"bankDepositDate\" readonly\r\n                                       value=\"{{ depositedDate | date: 'dd/MM/yyyy' }}\"\r\n                                       [ngClass]=\"{'invalid-data':!dateOfDepostValid, 'valid-data': dateOfDepostValid}\"\r\n                                       required>\r\n                            </label>\r\n                            <div *ngIf=\"!dateOfDepostValid\">\r\n                                <span style=\"color: red;\">Deposited Date is required </span>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"label\">Scroll Number <span [style.color]=\"!payInSlipNumberValid?'red':''\"><b>*</b></span> </label>\r\n                                <input type=\"text\" class=\"form-control\" name=\"payInSlip\" numbersOnly [(ngModel)]=\"scrollNumber\" />\r\n                                <div *ngIf=\"!payInSlipNumberValid\">\r\n                                    <span style=\"color: red;\">Scroll Number is required </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12 smart-form\">\r\n                            <section class=\"col col-6 top-5\">\r\n                                <label class=\"label\">PayIn Slip <span [style.color]=\"!payInSlipUploaded?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"onFileChanged($event, deposits)\">Browse</span>\r\n                                    <input type=\"text\" readonly>\r\n                                </div>\r\n                                <div *ngIf=\"(!payInSlipUploaded) && (payInSlipCertificate.fileName =='' || payInSlipCertificate.fileName == undefined )\">\r\n                                    <span style=\"color: red;\">PayIn Slip is required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr>\r\n                                            <td>{{payInSlipCertificate.fileName}}</td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </section>\r\n                            <section style=\"padding-top:30px\" class=\"col col-6\"><label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label></section>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!--<div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label class=\"label\">PayIn Slip <span [style.color]=\"!payInSlipUploaded?'red':''\"><b>*</b></span></label>\r\n                                <div class=\"input input-file\">\r\n                                    <span class=\"button\"><input type=\"file\" id=\"file\" (change)=\"onFileChanged($event, deposits)\">Browse</span><input type=\"text\" readonly>\r\n                                    <label class=\"label\">Document limit is upto 2MB, JPEG/PNG/PDF</label>\r\n                                </div>\r\n                                <div *ngIf=\"(!payInSlipUploaded) && (payInSlipCertificate.fileName =='' || payInSlipCertificate.fileName == undefined )\">\r\n                                    <span style=\"color: red;\">PayIn Slip is required </span>\r\n                                </div>\r\n                                <div>\r\n                                    <table>\r\n                                        <tr>\r\n                                            <td>{{payInSlipCertificate.fileName}}</td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>-->\r\n                </fieldset>\r\n            </div>\r\n\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"savePaySlip()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div bsModal #collectionsModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\"\r\n     aria-hidden=\"true\" [config]=\"{backdrop: 'static',keyboard:false}\">\r\n    <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"collectionsModal.hide()\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h4 class=\"modal-title\">Status Message</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <!--<div class=\"widget-body no-padding\">-->\r\n                <!--<table id=\"datatable_fixed_column\" class=\"table table-striped table-bordered\"\r\n                       [mfData]=\"pfCollectionDetails\" #mf=\"mfDataTable\" [mfRowsOnPage]=\"10\" width=\"100%\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>\r\n                                <mfDefaultSorter by=\"ssI_Number\">SSIN</mfDefaultSorter>\r\n                            </th>\r\n                            <th>\r\n                                <mfDefaultSorter by=\"benFullName\">Beneficiary Name</mfDefaultSorter>\r\n                            </th>\r\n                            <th>\r\n                                <mfDefaultSorter by=\"receiptNo\">Receipt No</mfDefaultSorter>\r\n\r\n                            </th>\r\n                            <th>\r\n                                <mfDefaultSorter by=\"bookNo\">Book No</mfDefaultSorter>\r\n\r\n                            </th>\r\n                            <th>\r\n                                <mfDefaultSorter by=\"collectionDateString\">Collection Date</mfDefaultSorter>\r\n                            </th>\r\n\r\n                            <th>\r\n                                <mfDefaultSorter by=\"paidFromMonth\">Paid From</mfDefaultSorter>\r\n                            </th>\r\n                            <th>\r\n                                <mfDefaultSorter by=\"paidToMonth\">Paid To</mfDefaultSorter>\r\n                            </th>\r\n                            <th>\r\n                                <mfDefaultSorter by=\"collectionAmount\">Amount</mfDefaultSorter>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let col of mf.data; let i=index;\">\r\n                            <td>{{col.ssI_Number}}</td>\r\n                            <td>{{col.benFullName}}</td>\r\n                            <td>{{col.receiptNo}}</td>\r\n                            <td>{{col.bookNo}}</td>\r\n                            <td>{{col.collectionDateString}}</td>\r\n                            <td>{{col.paidFromMonth}}</td>\r\n                            <td>{{col.paidToMonth}}</td>\r\n                            <td>{{col.collectionAmount}}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td colspan=\"8\">\r\n                                <div>\r\n                                    <mfBootstrapPaginator></mfBootstrapPaginator>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>-->\r\n                <!--</div>-->\r\n            </div>\r\n\r\n            <div class=\"modal-footer\">\r\n                <!--<button type=\"button\" class=\"btn btn-default\" (click)=\"downloadRecipt()\">\r\n                    Download Receipt\r\n                </button>-->\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"savePaySlip()\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/claim/submittedlegacypfdetails/submittedlegacypfdetails.component.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/claim/submittedlegacypfdetails/submittedlegacypfdetails.component.ts ***!
  \**************************************************************************************/
/*! exports provided: SubmittedlegacypfdetailsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubmittedlegacypfdetailsComponent", function() { return SubmittedlegacypfdetailsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/claim-data.service */ "./src/app/claim/services/claim-data.service.ts");
/* harmony import */ var src_app_UserService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/UserService */ "./src/app/UserService.ts");
/* harmony import */ var _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pipes/constnts.model */ "./src/app/claim/pipes/constnts.model.ts");
/* harmony import */ var ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-bootstrap */ "./node_modules/ngx-bootstrap/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var SubmittedlegacypfdetailsComponent = /** @class */ (function () {
    function SubmittedlegacypfdetailsComponent(router, route, dataService, user) {
        this.router = router;
        this.route = route;
        this.dataService = dataService;
        this.user = user;
        this.page = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageNo;
        this.pageSize = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["pagination"].pageSize;
        this.pfCollectionDetails = [];
        this.payInSlipUploaded = true;
        this.dateOfDepostValid = true;
        this.payInSlipNumberValid = true;
        this.payInSlipCertificate = {};
        this.pfDepositDetails = [];
        this.datePickerConfig = Object.assign({}, {
            dateInputFormat: 'DD/MM/YYYY',
            showWeekNumbers: false,
            containerClass: 'theme-dark-blue'
        });
        this.toDayDate = new Date();
    }
    SubmittedlegacypfdetailsComponent.prototype.ngOnInit = function () {
        this.userName = this.user.user.userName;
        this.userCode = this.user.user.userTypeName;
        this.getLegacyPFDetails(this.user.user.deptUserid, this.page, this.pageSize);
    };
    SubmittedlegacypfdetailsComponent.prototype.getLegacyPFDetails = function (userId, pageNo, pageSize) {
        var _this = this;
        this.dataService
            .getSubmittedLegacyPFDetails(userId, pageNo, pageSize)
            .subscribe(function (data) {
            debugger;
            _this.pfDepositDetails = data.results;
            _this.totalRows = data.rowCount;
        });
    };
    SubmittedlegacypfdetailsComponent.prototype.changepage = function (page) {
        // this.getPFDeposits(this.user.user.deptUserid, Number(this.user.user.userTpe), PFDepositeStatus.deposited, this.page, this.pageSize);
        this.getLegacyPFDetails(this.user.user.deptUserid, this.page, this.pageSize);
    };
    SubmittedlegacypfdetailsComponent.prototype.onFileChanged = function (inputValue) {
        var _this = this;
        var file = inputValue.target.files[0];
        if (file.type === "application/pdf" || file.type.includes("image/")) {
            if (file.size > 2000000) {
                alert("File is too big!");
                return;
            }
            ;
            var myReader = new FileReader();
            myReader.onloadend = function (e) {
                var model = {};
                model.fileName = file.name;
                model.filePath = "test";
                model.fileContent = myReader.result.toString().split(',')[1];
                model.statusId = 1;
                model.attachmentType = _pipes_constnts_model__WEBPACK_IMPORTED_MODULE_4__["AttachmentType"].PayinSlip;
                model.pfDepositId = _this.depositId;
                model.createdBy = _this.user.user.deptUserid;
                //this.payInSlip = model;
                _this.payInSlipCertificate = model;
            };
            myReader.readAsDataURL(file);
        }
        else {
            alert("Only accept pdf and images");
        }
    };
    SubmittedlegacypfdetailsComponent.prototype.upload = function (details) {
        this.depositId = details.pfDepositId;
        this.payInSlipModal.show();
    };
    SubmittedlegacypfdetailsComponent.prototype.savePaySlip = function () {
        var _this = this;
        if (this.validatePayInSlip()) {
            this.payInSlipCertificate.bankDepositDate = this.bankDepositDate;
            this.payInSlipCertificate.scrollNumber = this.scrollNumber;
            if (confirm("Are you sure to proceed ")) {
                this.dataService
                    .savePayInSlip(this.payInSlipCertificate)
                    .then(function (data) {
                    if (data) {
                        _this.successMessage = "PayIn Slip Uploaded successfully";
                    }
                    else {
                        _this.successMessage = "PayIn Slip Not Uploaded";
                    }
                    _this.payInSlipModal.hide();
                });
            }
        }
    };
    SubmittedlegacypfdetailsComponent.prototype.validatePayInSlip = function () {
        var isValid = true;
        if (this.bankDepositDate == null && this.bankDepositDate == undefined) {
            isValid = this.dateOfDepostValid = false;
        }
        if (this.scrollNumber == null && this.scrollNumber == undefined) {
            isValid = this.payInSlipNumberValid = false;
        }
        if (this.payInSlipCertificate.fileName == null && this.payInSlipCertificate.fileName == undefined) {
            isValid = this.payInSlipUploaded = false;
        }
        return isValid;
    };
    SubmittedlegacypfdetailsComponent.prototype.viewCollections = function (pfLegacyMasterId) {
        this.router.navigate(['claim/bulkpfdepositcollectionlist', { pfLegacyMasterId: pfLegacyMasterId }], { skipLocationChange: true });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('payInSlipModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], SubmittedlegacypfdetailsComponent.prototype, "payInSlipModal", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('collectionsModal'),
        __metadata("design:type", ngx_bootstrap__WEBPACK_IMPORTED_MODULE_5__["ModalDirective"])
    ], SubmittedlegacypfdetailsComponent.prototype, "collectionsModal", void 0);
    SubmittedlegacypfdetailsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-submittedlegacypfdetails',
            template: __webpack_require__(/*! ./submittedlegacypfdetails.component.html */ "./src/app/claim/submittedlegacypfdetails/submittedlegacypfdetails.component.html"),
            styles: [__webpack_require__(/*! ./submittedlegacypfdetails.component.css */ "./src/app/claim/submittedlegacypfdetails/submittedlegacypfdetails.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"], _services_claim_data_service__WEBPACK_IMPORTED_MODULE_2__["ClaimDataService"], src_app_UserService__WEBPACK_IMPORTED_MODULE_3__["UserService"]])
    ], SubmittedlegacypfdetailsComponent);
    return SubmittedlegacypfdetailsComponent;
}());



/***/ })

}]);
//# sourceMappingURL=claim-claim-module.js.map